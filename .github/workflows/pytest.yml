# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: pytest

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

# we want an ongoing run of this workflow to be canceled by a later commit
# so that there is only one concurrent run of this workflow for each branch
concurrency:
  group: pytest-${{ github.head_ref || github.sha }}
  cancel-in-progress: true

jobs:
  pytest:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        python-version: [3.7]
        test-markers: ["not distributed"]
        include:
          - python-version: 3.7
            pytorch-version: 1.10.0
    env:
      PYTORCH: ${{ matrix.pytorch-version }}
      MARKERS: ${{ matrix.test-markers }}

    name: py${{ matrix.python-version  }}, torch-${{ matrix.pytorch-version }}, ${{ matrix.test-markers }}, ${{ matrix.os }}

    timeout-minutes: 50
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Setup Linux
        if: runner.os == 'linux'
        run: |
          sudo apt-get install -y cmake libsndfile1

      - name: Cat hosts
        if: runner.os == 'linux'
        run: |
          sudo cat /etc/hosts

      - name: Get hostnames
        if: runner.os == 'linux'
        run: |
          python -c "import socket; print(socket.gethostname()); print(socket.gethostbyname(socket.gethostname()))"

      - name: Pip
        if: runner.os == 'linux'
        run: |
          pip install psutil

      - name: Check ifaces
        if: runner.os == 'linux'
        run: |
          python -c "from psutil import net_if_addrs; print(net_if_addrs())"

      - name: Get localhost addresses
        if: runner.os == 'linux'
        run: |
          python -c "import psutil; import socket; print({intf_info.address for intf_info_list in psutil.net_if_addrs().values() for intf_info in intf_info_list if intf_info.family == socket.AF_INET})"
