{
    "loading_errors": [],
    "objects": [
        {
            "attributes": [
                "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.type",
                "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.lr",
                "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.momentum",
                "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.alpha",
                "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.eps",
                "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.centered",
                "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.weight_decay"
            ],
            "bases": [
                "ludwig.modules.optimization_modules.BaseOptimizerConfig"
            ],
            "category": "class",
            "children": {
                "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema": {
                    "attributes": [
                        "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema._declared_fields",
                        "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema._hooks",
                        "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema.opts",
                        "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema.type",
                        "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema.lr",
                        "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema.momentum",
                        "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema.alpha",
                        "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema.eps",
                        "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema.centered",
                        "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema.weight_decay"
                    ],
                    "bases": [
                        "marshmallow_dataclass._base_schema.<locals>.BaseSchema"
                    ],
                    "category": "class",
                    "children": {
                        "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema.Meta": {
                            "attributes": [
                                "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema.Meta.unknown"
                            ],
                            "bases": [
                                "object"
                            ],
                            "category": "class",
                            "children": {
                                "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema.Meta.unknown": {
                                    "attributes": [],
                                    "category": "attribute",
                                    "children": {},
                                    "classes": [],
                                    "docstring": "Flag that sets marshmallow `load` calls to ignore unknown properties passed as a parameter.",
                                    "docstring_sections": [
                                        {
                                            "type": "markdown",
                                            "value": "Flag that sets marshmallow `load` calls to ignore unknown properties passed as a parameter."
                                        }
                                    ],
                                    "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py",
                                    "functions": [],
                                    "has_contents": true,
                                    "methods": [],
                                    "modules": [],
                                    "name": "unknown",
                                    "parent_path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema.Meta",
                                    "path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema.Meta.unknown",
                                    "properties": [],
                                    "relative_file_path": "ludwig/modules/optimization_modules.py",
                                    "source": {},
                                    "type": ""
                                }
                            },
                            "classes": [],
                            "docstring": "Sub-class specifying meta information for Marshmallow.\n\nCurrently only sets `unknown` flag to `EXCLUDE`. This is done to mirror Ludwig behavior: unknown properties are\nexcluded from `load` calls so that the marshmallow_dataclass package can be used but\n`get_custom_schema_from_marshmallow_class` will manually set a marshmallow schema's `additionalProperties` attr.\nto True so that JSON objects with extra properties do not raise errors; as a result properties are picked and\nfilled in as necessary.",
                            "docstring_sections": [
                                {
                                    "type": "markdown",
                                    "value": "Sub-class specifying meta information for Marshmallow.\n\nCurrently only sets `unknown` flag to `EXCLUDE`. This is done to mirror Ludwig behavior: unknown properties are\nexcluded from `load` calls so that the marshmallow_dataclass package can be used but\n`get_custom_schema_from_marshmallow_class` will manually set a marshmallow schema's `additionalProperties` attr.\nto True so that JSON objects with extra properties do not raise errors; as a result properties are picked and\nfilled in as necessary."
                                }
                            ],
                            "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py",
                            "functions": [],
                            "has_contents": true,
                            "methods": [],
                            "modules": [],
                            "name": "Meta",
                            "parent_path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema",
                            "path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema.Meta",
                            "properties": [],
                            "relative_file_path": "ludwig/modules/optimization_modules.py",
                            "source": {
                                "code": "    class Meta:\n        \"\"\"Sub-class specifying meta information for Marshmallow.\n\n        Currently only sets `unknown` flag to `EXCLUDE`. This is done to mirror Ludwig behavior: unknown properties are\n        excluded from `load` calls so that the marshmallow_dataclass package can be used but\n        `get_custom_schema_from_marshmallow_class` will manually set a marshmallow schema's `additionalProperties` attr.\n        to True so that JSON objects with extra properties do not raise errors; as a result properties are picked and\n        filled in as necessary.\n        \"\"\"\n\n        unknown = EXCLUDE\n        \"Flag that sets marshmallow `load` calls to ignore unknown properties passed as a parameter.\"\n",
                                "line_start": 49
                            }
                        },
                        "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema._declared_fields": {
                            "attributes": [],
                            "category": "attribute",
                            "children": {},
                            "classes": [],
                            "docstring": null,
                            "docstring_sections": [],
                            "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py",
                            "functions": [],
                            "has_contents": false,
                            "methods": [],
                            "modules": [],
                            "name": "_declared_fields",
                            "parent_path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema",
                            "path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema._declared_fields",
                            "properties": [
                                "private"
                            ],
                            "relative_file_path": "ludwig/modules/optimization_modules.py",
                            "source": {},
                            "type": ""
                        },
                        "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema._hooks": {
                            "attributes": [],
                            "category": "attribute",
                            "children": {},
                            "classes": [],
                            "docstring": null,
                            "docstring_sections": [],
                            "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py",
                            "functions": [],
                            "has_contents": false,
                            "methods": [],
                            "modules": [],
                            "name": "_hooks",
                            "parent_path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema",
                            "path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema._hooks",
                            "properties": [
                                "private"
                            ],
                            "relative_file_path": "ludwig/modules/optimization_modules.py",
                            "source": {},
                            "type": ""
                        },
                        "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema.alpha": {
                            "attributes": [],
                            "category": "attribute",
                            "children": {},
                            "classes": [],
                            "docstring": null,
                            "docstring_sections": [],
                            "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py",
                            "functions": [],
                            "has_contents": false,
                            "methods": [],
                            "modules": [],
                            "name": "alpha",
                            "parent_path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema",
                            "path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema.alpha",
                            "properties": [
                                "marshmallow-field"
                            ],
                            "relative_file_path": "ludwig/modules/optimization_modules.py",
                            "source": {},
                            "type": "Float"
                        },
                        "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema.centered": {
                            "attributes": [],
                            "category": "attribute",
                            "children": {},
                            "classes": [],
                            "docstring": null,
                            "docstring_sections": [],
                            "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py",
                            "functions": [],
                            "has_contents": false,
                            "methods": [],
                            "modules": [],
                            "name": "centered",
                            "parent_path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema",
                            "path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema.centered",
                            "properties": [
                                "marshmallow-field"
                            ],
                            "relative_file_path": "ludwig/modules/optimization_modules.py",
                            "source": {},
                            "type": "Boolean"
                        },
                        "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema.eps": {
                            "attributes": [],
                            "category": "attribute",
                            "children": {},
                            "classes": [],
                            "docstring": null,
                            "docstring_sections": [],
                            "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py",
                            "functions": [],
                            "has_contents": false,
                            "methods": [],
                            "modules": [],
                            "name": "eps",
                            "parent_path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema",
                            "path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema.eps",
                            "properties": [
                                "marshmallow-field"
                            ],
                            "relative_file_path": "ludwig/modules/optimization_modules.py",
                            "source": {},
                            "type": "Float"
                        },
                        "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema.lr": {
                            "attributes": [],
                            "category": "attribute",
                            "children": {},
                            "classes": [],
                            "docstring": null,
                            "docstring_sections": [],
                            "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py",
                            "functions": [],
                            "has_contents": false,
                            "methods": [],
                            "modules": [],
                            "name": "lr",
                            "parent_path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema",
                            "path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema.lr",
                            "properties": [
                                "marshmallow-field"
                            ],
                            "relative_file_path": "ludwig/modules/optimization_modules.py",
                            "source": {},
                            "type": "Float"
                        },
                        "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema.momentum": {
                            "attributes": [],
                            "category": "attribute",
                            "children": {},
                            "classes": [],
                            "docstring": null,
                            "docstring_sections": [],
                            "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py",
                            "functions": [],
                            "has_contents": false,
                            "methods": [],
                            "modules": [],
                            "name": "momentum",
                            "parent_path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema",
                            "path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema.momentum",
                            "properties": [
                                "marshmallow-field"
                            ],
                            "relative_file_path": "ludwig/modules/optimization_modules.py",
                            "source": {},
                            "type": "Float"
                        },
                        "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema.opts": {
                            "attributes": [],
                            "category": "attribute",
                            "children": {},
                            "classes": [],
                            "docstring": null,
                            "docstring_sections": [],
                            "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py",
                            "functions": [],
                            "has_contents": false,
                            "methods": [],
                            "modules": [],
                            "name": "opts",
                            "parent_path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema",
                            "path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema.opts",
                            "properties": [],
                            "relative_file_path": "ludwig/modules/optimization_modules.py",
                            "source": {},
                            "type": ""
                        },
                        "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema.type": {
                            "attributes": [],
                            "category": "attribute",
                            "children": {},
                            "classes": [],
                            "docstring": null,
                            "docstring_sections": [],
                            "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py",
                            "functions": [],
                            "has_contents": false,
                            "methods": [],
                            "modules": [],
                            "name": "type",
                            "parent_path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema",
                            "path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema.type",
                            "properties": [
                                "marshmallow-field"
                            ],
                            "relative_file_path": "ludwig/modules/optimization_modules.py",
                            "source": {},
                            "type": "String"
                        },
                        "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema.weight_decay": {
                            "attributes": [],
                            "category": "attribute",
                            "children": {},
                            "classes": [],
                            "docstring": null,
                            "docstring_sections": [],
                            "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py",
                            "functions": [],
                            "has_contents": false,
                            "methods": [],
                            "modules": [],
                            "name": "weight_decay",
                            "parent_path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema",
                            "path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema.weight_decay",
                            "properties": [
                                "marshmallow-field"
                            ],
                            "relative_file_path": "ludwig/modules/optimization_modules.py",
                            "source": {},
                            "type": "Float"
                        }
                    },
                    "classes": [
                        "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema.Meta"
                    ],
                    "docstring": "",
                    "docstring_sections": [],
                    "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py",
                    "functions": [],
                    "has_contents": true,
                    "methods": [],
                    "modules": [],
                    "name": "Schema",
                    "parent_path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig",
                    "path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema",
                    "properties": [
                        "marshmallow-model"
                    ],
                    "relative_file_path": "ludwig/modules/optimization_modules.py",
                    "source": {}
                },
                "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.__eq__": {
                    "attributes": [],
                    "category": "method",
                    "children": {},
                    "classes": [],
                    "docstring": "",
                    "docstring_sections": [],
                    "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py",
                    "functions": [],
                    "has_contents": false,
                    "methods": [],
                    "modules": [],
                    "name": "__eq__",
                    "parent_path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig",
                    "path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.__eq__",
                    "properties": [
                        "special"
                    ],
                    "relative_file_path": "ludwig/modules/optimization_modules.py",
                    "signature": {
                        "parameters": [
                            {
                                "kind": "POSITIONAL_OR_KEYWORD",
                                "name": "self"
                            },
                            {
                                "kind": "POSITIONAL_OR_KEYWORD",
                                "name": "other"
                            }
                        ]
                    },
                    "source": {}
                },
                "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.__init__": {
                    "attributes": [],
                    "category": "method",
                    "children": {},
                    "classes": [],
                    "docstring": "",
                    "docstring_sections": [],
                    "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py",
                    "functions": [],
                    "has_contents": false,
                    "methods": [],
                    "modules": [],
                    "name": "__init__",
                    "parent_path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig",
                    "path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.__init__",
                    "properties": [
                        "special"
                    ],
                    "relative_file_path": "ludwig/modules/optimization_modules.py",
                    "signature": {
                        "parameters": [
                            {
                                "kind": "POSITIONAL_OR_KEYWORD",
                                "name": "self"
                            },
                            {
                                "annotation": "str",
                                "default": "'rmsprop'",
                                "kind": "POSITIONAL_OR_KEYWORD",
                                "name": "type"
                            },
                            {
                                "annotation": "float",
                                "default": "0.01",
                                "kind": "POSITIONAL_OR_KEYWORD",
                                "name": "lr"
                            },
                            {
                                "annotation": "float",
                                "default": "0.0",
                                "kind": "POSITIONAL_OR_KEYWORD",
                                "name": "momentum"
                            },
                            {
                                "annotation": "float",
                                "default": "0.99",
                                "kind": "POSITIONAL_OR_KEYWORD",
                                "name": "alpha"
                            },
                            {
                                "annotation": "float",
                                "default": "1e-08",
                                "kind": "POSITIONAL_OR_KEYWORD",
                                "name": "eps"
                            },
                            {
                                "annotation": "bool",
                                "default": "False",
                                "kind": "POSITIONAL_OR_KEYWORD",
                                "name": "centered"
                            },
                            {
                                "annotation": "float",
                                "default": "0.0",
                                "kind": "POSITIONAL_OR_KEYWORD",
                                "name": "weight_decay"
                            }
                        ],
                        "return_annotation": "None"
                    },
                    "source": {}
                },
                "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.__repr__": {
                    "attributes": [],
                    "category": "method",
                    "children": {},
                    "classes": [],
                    "docstring": "",
                    "docstring_sections": [],
                    "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py",
                    "functions": [],
                    "has_contents": false,
                    "methods": [],
                    "modules": [],
                    "name": "__repr__",
                    "parent_path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig",
                    "path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.__repr__",
                    "properties": [
                        "special"
                    ],
                    "relative_file_path": "ludwig/modules/optimization_modules.py",
                    "signature": {
                        "parameters": [
                            {
                                "kind": "POSITIONAL_OR_KEYWORD",
                                "name": "self"
                            }
                        ]
                    },
                    "source": {}
                },
                "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.alpha": {
                    "attributes": [],
                    "category": "attribute",
                    "children": {},
                    "classes": [],
                    "docstring": null,
                    "docstring_sections": [],
                    "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py",
                    "functions": [],
                    "has_contents": false,
                    "methods": [],
                    "modules": [],
                    "name": "alpha",
                    "parent_path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig",
                    "path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.alpha",
                    "properties": [
                        "dataclass-field"
                    ],
                    "relative_file_path": "ludwig/modules/optimization_modules.py",
                    "source": {},
                    "type": "float"
                },
                "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.centered": {
                    "attributes": [],
                    "category": "attribute",
                    "children": {},
                    "classes": [],
                    "docstring": null,
                    "docstring_sections": [],
                    "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py",
                    "functions": [],
                    "has_contents": false,
                    "methods": [],
                    "modules": [],
                    "name": "centered",
                    "parent_path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig",
                    "path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.centered",
                    "properties": [
                        "dataclass-field"
                    ],
                    "relative_file_path": "ludwig/modules/optimization_modules.py",
                    "source": {},
                    "type": "bool"
                },
                "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.eps": {
                    "attributes": [],
                    "category": "attribute",
                    "children": {},
                    "classes": [],
                    "docstring": null,
                    "docstring_sections": [],
                    "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py",
                    "functions": [],
                    "has_contents": false,
                    "methods": [],
                    "modules": [],
                    "name": "eps",
                    "parent_path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig",
                    "path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.eps",
                    "properties": [
                        "dataclass-field"
                    ],
                    "relative_file_path": "ludwig/modules/optimization_modules.py",
                    "source": {},
                    "type": "float"
                },
                "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.lr": {
                    "attributes": [],
                    "category": "attribute",
                    "children": {},
                    "classes": [],
                    "docstring": null,
                    "docstring_sections": [],
                    "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py",
                    "functions": [],
                    "has_contents": false,
                    "methods": [],
                    "modules": [],
                    "name": "lr",
                    "parent_path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig",
                    "path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.lr",
                    "properties": [
                        "dataclass-field"
                    ],
                    "relative_file_path": "ludwig/modules/optimization_modules.py",
                    "source": {},
                    "type": "float"
                },
                "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.momentum": {
                    "attributes": [],
                    "category": "attribute",
                    "children": {},
                    "classes": [],
                    "docstring": null,
                    "docstring_sections": [],
                    "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py",
                    "functions": [],
                    "has_contents": false,
                    "methods": [],
                    "modules": [],
                    "name": "momentum",
                    "parent_path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig",
                    "path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.momentum",
                    "properties": [
                        "dataclass-field"
                    ],
                    "relative_file_path": "ludwig/modules/optimization_modules.py",
                    "source": {},
                    "type": "float"
                },
                "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.optimizer_class": {
                    "attributes": [],
                    "bases": [
                        "torch.optim.optimizer.Optimizer"
                    ],
                    "category": "class",
                    "children": {
                        "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.optimizer_class.__init__": {
                            "attributes": [],
                            "category": "method",
                            "children": {},
                            "classes": [],
                            "docstring": "",
                            "docstring_sections": [],
                            "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py",
                            "functions": [],
                            "has_contents": false,
                            "methods": [],
                            "modules": [],
                            "name": "__init__",
                            "parent_path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.optimizer_class",
                            "path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.optimizer_class.__init__",
                            "properties": [
                                "special"
                            ],
                            "relative_file_path": "ludwig/modules/optimization_modules.py",
                            "signature": {
                                "parameters": [
                                    {
                                        "kind": "POSITIONAL_OR_KEYWORD",
                                        "name": "self"
                                    },
                                    {
                                        "kind": "POSITIONAL_OR_KEYWORD",
                                        "name": "params"
                                    },
                                    {
                                        "default": "0.01",
                                        "kind": "POSITIONAL_OR_KEYWORD",
                                        "name": "lr"
                                    },
                                    {
                                        "default": "0.99",
                                        "kind": "POSITIONAL_OR_KEYWORD",
                                        "name": "alpha"
                                    },
                                    {
                                        "default": "1e-08",
                                        "kind": "POSITIONAL_OR_KEYWORD",
                                        "name": "eps"
                                    },
                                    {
                                        "default": "0",
                                        "kind": "POSITIONAL_OR_KEYWORD",
                                        "name": "weight_decay"
                                    },
                                    {
                                        "default": "0",
                                        "kind": "POSITIONAL_OR_KEYWORD",
                                        "name": "momentum"
                                    },
                                    {
                                        "default": "False",
                                        "kind": "POSITIONAL_OR_KEYWORD",
                                        "name": "centered"
                                    }
                                ]
                            },
                            "source": {
                                "code": "    def __init__(self, params, lr=1e-2, alpha=0.99, eps=1e-8, weight_decay=0, momentum=0, centered=False):\n        if not 0.0 <= lr:\n            raise ValueError(\"Invalid learning rate: {}\".format(lr))\n        if not 0.0 <= eps:\n            raise ValueError(\"Invalid epsilon value: {}\".format(eps))\n        if not 0.0 <= momentum:\n            raise ValueError(\"Invalid momentum value: {}\".format(momentum))\n        if not 0.0 <= weight_decay:\n            raise ValueError(\"Invalid weight_decay value: {}\".format(weight_decay))\n        if not 0.0 <= alpha:\n            raise ValueError(\"Invalid alpha value: {}\".format(alpha))\n\n        defaults = dict(lr=lr, momentum=momentum, alpha=alpha, eps=eps, centered=centered, weight_decay=weight_decay)\n        super(RMSprop, self).__init__(params, defaults)\n",
                                "line_start": 64
                            }
                        },
                        "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.optimizer_class.__setstate__": {
                            "attributes": [],
                            "category": "method",
                            "children": {},
                            "classes": [],
                            "docstring": "",
                            "docstring_sections": [],
                            "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py",
                            "functions": [],
                            "has_contents": false,
                            "methods": [],
                            "modules": [],
                            "name": "__setstate__",
                            "parent_path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.optimizer_class",
                            "path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.optimizer_class.__setstate__",
                            "properties": [
                                "special"
                            ],
                            "relative_file_path": "ludwig/modules/optimization_modules.py",
                            "signature": {
                                "parameters": [
                                    {
                                        "kind": "POSITIONAL_OR_KEYWORD",
                                        "name": "self"
                                    },
                                    {
                                        "kind": "POSITIONAL_OR_KEYWORD",
                                        "name": "state"
                                    }
                                ]
                            },
                            "source": {
                                "code": "    def __setstate__(self, state):\n        super(RMSprop, self).__setstate__(state)\n        for group in self.param_groups:\n            group.setdefault('momentum', 0)\n            group.setdefault('centered', False)\n",
                                "line_start": 79
                            }
                        },
                        "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.optimizer_class.step": {
                            "attributes": [],
                            "category": "method",
                            "children": {},
                            "classes": [],
                            "docstring": "Performs a single optimization step.\n\nArgs:\n    closure (callable, optional): A closure that reevaluates the model\n        and returns the loss.",
                            "docstring_sections": [
                                {
                                    "type": "markdown",
                                    "value": "Performs a single optimization step.\n\nArgs:\n    closure (callable, optional): A closure that reevaluates the model\n        and returns the loss."
                                }
                            ],
                            "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py",
                            "functions": [],
                            "has_contents": true,
                            "methods": [],
                            "modules": [],
                            "name": "step",
                            "parent_path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.optimizer_class",
                            "path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.optimizer_class.step",
                            "properties": [],
                            "relative_file_path": "ludwig/modules/optimization_modules.py",
                            "signature": {
                                "parameters": [
                                    {
                                        "kind": "POSITIONAL_OR_KEYWORD",
                                        "name": "self"
                                    },
                                    {
                                        "default": "None",
                                        "kind": "POSITIONAL_OR_KEYWORD",
                                        "name": "closure"
                                    }
                                ]
                            },
                            "source": {
                                "code": "    @torch.no_grad()\n    def step(self, closure=None):\n        \"\"\"Performs a single optimization step.\n\n        Args:\n            closure (callable, optional): A closure that reevaluates the model\n                and returns the loss.\n        \"\"\"\n        loss = None\n        if closure is not None:\n            with torch.enable_grad():\n                loss = closure()\n\n        for group in self.param_groups:\n            params_with_grad = []\n            grads = []\n            square_avgs = []\n            grad_avgs = []\n            momentum_buffer_list = []\n\n            for p in group['params']:\n                if p.grad is None:\n                    continue\n                params_with_grad.append(p)\n\n                if p.grad.is_sparse:\n                    raise RuntimeError('RMSprop does not support sparse gradients')\n                grads.append(p.grad)\n\n                state = self.state[p]\n\n                # State initialization\n                if len(state) == 0:\n                    state['step'] = 0\n                    state['square_avg'] = torch.zeros_like(p, memory_format=torch.preserve_format)\n                    if group['momentum'] > 0:\n                        state['momentum_buffer'] = torch.zeros_like(p, memory_format=torch.preserve_format)\n                    if group['centered']:\n                        state['grad_avg'] = torch.zeros_like(p, memory_format=torch.preserve_format)\n\n                square_avgs.append(state['square_avg'])\n\n                if group['momentum'] > 0:\n                    momentum_buffer_list.append(state['momentum_buffer'])\n                if group['centered']:\n                    grad_avgs.append(state['grad_avg'])\n\n                state['step'] += 1\n\n\n            F.rmsprop(params_with_grad,\n                      grads,\n                      square_avgs,\n                      grad_avgs,\n                      momentum_buffer_list,\n                      lr=group['lr'],\n                      alpha=group['alpha'],\n                      eps=group['eps'],\n                      weight_decay=group['weight_decay'],\n                      momentum=group['momentum'],\n                      centered=group['centered'])\n\n        return loss\n",
                                "line_start": 85
                            }
                        }
                    },
                    "classes": [],
                    "docstring": "Implements RMSprop algorithm.\n\n.. math::\n   \\begin{aligned}\n        &\\rule{110mm}{0.4pt}                                                                 \\\\\n        &\\textbf{input}      : \\alpha \\text{ (alpha)},\\: \\gamma \\text{ (lr)},\n            \\: \\theta_0 \\text{ (params)}, \\: f(\\theta) \\text{ (objective)}                   \\\\\n        &\\hspace{13mm}   \\lambda \\text{ (weight decay)},\\: \\mu \\text{ (momentum)},\\: centered\\\\\n        &\\textbf{initialize} : v_0 \\leftarrow 0 \\text{ (square average)}, \\:\n            \\textbf{b}_0 \\leftarrow 0 \\text{ (buffer)}, \\: g^{ave}_0 \\leftarrow 0     \\\\[-1.ex]\n        &\\rule{110mm}{0.4pt}                                                                 \\\\\n        &\\textbf{for} \\: t=1 \\: \\textbf{to} \\: \\ldots \\: \\textbf{do}                         \\\\\n        &\\hspace{5mm}g_t           \\leftarrow   \\nabla_{\\theta} f_t (\\theta_{t-1})           \\\\\n        &\\hspace{5mm}if \\: \\lambda \\neq 0                                                    \\\\\n        &\\hspace{10mm} g_t \\leftarrow g_t + \\lambda  \\theta_{t-1}                            \\\\\n        &\\hspace{5mm}v_t           \\leftarrow   \\alpha v_{t-1} + (1 - \\alpha) g^2_t\n            \\hspace{8mm}                                                                     \\\\\n        &\\hspace{5mm} \\tilde{v_t} \\leftarrow v_t                                             \\\\\n        &\\hspace{5mm}if \\: centered                                                          \\\\\n        &\\hspace{10mm} g^{ave}_t \\leftarrow g^{ave}_{t-1} \\alpha + (1-\\alpha) g_t            \\\\\n        &\\hspace{10mm} \\tilde{v_t} \\leftarrow \\tilde{v_t} -  \\big(g^{ave}_{t} \\big)^2        \\\\\n        &\\hspace{5mm}if \\: \\mu > 0                                                           \\\\\n        &\\hspace{10mm} \\textbf{b}_t\\leftarrow \\mu \\textbf{b}_{t-1} +\n            g_t/ \\big(\\sqrt{\\tilde{v_t}} +  \\epsilon \\big)                                   \\\\\n        &\\hspace{10mm} \\theta_t \\leftarrow \\theta_{t-1} - \\gamma \\textbf{b}_t                \\\\\n        &\\hspace{5mm} else                                                                   \\\\\n        &\\hspace{10mm}\\theta_t      \\leftarrow   \\theta_{t-1} -\n            \\gamma  g_t/ \\big(\\sqrt{\\tilde{v_t}} + \\epsilon \\big)  \\hspace{3mm}              \\\\\n        &\\rule{110mm}{0.4pt}                                                          \\\\[-1.ex]\n        &\\bf{return} \\:  \\theta_t                                                     \\\\[-1.ex]\n        &\\rule{110mm}{0.4pt}                                                          \\\\[-1.ex]\n   \\end{aligned}\n\nFor further details regarding the algorithm we refer to\n`lecture notes <https://www.cs.toronto.edu/~tijmen/csc321/slides/lecture_slides_lec6.pdf>`_ by G. Hinton.\nand centered version `Generating Sequences\nWith Recurrent Neural Networks <https://arxiv.org/pdf/1308.0850v5.pdf>`_.\nThe implementation here takes the square root of the gradient average before\nadding epsilon (note that TensorFlow interchanges these two operations). The effective\nlearning rate is thus :math:`\\gamma/(\\sqrt{v} + \\epsilon)` where :math:`\\gamma`\nis the scheduled learning rate and :math:`v` is the weighted moving average\nof the squared gradient.\n\nArgs:\n    params (iterable): iterable of parameters to optimize or dicts defining\n        parameter groups\n    lr (float, optional): learning rate (default: 1e-2)\n    momentum (float, optional): momentum factor (default: 0)\n    alpha (float, optional): smoothing constant (default: 0.99)\n    eps (float, optional): term added to the denominator to improve\n        numerical stability (default: 1e-8)\n    centered (bool, optional) : if ``True``, compute the centered RMSProp,\n        the gradient is normalized by an estimation of its variance\n    weight_decay (float, optional): weight decay (L2 penalty) (default: 0)",
                    "docstring_sections": [
                        {
                            "type": "markdown",
                            "value": "Implements RMSprop algorithm.\n\n.. math::\n   \\begin{aligned}\n        &\\rule{110mm}{0.4pt}                                                                 \\\\\n        &\\textbf{input}      : \\alpha \\text{ (alpha)},\\: \\gamma \\text{ (lr)},\n            \\: \\theta_0 \\text{ (params)}, \\: f(\\theta) \\text{ (objective)}                   \\\\\n        &\\hspace{13mm}   \\lambda \\text{ (weight decay)},\\: \\mu \\text{ (momentum)},\\: centered\\\\\n        &\\textbf{initialize} : v_0 \\leftarrow 0 \\text{ (square average)}, \\:\n            \\textbf{b}_0 \\leftarrow 0 \\text{ (buffer)}, \\: g^{ave}_0 \\leftarrow 0     \\\\[-1.ex]\n        &\\rule{110mm}{0.4pt}                                                                 \\\\\n        &\\textbf{for} \\: t=1 \\: \\textbf{to} \\: \\ldots \\: \\textbf{do}                         \\\\\n        &\\hspace{5mm}g_t           \\leftarrow   \\nabla_{\\theta} f_t (\\theta_{t-1})           \\\\\n        &\\hspace{5mm}if \\: \\lambda \\neq 0                                                    \\\\\n        &\\hspace{10mm} g_t \\leftarrow g_t + \\lambda  \\theta_{t-1}                            \\\\\n        &\\hspace{5mm}v_t           \\leftarrow   \\alpha v_{t-1} + (1 - \\alpha) g^2_t\n            \\hspace{8mm}                                                                     \\\\\n        &\\hspace{5mm} \\tilde{v_t} \\leftarrow v_t                                             \\\\\n        &\\hspace{5mm}if \\: centered                                                          \\\\\n        &\\hspace{10mm} g^{ave}_t \\leftarrow g^{ave}_{t-1} \\alpha + (1-\\alpha) g_t            \\\\\n        &\\hspace{10mm} \\tilde{v_t} \\leftarrow \\tilde{v_t} -  \\big(g^{ave}_{t} \\big)^2        \\\\\n        &\\hspace{5mm}if \\: \\mu > 0                                                           \\\\\n        &\\hspace{10mm} \\textbf{b}_t\\leftarrow \\mu \\textbf{b}_{t-1} +\n            g_t/ \\big(\\sqrt{\\tilde{v_t}} +  \\epsilon \\big)                                   \\\\\n        &\\hspace{10mm} \\theta_t \\leftarrow \\theta_{t-1} - \\gamma \\textbf{b}_t                \\\\\n        &\\hspace{5mm} else                                                                   \\\\\n        &\\hspace{10mm}\\theta_t      \\leftarrow   \\theta_{t-1} -\n            \\gamma  g_t/ \\big(\\sqrt{\\tilde{v_t}} + \\epsilon \\big)  \\hspace{3mm}              \\\\\n        &\\rule{110mm}{0.4pt}                                                          \\\\[-1.ex]\n        &\\bf{return} \\:  \\theta_t                                                     \\\\[-1.ex]\n        &\\rule{110mm}{0.4pt}                                                          \\\\[-1.ex]\n   \\end{aligned}\n\nFor further details regarding the algorithm we refer to\n`lecture notes <https://www.cs.toronto.edu/~tijmen/csc321/slides/lecture_slides_lec6.pdf>`_ by G. Hinton.\nand centered version `Generating Sequences\nWith Recurrent Neural Networks <https://arxiv.org/pdf/1308.0850v5.pdf>`_.\nThe implementation here takes the square root of the gradient average before\nadding epsilon (note that TensorFlow interchanges these two operations). The effective\nlearning rate is thus :math:`\\gamma/(\\sqrt{v} + \\epsilon)` where :math:`\\gamma`\nis the scheduled learning rate and :math:`v` is the weighted moving average\nof the squared gradient.\n\nArgs:\n    params (iterable): iterable of parameters to optimize or dicts defining\n        parameter groups\n    lr (float, optional): learning rate (default: 1e-2)\n    momentum (float, optional): momentum factor (default: 0)\n    alpha (float, optional): smoothing constant (default: 0.99)\n    eps (float, optional): term added to the denominator to improve\n        numerical stability (default: 1e-8)\n    centered (bool, optional) : if ``True``, compute the centered RMSProp,\n        the gradient is normalized by an estimation of its variance\n    weight_decay (float, optional): weight decay (L2 penalty) (default: 0)"
                        }
                    ],
                    "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py",
                    "functions": [],
                    "has_contents": true,
                    "methods": [
                        "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.optimizer_class.__init__",
                        "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.optimizer_class.__setstate__",
                        "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.optimizer_class.step"
                    ],
                    "modules": [],
                    "name": "optimizer_class",
                    "parent_path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig",
                    "path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.optimizer_class",
                    "properties": [],
                    "relative_file_path": "ludwig/modules/optimization_modules.py",
                    "source": {
                        "code": "class RMSprop(Optimizer):\n    r\"\"\"Implements RMSprop algorithm.\n\n    .. math::\n       \\begin{aligned}\n            &\\rule{110mm}{0.4pt}                                                                 \\\\\n            &\\textbf{input}      : \\alpha \\text{ (alpha)},\\: \\gamma \\text{ (lr)},\n                \\: \\theta_0 \\text{ (params)}, \\: f(\\theta) \\text{ (objective)}                   \\\\\n            &\\hspace{13mm}   \\lambda \\text{ (weight decay)},\\: \\mu \\text{ (momentum)},\\: centered\\\\\n            &\\textbf{initialize} : v_0 \\leftarrow 0 \\text{ (square average)}, \\:\n                \\textbf{b}_0 \\leftarrow 0 \\text{ (buffer)}, \\: g^{ave}_0 \\leftarrow 0     \\\\[-1.ex]\n            &\\rule{110mm}{0.4pt}                                                                 \\\\\n            &\\textbf{for} \\: t=1 \\: \\textbf{to} \\: \\ldots \\: \\textbf{do}                         \\\\\n            &\\hspace{5mm}g_t           \\leftarrow   \\nabla_{\\theta} f_t (\\theta_{t-1})           \\\\\n            &\\hspace{5mm}if \\: \\lambda \\neq 0                                                    \\\\\n            &\\hspace{10mm} g_t \\leftarrow g_t + \\lambda  \\theta_{t-1}                            \\\\\n            &\\hspace{5mm}v_t           \\leftarrow   \\alpha v_{t-1} + (1 - \\alpha) g^2_t\n                \\hspace{8mm}                                                                     \\\\\n            &\\hspace{5mm} \\tilde{v_t} \\leftarrow v_t                                             \\\\\n            &\\hspace{5mm}if \\: centered                                                          \\\\\n            &\\hspace{10mm} g^{ave}_t \\leftarrow g^{ave}_{t-1} \\alpha + (1-\\alpha) g_t            \\\\\n            &\\hspace{10mm} \\tilde{v_t} \\leftarrow \\tilde{v_t} -  \\big(g^{ave}_{t} \\big)^2        \\\\\n            &\\hspace{5mm}if \\: \\mu > 0                                                           \\\\\n            &\\hspace{10mm} \\textbf{b}_t\\leftarrow \\mu \\textbf{b}_{t-1} +\n                g_t/ \\big(\\sqrt{\\tilde{v_t}} +  \\epsilon \\big)                                   \\\\\n            &\\hspace{10mm} \\theta_t \\leftarrow \\theta_{t-1} - \\gamma \\textbf{b}_t                \\\\\n            &\\hspace{5mm} else                                                                   \\\\\n            &\\hspace{10mm}\\theta_t      \\leftarrow   \\theta_{t-1} -\n                \\gamma  g_t/ \\big(\\sqrt{\\tilde{v_t}} + \\epsilon \\big)  \\hspace{3mm}              \\\\\n            &\\rule{110mm}{0.4pt}                                                          \\\\[-1.ex]\n            &\\bf{return} \\:  \\theta_t                                                     \\\\[-1.ex]\n            &\\rule{110mm}{0.4pt}                                                          \\\\[-1.ex]\n       \\end{aligned}\n\n    For further details regarding the algorithm we refer to\n    `lecture notes <https://www.cs.toronto.edu/~tijmen/csc321/slides/lecture_slides_lec6.pdf>`_ by G. Hinton.\n    and centered version `Generating Sequences\n    With Recurrent Neural Networks <https://arxiv.org/pdf/1308.0850v5.pdf>`_.\n    The implementation here takes the square root of the gradient average before\n    adding epsilon (note that TensorFlow interchanges these two operations). The effective\n    learning rate is thus :math:`\\gamma/(\\sqrt{v} + \\epsilon)` where :math:`\\gamma`\n    is the scheduled learning rate and :math:`v` is the weighted moving average\n    of the squared gradient.\n\n    Args:\n        params (iterable): iterable of parameters to optimize or dicts defining\n            parameter groups\n        lr (float, optional): learning rate (default: 1e-2)\n        momentum (float, optional): momentum factor (default: 0)\n        alpha (float, optional): smoothing constant (default: 0.99)\n        eps (float, optional): term added to the denominator to improve\n            numerical stability (default: 1e-8)\n        centered (bool, optional) : if ``True``, compute the centered RMSProp,\n            the gradient is normalized by an estimation of its variance\n        weight_decay (float, optional): weight decay (L2 penalty) (default: 0)\n\n    \"\"\"\n\n    def __init__(self, params, lr=1e-2, alpha=0.99, eps=1e-8, weight_decay=0, momentum=0, centered=False):\n        if not 0.0 <= lr:\n            raise ValueError(\"Invalid learning rate: {}\".format(lr))\n        if not 0.0 <= eps:\n            raise ValueError(\"Invalid epsilon value: {}\".format(eps))\n        if not 0.0 <= momentum:\n            raise ValueError(\"Invalid momentum value: {}\".format(momentum))\n        if not 0.0 <= weight_decay:\n            raise ValueError(\"Invalid weight_decay value: {}\".format(weight_decay))\n        if not 0.0 <= alpha:\n            raise ValueError(\"Invalid alpha value: {}\".format(alpha))\n\n        defaults = dict(lr=lr, momentum=momentum, alpha=alpha, eps=eps, centered=centered, weight_decay=weight_decay)\n        super(RMSprop, self).__init__(params, defaults)\n\n    def __setstate__(self, state):\n        super(RMSprop, self).__setstate__(state)\n        for group in self.param_groups:\n            group.setdefault('momentum', 0)\n            group.setdefault('centered', False)\n\n    @torch.no_grad()\n    def step(self, closure=None):\n        \"\"\"Performs a single optimization step.\n\n        Args:\n            closure (callable, optional): A closure that reevaluates the model\n                and returns the loss.\n        \"\"\"\n        loss = None\n        if closure is not None:\n            with torch.enable_grad():\n                loss = closure()\n\n        for group in self.param_groups:\n            params_with_grad = []\n            grads = []\n            square_avgs = []\n            grad_avgs = []\n            momentum_buffer_list = []\n\n            for p in group['params']:\n                if p.grad is None:\n                    continue\n                params_with_grad.append(p)\n\n                if p.grad.is_sparse:\n                    raise RuntimeError('RMSprop does not support sparse gradients')\n                grads.append(p.grad)\n\n                state = self.state[p]\n\n                # State initialization\n                if len(state) == 0:\n                    state['step'] = 0\n                    state['square_avg'] = torch.zeros_like(p, memory_format=torch.preserve_format)\n                    if group['momentum'] > 0:\n                        state['momentum_buffer'] = torch.zeros_like(p, memory_format=torch.preserve_format)\n                    if group['centered']:\n                        state['grad_avg'] = torch.zeros_like(p, memory_format=torch.preserve_format)\n\n                square_avgs.append(state['square_avg'])\n\n                if group['momentum'] > 0:\n                    momentum_buffer_list.append(state['momentum_buffer'])\n                if group['centered']:\n                    grad_avgs.append(state['grad_avg'])\n\n                state['step'] += 1\n\n\n            F.rmsprop(params_with_grad,\n                      grads,\n                      square_avgs,\n                      grad_avgs,\n                      momentum_buffer_list,\n                      lr=group['lr'],\n                      alpha=group['alpha'],\n                      eps=group['eps'],\n                      weight_decay=group['weight_decay'],\n                      momentum=group['momentum'],\n                      centered=group['centered'])\n\n        return loss\n",
                        "line_start": 6
                    }
                },
                "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.type": {
                    "attributes": [],
                    "category": "attribute",
                    "children": {},
                    "classes": [],
                    "docstring": "Must be 'rmsprop' - corresponds to name in `ludwig.modules.optimization_modules.optimizer_registry`\n(default: 'rmsprop')",
                    "docstring_sections": [
                        {
                            "type": "markdown",
                            "value": "Must be 'rmsprop' - corresponds to name in `ludwig.modules.optimization_modules.optimizer_registry`\n(default: 'rmsprop')"
                        }
                    ],
                    "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py",
                    "functions": [],
                    "has_contents": true,
                    "methods": [],
                    "modules": [],
                    "name": "type",
                    "parent_path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig",
                    "path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.type",
                    "properties": [],
                    "relative_file_path": "ludwig/modules/optimization_modules.py",
                    "source": {},
                    "type": "str"
                },
                "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.weight_decay": {
                    "attributes": [],
                    "category": "attribute",
                    "children": {},
                    "classes": [],
                    "docstring": null,
                    "docstring_sections": [],
                    "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py",
                    "functions": [],
                    "has_contents": false,
                    "methods": [],
                    "modules": [],
                    "name": "weight_decay",
                    "parent_path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig",
                    "path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.weight_decay",
                    "properties": [
                        "dataclass-field"
                    ],
                    "relative_file_path": "ludwig/modules/optimization_modules.py",
                    "source": {},
                    "type": "float"
                }
            },
            "classes": [
                "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema",
                "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.optimizer_class"
            ],
            "docstring": "Parameters for rmsprop optimization.",
            "docstring_sections": [
                {
                    "type": "markdown",
                    "value": "Parameters for rmsprop optimization."
                }
            ],
            "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py",
            "functions": [],
            "has_contents": true,
            "methods": [
                "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.__eq__",
                "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.__init__",
                "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.__repr__"
            ],
            "modules": [],
            "name": "RMSPropOptimizerConfig",
            "parent_path": "ludwig.modules.optimization_modules",
            "path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig",
            "properties": [
                "dataclass"
            ],
            "relative_file_path": "ludwig/modules/optimization_modules.py",
            "source": {
                "code": "class RMSPropOptimizerConfig(BaseOptimizerConfig):\n    \"\"\"Parameters for rmsprop optimization.\"\"\"\n\n    optimizer_class: ClassVar[torch.optim.Optimizer] = torch.optim.RMSprop\n    \"\"\"Points to `torch.optim.RMSprop`.\"\"\"\n\n    type: str = StringOptions([\"rmsprop\"], default=\"rmsprop\", nullable=False)\n    \"\"\"Must be 'rmsprop' - corresponds to name in `ludwig.modules.optimization_modules.optimizer_registry`\n       (default: 'rmsprop')\"\"\"\n\n    # Defaults taken from https://pytorch.org/docs/stable/generated/torch.optim.RMSprop.html#torch.optim.RMSprop:\n    lr: float = FloatRange(default=1e-2, min=0.0, max=1.0)\n    momentum: float = NonNegativeFloat(default=0.0)\n    alpha: float = NonNegativeFloat(default=0.99)\n    eps: float = NonNegativeFloat(default=1e-08)\n    centered: bool = False\n    weight_decay: float = NonNegativeFloat(default=0.0)\n",
                "line_start": 211
            }
        }
    ],
    "parsing_errors": {}
}
