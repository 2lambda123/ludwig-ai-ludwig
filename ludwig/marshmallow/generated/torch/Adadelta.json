{"loading_errors": [], "parsing_errors": {}, "objects": [{"name": "Adadelta", "path": "torch.optim.adadelta.Adadelta", "category": "class", "file_path": "/home/ksbrar/.venvwrapper_virtualenvs/ludwig_install-editable-deps-test_training-schema-torch/lib/python3.8/site-packages/torch/optim/adadelta.py", "relative_file_path": "torch/optim/adadelta.py", "properties": [], "parent_path": "torch.optim.adadelta", "has_contents": true, "docstring": "Implements Adadelta algorithm.\n\n.. math::\n   \\begin{aligned}\n        &\\rule{110mm}{0.4pt}                                                                 \\\\\n        &\\textbf{input}      : \\gamma \\text{ (lr)}, \\: \\theta_0 \\text{ (params)},\n            \\: f(\\theta) \\text{ (objective)}, \\: \\rho \\text{ (decay)},\n            \\: \\lambda \\text{ (weight decay)}                                                \\\\\n        &\\textbf{initialize} :  v_0  \\leftarrow 0 \\: \\text{ (square avg)},\n            \\: u_0 \\leftarrow 0 \\: \\text{ (accumulate variables)}                     \\\\[-1.ex]\n        &\\rule{110mm}{0.4pt}                                                                 \\\\\n        &\\textbf{for} \\: t=1 \\: \\textbf{to} \\: \\ldots \\: \\textbf{do}                         \\\\\n        &\\hspace{5mm}g_t           \\leftarrow   \\nabla_{\\theta} f_t (\\theta_{t-1})           \\\\\n        &\\hspace{5mm}if \\: \\lambda \\neq 0                                                    \\\\\n        &\\hspace{10mm} g_t \\leftarrow g_t + \\lambda  \\theta_{t-1}                            \\\\\n        &\\hspace{5mm} v_t      \\leftarrow v_{t-1} \\rho + g^2_t (1 - \\rho)                    \\\\\n        &\\hspace{5mm}\\Delta x_t    \\leftarrow   \\frac{\\sqrt{u_{t-1} +\n            \\epsilon }}{ \\sqrt{v_t + \\epsilon}  }g_t \\hspace{21mm}                           \\\\\n        &\\hspace{5mm} u_t  \\leftarrow   u_{t-1}  \\rho +\n             \\Delta x^2_t  (1 - \\rho)                                                        \\\\\n        &\\hspace{5mm}\\theta_t      \\leftarrow   \\theta_{t-1} - \\gamma  \\Delta x_t            \\\\\n        &\\rule{110mm}{0.4pt}                                                          \\\\[-1.ex]\n        &\\bf{return} \\:  \\theta_t                                                     \\\\[-1.ex]\n        &\\rule{110mm}{0.4pt}                                                          \\\\[-1.ex]\n   \\end{aligned}\n\nFor further details regarding the algorithm we refer to `ADADELTA: An Adaptive Learning Rate Method`_.\n\nArgs:\n    params (iterable): iterable of parameters to optimize or dicts defining\n        parameter groups\n    rho (float, optional): coefficient used for computing a running average\n        of squared gradients (default: 0.9)\n    eps (float, optional): term added to the denominator to improve\n        numerical stability (default: 1e-6)\n    lr (float, optional): coefficient that scale delta before it is applied\n        to the parameters (default: 1.0)\n    weight_decay (float, optional): weight decay (L2 penalty) (default: 0)\n\n.. _ADADELTA\\: An Adaptive Learning Rate Method:\n    https://arxiv.org/abs/1212.5701", "docstring_sections": [{"type": "markdown", "value": "Implements Adadelta algorithm.\n\n.. math::\n   \\begin{aligned}\n        &\\rule{110mm}{0.4pt}                                                                 \\\\\n        &\\textbf{input}      : \\gamma \\text{ (lr)}, \\: \\theta_0 \\text{ (params)},\n            \\: f(\\theta) \\text{ (objective)}, \\: \\rho \\text{ (decay)},\n            \\: \\lambda \\text{ (weight decay)}                                                \\\\\n        &\\textbf{initialize} :  v_0  \\leftarrow 0 \\: \\text{ (square avg)},\n            \\: u_0 \\leftarrow 0 \\: \\text{ (accumulate variables)}                     \\\\[-1.ex]\n        &\\rule{110mm}{0.4pt}                                                                 \\\\\n        &\\textbf{for} \\: t=1 \\: \\textbf{to} \\: \\ldots \\: \\textbf{do}                         \\\\\n        &\\hspace{5mm}g_t           \\leftarrow   \\nabla_{\\theta} f_t (\\theta_{t-1})           \\\\\n        &\\hspace{5mm}if \\: \\lambda \\neq 0                                                    \\\\\n        &\\hspace{10mm} g_t \\leftarrow g_t + \\lambda  \\theta_{t-1}                            \\\\\n        &\\hspace{5mm} v_t      \\leftarrow v_{t-1} \\rho + g^2_t (1 - \\rho)                    \\\\\n        &\\hspace{5mm}\\Delta x_t    \\leftarrow   \\frac{\\sqrt{u_{t-1} +\n            \\epsilon }}{ \\sqrt{v_t + \\epsilon}  }g_t \\hspace{21mm}                           \\\\\n        &\\hspace{5mm} u_t  \\leftarrow   u_{t-1}  \\rho +\n             \\Delta x^2_t  (1 - \\rho)                                                        \\\\\n        &\\hspace{5mm}\\theta_t      \\leftarrow   \\theta_{t-1} - \\gamma  \\Delta x_t            \\\\\n        &\\rule{110mm}{0.4pt}                                                          \\\\[-1.ex]\n        &\\bf{return} \\:  \\theta_t                                                     \\\\[-1.ex]\n        &\\rule{110mm}{0.4pt}                                                          \\\\[-1.ex]\n   \\end{aligned}\n\nFor further details regarding the algorithm we refer to `ADADELTA: An Adaptive Learning Rate Method`_.\n"}, {"type": "parameters", "value": [{"description": "iterable of parameters to optimize or dicts defining\nparameter groups", "annotation": "iterable", "name": "params", "kind": "POSITIONAL_OR_KEYWORD", "default": "", "is_optional": false, "is_required": true, "is_args": false, "is_kwargs": false}, {"description": "coefficient used for computing a running average\nof squared gradients (default: 0.9)", "annotation": "float", "name": "rho", "kind": "POSITIONAL_OR_KEYWORD", "default": "0.9", "is_optional": true, "is_required": false, "is_args": false, "is_kwargs": false}, {"description": "term added to the denominator to improve\nnumerical stability (default: 1e-6)", "annotation": "float", "name": "eps", "kind": "POSITIONAL_OR_KEYWORD", "default": "1e-06", "is_optional": true, "is_required": false, "is_args": false, "is_kwargs": false}, {"description": "coefficient that scale delta before it is applied\nto the parameters (default: 1.0)", "annotation": "float", "name": "lr", "kind": "POSITIONAL_OR_KEYWORD", "default": "1.0", "is_optional": true, "is_required": false, "is_args": false, "is_kwargs": false}, {"description": "weight decay (L2 penalty) (default: 0)", "annotation": "float", "name": "weight_decay", "kind": "POSITIONAL_OR_KEYWORD", "default": "0", "is_optional": true, "is_required": false, "is_args": false, "is_kwargs": false}]}, {"type": "markdown", "value": ".. _ADADELTA\\: An Adaptive Learning Rate Method:\n    https://arxiv.org/abs/1212.5701"}], "source": {"code": "class Adadelta(Optimizer):\n    r\"\"\"Implements Adadelta algorithm.\n\n    .. math::\n       \\begin{aligned}\n            &\\rule{110mm}{0.4pt}                                                                 \\\\\n            &\\textbf{input}      : \\gamma \\text{ (lr)}, \\: \\theta_0 \\text{ (params)},\n                \\: f(\\theta) \\text{ (objective)}, \\: \\rho \\text{ (decay)},\n                \\: \\lambda \\text{ (weight decay)}                                                \\\\\n            &\\textbf{initialize} :  v_0  \\leftarrow 0 \\: \\text{ (square avg)},\n                \\: u_0 \\leftarrow 0 \\: \\text{ (accumulate variables)}                     \\\\[-1.ex]\n            &\\rule{110mm}{0.4pt}                                                                 \\\\\n            &\\textbf{for} \\: t=1 \\: \\textbf{to} \\: \\ldots \\: \\textbf{do}                         \\\\\n            &\\hspace{5mm}g_t           \\leftarrow   \\nabla_{\\theta} f_t (\\theta_{t-1})           \\\\\n            &\\hspace{5mm}if \\: \\lambda \\neq 0                                                    \\\\\n            &\\hspace{10mm} g_t \\leftarrow g_t + \\lambda  \\theta_{t-1}                            \\\\\n            &\\hspace{5mm} v_t      \\leftarrow v_{t-1} \\rho + g^2_t (1 - \\rho)                    \\\\\n            &\\hspace{5mm}\\Delta x_t    \\leftarrow   \\frac{\\sqrt{u_{t-1} +\n                \\epsilon }}{ \\sqrt{v_t + \\epsilon}  }g_t \\hspace{21mm}                           \\\\\n            &\\hspace{5mm} u_t  \\leftarrow   u_{t-1}  \\rho +\n                 \\Delta x^2_t  (1 - \\rho)                                                        \\\\\n            &\\hspace{5mm}\\theta_t      \\leftarrow   \\theta_{t-1} - \\gamma  \\Delta x_t            \\\\\n            &\\rule{110mm}{0.4pt}                                                          \\\\[-1.ex]\n            &\\bf{return} \\:  \\theta_t                                                     \\\\[-1.ex]\n            &\\rule{110mm}{0.4pt}                                                          \\\\[-1.ex]\n       \\end{aligned}\n\n    For further details regarding the algorithm we refer to `ADADELTA: An Adaptive Learning Rate Method`_.\n\n    Args:\n        params (iterable): iterable of parameters to optimize or dicts defining\n            parameter groups\n        rho (float, optional): coefficient used for computing a running average\n            of squared gradients (default: 0.9)\n        eps (float, optional): term added to the denominator to improve\n            numerical stability (default: 1e-6)\n        lr (float, optional): coefficient that scale delta before it is applied\n            to the parameters (default: 1.0)\n        weight_decay (float, optional): weight decay (L2 penalty) (default: 0)\n\n    .. _ADADELTA\\: An Adaptive Learning Rate Method:\n        https://arxiv.org/abs/1212.5701\n    \"\"\"\n\n    def __init__(self, params, lr=1.0, rho=0.9, eps=1e-6, weight_decay=0):\n        if not 0.0 <= lr:\n            raise ValueError(\"Invalid learning rate: {}\".format(lr))\n        if not 0.0 <= rho <= 1.0:\n            raise ValueError(\"Invalid rho value: {}\".format(rho))\n        if not 0.0 <= eps:\n            raise ValueError(\"Invalid epsilon value: {}\".format(eps))\n        if not 0.0 <= weight_decay:\n            raise ValueError(\"Invalid weight_decay value: {}\".format(weight_decay))\n\n        defaults = dict(lr=lr, rho=rho, eps=eps, weight_decay=weight_decay)\n        super(Adadelta, self).__init__(params, defaults)\n\n    @torch.no_grad()\n    def step(self, closure=None):\n        \"\"\"Performs a single optimization step.\n\n        Args:\n            closure (callable, optional): A closure that reevaluates the model\n                and returns the loss.\n        \"\"\"\n        loss = None\n        if closure is not None:\n            with torch.enable_grad():\n                loss = closure()\n\n        for group in self.param_groups:\n            params_with_grad = []\n            grads = []\n            square_avgs = []\n            acc_deltas = []\n            lr, rho, eps, weight_decay = group['lr'], group['rho'], group['eps'], group['weight_decay']\n\n            for p in group['params']:\n                if p.grad is None:\n                    continue\n                params_with_grad.append(p)\n                if p.grad.is_sparse:\n                    raise RuntimeError('Adadelta does not support sparse gradients')\n                grads.append(p.grad)\n\n                state = self.state[p]\n\n                # Lazy state initialization\n                if len(state) == 0:\n                    state['step'] = 0\n                    state['square_avg'] = torch.zeros_like(p, memory_format=torch.preserve_format)\n                    state['acc_delta'] = torch.zeros_like(p, memory_format=torch.preserve_format)\n\n                square_avgs.append(state['square_avg'])\n                acc_deltas.append(state['acc_delta'])\n\n                state['step'] += 1\n\n            F.adadelta(params_with_grad,\n                       grads,\n                       square_avgs,\n                       acc_deltas,\n                       lr=lr,\n                       rho=rho,\n                       eps=eps,\n                       weight_decay=weight_decay)\n\n        return loss\n", "line_start": 7}, "children": {"torch.optim.adadelta.Adadelta.__init__": {"name": "__init__", "path": "torch.optim.adadelta.Adadelta.__init__", "category": "method", "file_path": "/home/ksbrar/.venvwrapper_virtualenvs/ludwig_install-editable-deps-test_training-schema-torch/lib/python3.8/site-packages/torch/optim/adadelta.py", "relative_file_path": "torch/optim/adadelta.py", "properties": ["special"], "parent_path": "torch.optim.adadelta.Adadelta", "has_contents": false, "docstring": "", "docstring_sections": [], "source": {"code": "    def __init__(self, params, lr=1.0, rho=0.9, eps=1e-6, weight_decay=0):\n        if not 0.0 <= lr:\n            raise ValueError(\"Invalid learning rate: {}\".format(lr))\n        if not 0.0 <= rho <= 1.0:\n            raise ValueError(\"Invalid rho value: {}\".format(rho))\n        if not 0.0 <= eps:\n            raise ValueError(\"Invalid epsilon value: {}\".format(eps))\n        if not 0.0 <= weight_decay:\n            raise ValueError(\"Invalid weight_decay value: {}\".format(weight_decay))\n\n        defaults = dict(lr=lr, rho=rho, eps=eps, weight_decay=weight_decay)\n        super(Adadelta, self).__init__(params, defaults)\n", "line_start": 51}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "signature": {"parameters": [{"kind": "POSITIONAL_OR_KEYWORD", "name": "self"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "params"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "lr", "default": "1.0"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "rho", "default": "0.9"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "eps", "default": "1e-06"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "weight_decay", "default": "0"}]}}, "torch.optim.adadelta.Adadelta.step": {"name": "step", "path": "torch.optim.adadelta.Adadelta.step", "category": "method", "file_path": "/home/ksbrar/.venvwrapper_virtualenvs/ludwig_install-editable-deps-test_training-schema-torch/lib/python3.8/site-packages/torch/optim/adadelta.py", "relative_file_path": "torch/optim/adadelta.py", "properties": [], "parent_path": "torch.optim.adadelta.Adadelta", "has_contents": true, "docstring": "Performs a single optimization step.\n\nArgs:\n    closure (callable, optional): A closure that reevaluates the model\n        and returns the loss.", "docstring_sections": [{"type": "markdown", "value": "Performs a single optimization step.\n"}, {"type": "parameters", "value": [{"description": "A closure that reevaluates the model\nand returns the loss.", "annotation": "callable", "name": "closure", "kind": "POSITIONAL_OR_KEYWORD", "default": "None", "is_optional": true, "is_required": false, "is_args": false, "is_kwargs": false}]}], "source": {"code": "    @torch.no_grad()\n    def step(self, closure=None):\n        \"\"\"Performs a single optimization step.\n\n        Args:\n            closure (callable, optional): A closure that reevaluates the model\n                and returns the loss.\n        \"\"\"\n        loss = None\n        if closure is not None:\n            with torch.enable_grad():\n                loss = closure()\n\n        for group in self.param_groups:\n            params_with_grad = []\n            grads = []\n            square_avgs = []\n            acc_deltas = []\n            lr, rho, eps, weight_decay = group['lr'], group['rho'], group['eps'], group['weight_decay']\n\n            for p in group['params']:\n                if p.grad is None:\n                    continue\n                params_with_grad.append(p)\n                if p.grad.is_sparse:\n                    raise RuntimeError('Adadelta does not support sparse gradients')\n                grads.append(p.grad)\n\n                state = self.state[p]\n\n                # Lazy state initialization\n                if len(state) == 0:\n                    state['step'] = 0\n                    state['square_avg'] = torch.zeros_like(p, memory_format=torch.preserve_format)\n                    state['acc_delta'] = torch.zeros_like(p, memory_format=torch.preserve_format)\n\n                square_avgs.append(state['square_avg'])\n                acc_deltas.append(state['acc_delta'])\n\n                state['step'] += 1\n\n            F.adadelta(params_with_grad,\n                       grads,\n                       square_avgs,\n                       acc_deltas,\n                       lr=lr,\n                       rho=rho,\n                       eps=eps,\n                       weight_decay=weight_decay)\n\n        return loss\n", "line_start": 64}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "signature": {"parameters": [{"kind": "POSITIONAL_OR_KEYWORD", "name": "self"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "closure", "default": "None"}]}}}, "attributes": [], "methods": ["torch.optim.adadelta.Adadelta.__init__", "torch.optim.adadelta.Adadelta.step"], "functions": [], "modules": [], "classes": [], "bases": ["torch.optim.optimizer.Optimizer"]}]}
