{"SequenceCombinerConfig": {"loading_errors": [], "parsing_errors": {}, "objects": [{"name": "SequenceCombinerConfig", "path": "ludwig.combiners.combiners.SequenceCombinerConfig", "category": "class", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["dataclass"], "parent_path": "ludwig.combiners.combiners", "has_contents": true, "docstring": "Parameters for sequence combiner.", "docstring_sections": [{"type": "markdown", "value": "Parameters for sequence combiner."}], "source": {"code": "class SequenceCombinerConfig(BaseCombinerConfig):\n    \"\"\"Parameters for sequence combiner.\"\"\"\n\n    main_sequence_feature: Optional[str] = None\n    \"\"\"TODO: Document parameters. (default: None).\"\"\"\n\n    reduce_output: Optional[str] = schema.ReductionOptions()\n    \"\"\"TODO: Document parameters. (default: None).\"\"\"\n\n    encoder: Optional[str] = schema.StringOptions(list(sequence_encoder_registry.keys()))\n    \"\"\"TODO: Document parameters. (default: None).\"\"\"\n", "line_start": 376}, "children": {"ludwig.combiners.combiners.SequenceCombinerConfig.Schema": {"name": "Schema", "path": "ludwig.combiners.combiners.SequenceCombinerConfig.Schema", "category": "class", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["marshmallow-model"], "parent_path": "ludwig.combiners.combiners.SequenceCombinerConfig", "has_contents": true, "docstring": "", "docstring_sections": [], "source": {}, "children": {"ludwig.combiners.combiners.SequenceCombinerConfig.Schema.Meta": {"name": "Meta", "path": "ludwig.combiners.combiners.SequenceCombinerConfig.Schema.Meta", "category": "class", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": [], "parent_path": "ludwig.combiners.combiners.SequenceCombinerConfig.Schema", "has_contents": true, "docstring": "Sub-class specifying meta information for Marshmallow.\n\nCurrently only sets `unknown` flag to `EXCLUDE`. This is done to mirror Ludwig behavior: unknown properties are\nexcluded from `load` calls so that the marshmallow_dataclass package can be used but\n`get_custom_schema_from_marshmallow_class` will manually set a marshmallow schema's `additionalProperties` attr.\nto True so that JSON objects with extra properties do not raise errors; as a result properties are picked and\nfilled in as necessary.", "docstring_sections": [{"type": "markdown", "value": "Sub-class specifying meta information for Marshmallow.\n\nCurrently only sets `unknown` flag to `EXCLUDE`. This is done to mirror Ludwig behavior: unknown properties are\nexcluded from `load` calls so that the marshmallow_dataclass package can be used but\n`get_custom_schema_from_marshmallow_class` will manually set a marshmallow schema's `additionalProperties` attr.\nto True so that JSON objects with extra properties do not raise errors; as a result properties are picked and\nfilled in as necessary."}], "source": {"code": "    class Meta:\n        \"\"\"Sub-class specifying meta information for Marshmallow.\n\n        Currently only sets `unknown` flag to `EXCLUDE`. This is done to mirror Ludwig behavior: unknown properties are\n        excluded from `load` calls so that the marshmallow_dataclass package can be used but\n        `get_custom_schema_from_marshmallow_class` will manually set a marshmallow schema's `additionalProperties` attr.\n        to True so that JSON objects with extra properties do not raise errors; as a result properties are picked and\n        filled in as necessary.\n        \"\"\"\n\n        unknown = EXCLUDE\n        \"Flag that sets marshmallow `load` calls to ignore unknown properties passed as a parameter.\"\n", "line_start": 49}, "children": {"ludwig.combiners.combiners.SequenceCombinerConfig.Schema.Meta.unknown": {"name": "unknown", "path": "ludwig.combiners.combiners.SequenceCombinerConfig.Schema.Meta.unknown", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": [], "parent_path": "ludwig.combiners.combiners.SequenceCombinerConfig.Schema.Meta", "has_contents": true, "docstring": "Flag that sets marshmallow `load` calls to ignore unknown properties passed as a parameter.", "docstring_sections": [{"type": "markdown", "value": "Flag that sets marshmallow `load` calls to ignore unknown properties passed as a parameter."}], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": ""}}, "attributes": ["ludwig.combiners.combiners.SequenceCombinerConfig.Schema.Meta.unknown"], "methods": [], "functions": [], "modules": [], "classes": [], "bases": ["object"]}, "ludwig.combiners.combiners.SequenceCombinerConfig.Schema._declared_fields": {"name": "_declared_fields", "path": "ludwig.combiners.combiners.SequenceCombinerConfig.Schema._declared_fields", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["private"], "parent_path": "ludwig.combiners.combiners.SequenceCombinerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": ""}, "ludwig.combiners.combiners.SequenceCombinerConfig.Schema._hooks": {"name": "_hooks", "path": "ludwig.combiners.combiners.SequenceCombinerConfig.Schema._hooks", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["private"], "parent_path": "ludwig.combiners.combiners.SequenceCombinerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": ""}, "ludwig.combiners.combiners.SequenceCombinerConfig.Schema.opts": {"name": "opts", "path": "ludwig.combiners.combiners.SequenceCombinerConfig.Schema.opts", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": [], "parent_path": "ludwig.combiners.combiners.SequenceCombinerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": ""}, "ludwig.combiners.combiners.SequenceCombinerConfig.Schema.main_sequence_feature": {"name": "main_sequence_feature", "path": "ludwig.combiners.combiners.SequenceCombinerConfig.Schema.main_sequence_feature", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.combiners.combiners.SequenceCombinerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "String"}, "ludwig.combiners.combiners.SequenceCombinerConfig.Schema.reduce_output": {"name": "reduce_output", "path": "ludwig.combiners.combiners.SequenceCombinerConfig.Schema.reduce_output", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.combiners.combiners.SequenceCombinerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "String"}, "ludwig.combiners.combiners.SequenceCombinerConfig.Schema.encoder": {"name": "encoder", "path": "ludwig.combiners.combiners.SequenceCombinerConfig.Schema.encoder", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.combiners.combiners.SequenceCombinerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "String"}}, "attributes": ["ludwig.combiners.combiners.SequenceCombinerConfig.Schema._declared_fields", "ludwig.combiners.combiners.SequenceCombinerConfig.Schema._hooks", "ludwig.combiners.combiners.SequenceCombinerConfig.Schema.opts", "ludwig.combiners.combiners.SequenceCombinerConfig.Schema.main_sequence_feature", "ludwig.combiners.combiners.SequenceCombinerConfig.Schema.reduce_output", "ludwig.combiners.combiners.SequenceCombinerConfig.Schema.encoder"], "methods": [], "functions": [], "modules": [], "classes": ["ludwig.combiners.combiners.SequenceCombinerConfig.Schema.Meta"], "bases": ["marshmallow_dataclass._base_schema.<locals>.BaseSchema"]}, "ludwig.combiners.combiners.SequenceCombinerConfig.__eq__": {"name": "__eq__", "path": "ludwig.combiners.combiners.SequenceCombinerConfig.__eq__", "category": "method", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["special"], "parent_path": "ludwig.combiners.combiners.SequenceCombinerConfig", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "signature": {"parameters": [{"kind": "POSITIONAL_OR_KEYWORD", "name": "self"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "other"}]}}, "ludwig.combiners.combiners.SequenceCombinerConfig.__init__": {"name": "__init__", "path": "ludwig.combiners.combiners.SequenceCombinerConfig.__init__", "category": "method", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["special"], "parent_path": "ludwig.combiners.combiners.SequenceCombinerConfig", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "signature": {"parameters": [{"kind": "POSITIONAL_OR_KEYWORD", "name": "self"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "main_sequence_feature", "annotation": "Optional[str]", "default": "None"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "reduce_output", "annotation": "Optional[str]", "default": "None"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "encoder", "annotation": "Optional[str]", "default": "None"}], "return_annotation": "None"}}, "ludwig.combiners.combiners.SequenceCombinerConfig.__repr__": {"name": "__repr__", "path": "ludwig.combiners.combiners.SequenceCombinerConfig.__repr__", "category": "method", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["special"], "parent_path": "ludwig.combiners.combiners.SequenceCombinerConfig", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "signature": {"parameters": [{"kind": "POSITIONAL_OR_KEYWORD", "name": "self"}]}}, "ludwig.combiners.combiners.SequenceCombinerConfig.encoder": {"name": "encoder", "path": "ludwig.combiners.combiners.SequenceCombinerConfig.encoder", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["dataclass-field"], "parent_path": "ludwig.combiners.combiners.SequenceCombinerConfig", "has_contents": true, "docstring": "TODO: Document parameters. (default: None).", "docstring_sections": [{"type": "markdown", "value": "TODO: Document parameters. (default: None)."}], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "Optional[str]"}, "ludwig.combiners.combiners.SequenceCombinerConfig.main_sequence_feature": {"name": "main_sequence_feature", "path": "ludwig.combiners.combiners.SequenceCombinerConfig.main_sequence_feature", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["dataclass-field"], "parent_path": "ludwig.combiners.combiners.SequenceCombinerConfig", "has_contents": true, "docstring": "TODO: Document parameters. (default: None).", "docstring_sections": [{"type": "markdown", "value": "TODO: Document parameters. (default: None)."}], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "Optional[str]"}, "ludwig.combiners.combiners.SequenceCombinerConfig.reduce_output": {"name": "reduce_output", "path": "ludwig.combiners.combiners.SequenceCombinerConfig.reduce_output", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["dataclass-field"], "parent_path": "ludwig.combiners.combiners.SequenceCombinerConfig", "has_contents": true, "docstring": "TODO: Document parameters. (default: None).", "docstring_sections": [{"type": "markdown", "value": "TODO: Document parameters. (default: None)."}], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "Optional[str]"}}, "attributes": ["ludwig.combiners.combiners.SequenceCombinerConfig.main_sequence_feature", "ludwig.combiners.combiners.SequenceCombinerConfig.reduce_output", "ludwig.combiners.combiners.SequenceCombinerConfig.encoder"], "methods": ["ludwig.combiners.combiners.SequenceCombinerConfig.__eq__", "ludwig.combiners.combiners.SequenceCombinerConfig.__init__", "ludwig.combiners.combiners.SequenceCombinerConfig.__repr__"], "functions": [], "modules": [], "classes": ["ludwig.combiners.combiners.SequenceCombinerConfig.Schema"], "bases": ["ludwig.combiners.combiners.BaseCombinerConfig"]}]}, "SGDOptimizerConfig": {"loading_errors": [], "parsing_errors": {}, "objects": [{"name": "SGDOptimizerConfig", "path": "ludwig.modules.optimization_modules.SGDOptimizerConfig", "category": "class", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["dataclass"], "parent_path": "ludwig.modules.optimization_modules", "has_contents": true, "docstring": "Parameters for stochastic gradient descent.", "docstring_sections": [{"type": "markdown", "value": "Parameters for stochastic gradient descent."}], "source": {"code": "class SGDOptimizerConfig(BaseOptimizerConfig):\n    \"\"\"Parameters for stochastic gradient descent.\"\"\"\n\n    torch_type: ClassVar[torch.optim.Optimizer] = torch.optim.SGD\n    \"Points to `torch.optim.SGD`.\"\n\n    type: str = StringOptions(\n        [\"sgd\", \"gd\", \"stochastic_gradient_descent\", \"gradient_descent\"], default=\"sgd\", nullable=False\n    )\n    \"\"\"Must be one of ['sgd', 'gd', 'stochastic_gradient_descent', 'gradient_descent']  - corresponds to names\n       in `ludwig.modules.optimization_modules.optimizer_registry` (default: 'sgd')\"\"\"\n\n    lr: float = FloatRange(default=0.001, min=0.0, max=1.0)\n    \"(default: 0.001)\"\n\n    # Defaults taken from https://pytorch.org/docs/stable/generated/torch.optim.SGD.html#torch.optim.SGD :\n    momentum: float = NonNegativeFloat(default=0.0)\n    weight_decay: float = NonNegativeFloat(default=0.0)\n    dampening: float = NonNegativeFloat(default=0.0)\n    nesterov: bool = False\n", "line_start": 87}, "children": {"ludwig.modules.optimization_modules.SGDOptimizerConfig.Schema": {"name": "Schema", "path": "ludwig.modules.optimization_modules.SGDOptimizerConfig.Schema", "category": "class", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["marshmallow-model"], "parent_path": "ludwig.modules.optimization_modules.SGDOptimizerConfig", "has_contents": true, "docstring": "", "docstring_sections": [], "source": {}, "children": {"ludwig.modules.optimization_modules.SGDOptimizerConfig.Schema.Meta": {"name": "Meta", "path": "ludwig.modules.optimization_modules.SGDOptimizerConfig.Schema.Meta", "category": "class", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": [], "parent_path": "ludwig.modules.optimization_modules.SGDOptimizerConfig.Schema", "has_contents": true, "docstring": "Sub-class specifying meta information for Marshmallow.\n\nCurrently only sets `unknown` flag to `EXCLUDE`. This is done to mirror Ludwig behavior: unknown properties are\nexcluded from `load` calls so that the marshmallow_dataclass package can be used but\n`get_custom_schema_from_marshmallow_class` will manually set a marshmallow schema's `additionalProperties` attr.\nto True so that JSON objects with extra properties do not raise errors; as a result properties are picked and\nfilled in as necessary.", "docstring_sections": [{"type": "markdown", "value": "Sub-class specifying meta information for Marshmallow.\n\nCurrently only sets `unknown` flag to `EXCLUDE`. This is done to mirror Ludwig behavior: unknown properties are\nexcluded from `load` calls so that the marshmallow_dataclass package can be used but\n`get_custom_schema_from_marshmallow_class` will manually set a marshmallow schema's `additionalProperties` attr.\nto True so that JSON objects with extra properties do not raise errors; as a result properties are picked and\nfilled in as necessary."}], "source": {"code": "    class Meta:\n        \"\"\"Sub-class specifying meta information for Marshmallow.\n\n        Currently only sets `unknown` flag to `EXCLUDE`. This is done to mirror Ludwig behavior: unknown properties are\n        excluded from `load` calls so that the marshmallow_dataclass package can be used but\n        `get_custom_schema_from_marshmallow_class` will manually set a marshmallow schema's `additionalProperties` attr.\n        to True so that JSON objects with extra properties do not raise errors; as a result properties are picked and\n        filled in as necessary.\n        \"\"\"\n\n        unknown = EXCLUDE\n        \"Flag that sets marshmallow `load` calls to ignore unknown properties passed as a parameter.\"\n", "line_start": 49}, "children": {"ludwig.modules.optimization_modules.SGDOptimizerConfig.Schema.Meta.unknown": {"name": "unknown", "path": "ludwig.modules.optimization_modules.SGDOptimizerConfig.Schema.Meta.unknown", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": [], "parent_path": "ludwig.modules.optimization_modules.SGDOptimizerConfig.Schema.Meta", "has_contents": true, "docstring": "Flag that sets marshmallow `load` calls to ignore unknown properties passed as a parameter.", "docstring_sections": [{"type": "markdown", "value": "Flag that sets marshmallow `load` calls to ignore unknown properties passed as a parameter."}], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": ""}}, "attributes": ["ludwig.modules.optimization_modules.SGDOptimizerConfig.Schema.Meta.unknown"], "methods": [], "functions": [], "modules": [], "classes": [], "bases": ["object"]}, "ludwig.modules.optimization_modules.SGDOptimizerConfig.Schema._declared_fields": {"name": "_declared_fields", "path": "ludwig.modules.optimization_modules.SGDOptimizerConfig.Schema._declared_fields", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["private"], "parent_path": "ludwig.modules.optimization_modules.SGDOptimizerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": ""}, "ludwig.modules.optimization_modules.SGDOptimizerConfig.Schema._hooks": {"name": "_hooks", "path": "ludwig.modules.optimization_modules.SGDOptimizerConfig.Schema._hooks", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["private"], "parent_path": "ludwig.modules.optimization_modules.SGDOptimizerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": ""}, "ludwig.modules.optimization_modules.SGDOptimizerConfig.Schema.opts": {"name": "opts", "path": "ludwig.modules.optimization_modules.SGDOptimizerConfig.Schema.opts", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": [], "parent_path": "ludwig.modules.optimization_modules.SGDOptimizerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": ""}, "ludwig.modules.optimization_modules.SGDOptimizerConfig.Schema.validate_type": {"name": "validate_type", "path": "ludwig.modules.optimization_modules.SGDOptimizerConfig.Schema.validate_type", "category": "method", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": [], "parent_path": "ludwig.modules.optimization_modules.SGDOptimizerConfig.Schema", "has_contents": true, "docstring": "Workaround to enforce immutable `type` in defined optimizer classes.\n\n:param data: Any-typed object that should be a string correctly identifying the optimizer type.", "docstring_sections": [{"type": "markdown", "value": "Workaround to enforce immutable `type` in defined optimizer classes."}, {"type": "parameters", "value": [{"description": "Any-typed object that should be a string correctly identifying the optimizer type.", "annotation": "", "name": "data", "kind": "POSITIONAL_OR_KEYWORD", "default": "", "is_optional": false, "is_required": true, "is_args": false, "is_kwargs": false}]}], "source": {"code": "    @validates(\"type\")\n    def validate_type(self, data, **kwargs):\n        \"\"\"Workaround to enforce immutable `type` in defined optimizer classes.\n\n        :param data: Any-typed object that should be a string correctly identifying the optimizer type.\n        \"\"\"\n        if not isinstance(data, str):\n            raise ValidationError(\n                f\"{self.__class__.__name__} expects type of field `type` to be `str`, instead received '{data}'\"\n            )\n        default = self.declared_fields[\"type\"].dump_default\n        if default is not missing and data != default:\n            # Handle aliases:\n            if optimizer_registry[default] == optimizer_registry[data]:\n                return\n            raise ValidationError(\n                f\"{self.__class__.__name__} expects value of field `type` to be '{default}', instead received '{data}'\"\n            )\n", "line_start": 62}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "signature": {"parameters": [{"kind": "POSITIONAL_OR_KEYWORD", "name": "self"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "data"}, {"kind": "VAR_KEYWORD", "name": "kwargs"}]}}, "ludwig.modules.optimization_modules.SGDOptimizerConfig.Schema.type": {"name": "type", "path": "ludwig.modules.optimization_modules.SGDOptimizerConfig.Schema.type", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.modules.optimization_modules.SGDOptimizerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "String"}, "ludwig.modules.optimization_modules.SGDOptimizerConfig.Schema.lr": {"name": "lr", "path": "ludwig.modules.optimization_modules.SGDOptimizerConfig.Schema.lr", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.modules.optimization_modules.SGDOptimizerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "Float"}, "ludwig.modules.optimization_modules.SGDOptimizerConfig.Schema.momentum": {"name": "momentum", "path": "ludwig.modules.optimization_modules.SGDOptimizerConfig.Schema.momentum", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.modules.optimization_modules.SGDOptimizerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "Float"}, "ludwig.modules.optimization_modules.SGDOptimizerConfig.Schema.weight_decay": {"name": "weight_decay", "path": "ludwig.modules.optimization_modules.SGDOptimizerConfig.Schema.weight_decay", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.modules.optimization_modules.SGDOptimizerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "Float"}, "ludwig.modules.optimization_modules.SGDOptimizerConfig.Schema.dampening": {"name": "dampening", "path": "ludwig.modules.optimization_modules.SGDOptimizerConfig.Schema.dampening", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.modules.optimization_modules.SGDOptimizerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "Float"}, "ludwig.modules.optimization_modules.SGDOptimizerConfig.Schema.nesterov": {"name": "nesterov", "path": "ludwig.modules.optimization_modules.SGDOptimizerConfig.Schema.nesterov", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.modules.optimization_modules.SGDOptimizerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "Boolean"}}, "attributes": ["ludwig.modules.optimization_modules.SGDOptimizerConfig.Schema._declared_fields", "ludwig.modules.optimization_modules.SGDOptimizerConfig.Schema._hooks", "ludwig.modules.optimization_modules.SGDOptimizerConfig.Schema.opts", "ludwig.modules.optimization_modules.SGDOptimizerConfig.Schema.type", "ludwig.modules.optimization_modules.SGDOptimizerConfig.Schema.lr", "ludwig.modules.optimization_modules.SGDOptimizerConfig.Schema.momentum", "ludwig.modules.optimization_modules.SGDOptimizerConfig.Schema.weight_decay", "ludwig.modules.optimization_modules.SGDOptimizerConfig.Schema.dampening", "ludwig.modules.optimization_modules.SGDOptimizerConfig.Schema.nesterov"], "methods": ["ludwig.modules.optimization_modules.SGDOptimizerConfig.Schema.validate_type"], "functions": [], "modules": [], "classes": ["ludwig.modules.optimization_modules.SGDOptimizerConfig.Schema.Meta"], "bases": ["marshmallow_dataclass._base_schema.<locals>.BaseSchema"]}, "ludwig.modules.optimization_modules.SGDOptimizerConfig.__eq__": {"name": "__eq__", "path": "ludwig.modules.optimization_modules.SGDOptimizerConfig.__eq__", "category": "method", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["special"], "parent_path": "ludwig.modules.optimization_modules.SGDOptimizerConfig", "has_contents": false, "docstring": "", "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "signature": {"parameters": [{"kind": "POSITIONAL_OR_KEYWORD", "name": "self"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "other"}]}}, "ludwig.modules.optimization_modules.SGDOptimizerConfig.__init__": {"name": "__init__", "path": "ludwig.modules.optimization_modules.SGDOptimizerConfig.__init__", "category": "method", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["special"], "parent_path": "ludwig.modules.optimization_modules.SGDOptimizerConfig", "has_contents": false, "docstring": "", "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "signature": {"parameters": [{"kind": "POSITIONAL_OR_KEYWORD", "name": "self"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "type", "annotation": "str", "default": "'sgd'"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "lr", "annotation": "float", "default": "0.001"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "momentum", "annotation": "float", "default": "0.0"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "weight_decay", "annotation": "float", "default": "0.0"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "dampening", "annotation": "float", "default": "0.0"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "nesterov", "annotation": "bool", "default": "False"}], "return_annotation": "None"}}, "ludwig.modules.optimization_modules.SGDOptimizerConfig.__repr__": {"name": "__repr__", "path": "ludwig.modules.optimization_modules.SGDOptimizerConfig.__repr__", "category": "method", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["special"], "parent_path": "ludwig.modules.optimization_modules.SGDOptimizerConfig", "has_contents": false, "docstring": "", "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "signature": {"parameters": [{"kind": "POSITIONAL_OR_KEYWORD", "name": "self"}]}}, "ludwig.modules.optimization_modules.SGDOptimizerConfig.dampening": {"name": "dampening", "path": "ludwig.modules.optimization_modules.SGDOptimizerConfig.dampening", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["dataclass-field"], "parent_path": "ludwig.modules.optimization_modules.SGDOptimizerConfig", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "float"}, "ludwig.modules.optimization_modules.SGDOptimizerConfig.lr": {"name": "lr", "path": "ludwig.modules.optimization_modules.SGDOptimizerConfig.lr", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["dataclass-field"], "parent_path": "ludwig.modules.optimization_modules.SGDOptimizerConfig", "has_contents": true, "docstring": "(default: 0.001)", "docstring_sections": [{"type": "markdown", "value": "(default: 0.001)"}], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "float"}, "ludwig.modules.optimization_modules.SGDOptimizerConfig.momentum": {"name": "momentum", "path": "ludwig.modules.optimization_modules.SGDOptimizerConfig.momentum", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["dataclass-field"], "parent_path": "ludwig.modules.optimization_modules.SGDOptimizerConfig", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "float"}, "ludwig.modules.optimization_modules.SGDOptimizerConfig.nesterov": {"name": "nesterov", "path": "ludwig.modules.optimization_modules.SGDOptimizerConfig.nesterov", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["dataclass-field"], "parent_path": "ludwig.modules.optimization_modules.SGDOptimizerConfig", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "bool"}, "ludwig.modules.optimization_modules.SGDOptimizerConfig.torch_type": {"name": "torch_type", "path": "ludwig.modules.optimization_modules.SGDOptimizerConfig.torch_type", "category": "class", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": [], "parent_path": "ludwig.modules.optimization_modules.SGDOptimizerConfig", "has_contents": true, "docstring": "Implements stochastic gradient descent (optionally with momentum).\n\n.. math::\n   \\begin{aligned}\n        &\\rule{110mm}{0.4pt}                                                                 \\\\\n        &\\textbf{input}      : \\gamma \\text{ (lr)}, \\: \\theta_0 \\text{ (params)}, \\: f(\\theta)\n            \\text{ (objective)}, \\: \\lambda \\text{ (weight decay)},                          \\\\\n        &\\hspace{13mm} \\:\\mu \\text{ (momentum)}, \\:\\tau \\text{ (dampening)},\\:nesterov\\\\[-1.ex]\n        &\\rule{110mm}{0.4pt}                                                                 \\\\\n        &\\textbf{for} \\: t=1 \\: \\textbf{to} \\: \\ldots \\: \\textbf{do}                         \\\\\n        &\\hspace{5mm}g_t           \\leftarrow   \\nabla_{\\theta} f_t (\\theta_{t-1})           \\\\\n        &\\hspace{5mm}\\textbf{if} \\: \\lambda \\neq 0                                           \\\\\n        &\\hspace{10mm} g_t \\leftarrow g_t + \\lambda  \\theta_{t-1}                            \\\\\n        &\\hspace{5mm}\\textbf{if} \\: \\mu \\neq 0                                               \\\\\n        &\\hspace{10mm}\\textbf{if} \\: t > 1                                                   \\\\\n        &\\hspace{15mm} \\textbf{b}_t \\leftarrow \\mu \\textbf{b}_{t-1} + (1-\\tau) g_t           \\\\\n        &\\hspace{10mm}\\textbf{else}                                                          \\\\\n        &\\hspace{15mm} \\textbf{b}_t \\leftarrow g_t                                           \\\\\n        &\\hspace{10mm}\\textbf{if} \\: nesterov                                                \\\\\n        &\\hspace{15mm} g_t \\leftarrow g_{t-1} + \\mu \\textbf{b}_t                             \\\\\n        &\\hspace{10mm}\\textbf{else}                                                   \\\\[-1.ex]\n        &\\hspace{15mm} g_t  \\leftarrow  \\textbf{b}_t                                         \\\\\n        &\\hspace{5mm}\\theta_t \\leftarrow \\theta_{t-1} - \\gamma g_t                    \\\\[-1.ex]\n        &\\rule{110mm}{0.4pt}                                                          \\\\[-1.ex]\n        &\\bf{return} \\:  \\theta_t                                                     \\\\[-1.ex]\n        &\\rule{110mm}{0.4pt}                                                          \\\\[-1.ex]\n   \\end{aligned}\n\nNesterov momentum is based on the formula from\n`On the importance of initialization and momentum in deep learning`__.\n\nArgs:\n    params (iterable): iterable of parameters to optimize or dicts defining\n        parameter groups\n    lr (float): learning rate\n    momentum (float, optional): momentum factor (default: 0)\n    weight_decay (float, optional): weight decay (L2 penalty) (default: 0)\n    dampening (float, optional): dampening for momentum (default: 0)\n    nesterov (bool, optional): enables Nesterov momentum (default: False)\n\nExample:\n    >>> optimizer = torch.optim.SGD(model.parameters(), lr=0.1, momentum=0.9)\n    >>> optimizer.zero_grad()\n    >>> loss_fn(model(input), target).backward()\n    >>> optimizer.step()\n\n__ http://www.cs.toronto.edu/%7Ehinton/absps/momentum.pdf\n\n.. note::\n    The implementation of SGD with Momentum/Nesterov subtly differs from\n    Sutskever et. al. and implementations in some other frameworks.\n\n    Considering the specific case of Momentum, the update can be written as\n\n    .. math::\n        \\begin{aligned}\n            v_{t+1} & = \\mu * v_{t} + g_{t+1}, \\\\\n            p_{t+1} & = p_{t} - \\text{lr} * v_{t+1},\n        \\end{aligned}\n\n    where :math:`p`, :math:`g`, :math:`v` and :math:`\\mu` denote the\n    parameters, gradient, velocity, and momentum respectively.\n\n    This is in contrast to Sutskever et. al. and\n    other frameworks which employ an update of the form\n\n    .. math::\n        \\begin{aligned}\n            v_{t+1} & = \\mu * v_{t} + \\text{lr} * g_{t+1}, \\\\\n            p_{t+1} & = p_{t} - v_{t+1}.\n        \\end{aligned}\n\n    The Nesterov version is analogously modified.", "docstring_sections": [{"type": "markdown", "value": "Implements stochastic gradient descent (optionally with momentum).\n\n.. math::\n   \\begin{aligned}\n        &\\rule{110mm}{0.4pt}                                                                 \\\\\n        &\\textbf{input}      : \\gamma \\text{ (lr)}, \\: \\theta_0 \\text{ (params)}, \\: f(\\theta)\n            \\text{ (objective)}, \\: \\lambda \\text{ (weight decay)},                          \\\\\n        &\\hspace{13mm} \\:\\mu \\text{ (momentum)}, \\:\\tau \\text{ (dampening)},\\:nesterov\\\\[-1.ex]\n        &\\rule{110mm}{0.4pt}                                                                 \\\\\n        &\\textbf{for} \\: t=1 \\: \\textbf{to} \\: \\ldots \\: \\textbf{do}                         \\\\\n        &\\hspace{5mm}g_t           \\leftarrow   \\nabla_{\\theta} f_t (\\theta_{t-1})           \\\\\n        &\\hspace{5mm}\\textbf{if} \\: \\lambda \\neq 0                                           \\\\\n        &\\hspace{10mm} g_t \\leftarrow g_t + \\lambda  \\theta_{t-1}                            \\\\\n        &\\hspace{5mm}\\textbf{if} \\: \\mu \\neq 0                                               \\\\\n        &\\hspace{10mm}\\textbf{if} \\: t > 1                                                   \\\\\n        &\\hspace{15mm} \\textbf{b}_t \\leftarrow \\mu \\textbf{b}_{t-1} + (1-\\tau) g_t           \\\\\n        &\\hspace{10mm}\\textbf{else}                                                          \\\\\n        &\\hspace{15mm} \\textbf{b}_t \\leftarrow g_t                                           \\\\\n        &\\hspace{10mm}\\textbf{if} \\: nesterov                                                \\\\\n        &\\hspace{15mm} g_t \\leftarrow g_{t-1} + \\mu \\textbf{b}_t                             \\\\\n        &\\hspace{10mm}\\textbf{else}                                                   \\\\[-1.ex]\n        &\\hspace{15mm} g_t  \\leftarrow  \\textbf{b}_t                                         \\\\\n        &\\hspace{5mm}\\theta_t \\leftarrow \\theta_{t-1} - \\gamma g_t                    \\\\[-1.ex]\n        &\\rule{110mm}{0.4pt}                                                          \\\\[-1.ex]\n        &\\bf{return} \\:  \\theta_t                                                     \\\\[-1.ex]\n        &\\rule{110mm}{0.4pt}                                                          \\\\[-1.ex]\n   \\end{aligned}\n\nNesterov momentum is based on the formula from\n`On the importance of initialization and momentum in deep learning`__.\n\nArgs:\n    params (iterable): iterable of parameters to optimize or dicts defining\n        parameter groups\n    lr (float): learning rate\n    momentum (float, optional): momentum factor (default: 0)\n    weight_decay (float, optional): weight decay (L2 penalty) (default: 0)\n    dampening (float, optional): dampening for momentum (default: 0)\n    nesterov (bool, optional): enables Nesterov momentum (default: False)\n\nExample:\n    >>> optimizer = torch.optim.SGD(model.parameters(), lr=0.1, momentum=0.9)\n    >>> optimizer.zero_grad()\n    >>> loss_fn(model(input), target).backward()\n    >>> optimizer.step()\n\n__ http://www.cs.toronto.edu/%7Ehinton/absps/momentum.pdf\n\n.. note::\n    The implementation of SGD with Momentum/Nesterov subtly differs from\n    Sutskever et. al. and implementations in some other frameworks.\n\n    Considering the specific case of Momentum, the update can be written as\n\n    .. math::\n        \\begin{aligned}\n            v_{t+1} & = \\mu * v_{t} + g_{t+1}, \\\\\n            p_{t+1} & = p_{t} - \\text{lr} * v_{t+1},\n        \\end{aligned}\n\n    where :math:`p`, :math:`g`, :math:`v` and :math:`\\mu` denote the\n    parameters, gradient, velocity, and momentum respectively.\n\n    This is in contrast to Sutskever et. al. and\n    other frameworks which employ an update of the form\n\n    .. math::\n        \\begin{aligned}\n            v_{t+1} & = \\mu * v_{t} + \\text{lr} * g_{t+1}, \\\\\n            p_{t+1} & = p_{t} - v_{t+1}.\n        \\end{aligned}\n\n    The Nesterov version is analogously modified."}], "source": {"code": "class SGD(Optimizer):\n    r\"\"\"Implements stochastic gradient descent (optionally with momentum).\n\n    .. math::\n       \\begin{aligned}\n            &\\rule{110mm}{0.4pt}                                                                 \\\\\n            &\\textbf{input}      : \\gamma \\text{ (lr)}, \\: \\theta_0 \\text{ (params)}, \\: f(\\theta)\n                \\text{ (objective)}, \\: \\lambda \\text{ (weight decay)},                          \\\\\n            &\\hspace{13mm} \\:\\mu \\text{ (momentum)}, \\:\\tau \\text{ (dampening)},\\:nesterov\\\\[-1.ex]\n            &\\rule{110mm}{0.4pt}                                                                 \\\\\n            &\\textbf{for} \\: t=1 \\: \\textbf{to} \\: \\ldots \\: \\textbf{do}                         \\\\\n            &\\hspace{5mm}g_t           \\leftarrow   \\nabla_{\\theta} f_t (\\theta_{t-1})           \\\\\n            &\\hspace{5mm}\\textbf{if} \\: \\lambda \\neq 0                                           \\\\\n            &\\hspace{10mm} g_t \\leftarrow g_t + \\lambda  \\theta_{t-1}                            \\\\\n            &\\hspace{5mm}\\textbf{if} \\: \\mu \\neq 0                                               \\\\\n            &\\hspace{10mm}\\textbf{if} \\: t > 1                                                   \\\\\n            &\\hspace{15mm} \\textbf{b}_t \\leftarrow \\mu \\textbf{b}_{t-1} + (1-\\tau) g_t           \\\\\n            &\\hspace{10mm}\\textbf{else}                                                          \\\\\n            &\\hspace{15mm} \\textbf{b}_t \\leftarrow g_t                                           \\\\\n            &\\hspace{10mm}\\textbf{if} \\: nesterov                                                \\\\\n            &\\hspace{15mm} g_t \\leftarrow g_{t-1} + \\mu \\textbf{b}_t                             \\\\\n            &\\hspace{10mm}\\textbf{else}                                                   \\\\[-1.ex]\n            &\\hspace{15mm} g_t  \\leftarrow  \\textbf{b}_t                                         \\\\\n            &\\hspace{5mm}\\theta_t \\leftarrow \\theta_{t-1} - \\gamma g_t                    \\\\[-1.ex]\n            &\\rule{110mm}{0.4pt}                                                          \\\\[-1.ex]\n            &\\bf{return} \\:  \\theta_t                                                     \\\\[-1.ex]\n            &\\rule{110mm}{0.4pt}                                                          \\\\[-1.ex]\n       \\end{aligned}\n\n    Nesterov momentum is based on the formula from\n    `On the importance of initialization and momentum in deep learning`__.\n\n    Args:\n        params (iterable): iterable of parameters to optimize or dicts defining\n            parameter groups\n        lr (float): learning rate\n        momentum (float, optional): momentum factor (default: 0)\n        weight_decay (float, optional): weight decay (L2 penalty) (default: 0)\n        dampening (float, optional): dampening for momentum (default: 0)\n        nesterov (bool, optional): enables Nesterov momentum (default: False)\n\n    Example:\n        >>> optimizer = torch.optim.SGD(model.parameters(), lr=0.1, momentum=0.9)\n        >>> optimizer.zero_grad()\n        >>> loss_fn(model(input), target).backward()\n        >>> optimizer.step()\n\n    __ http://www.cs.toronto.edu/%7Ehinton/absps/momentum.pdf\n\n    .. note::\n        The implementation of SGD with Momentum/Nesterov subtly differs from\n        Sutskever et. al. and implementations in some other frameworks.\n\n        Considering the specific case of Momentum, the update can be written as\n\n        .. math::\n            \\begin{aligned}\n                v_{t+1} & = \\mu * v_{t} + g_{t+1}, \\\\\n                p_{t+1} & = p_{t} - \\text{lr} * v_{t+1},\n            \\end{aligned}\n\n        where :math:`p`, :math:`g`, :math:`v` and :math:`\\mu` denote the\n        parameters, gradient, velocity, and momentum respectively.\n\n        This is in contrast to Sutskever et. al. and\n        other frameworks which employ an update of the form\n\n        .. math::\n            \\begin{aligned}\n                v_{t+1} & = \\mu * v_{t} + \\text{lr} * g_{t+1}, \\\\\n                p_{t+1} & = p_{t} - v_{t+1}.\n            \\end{aligned}\n\n        The Nesterov version is analogously modified.\n    \"\"\"\n\n    def __init__(self, params, lr=required, momentum=0, dampening=0,\n                 weight_decay=0, nesterov=False):\n        if lr is not required and lr < 0.0:\n            raise ValueError(\"Invalid learning rate: {}\".format(lr))\n        if momentum < 0.0:\n            raise ValueError(\"Invalid momentum value: {}\".format(momentum))\n        if weight_decay < 0.0:\n            raise ValueError(\"Invalid weight_decay value: {}\".format(weight_decay))\n\n        defaults = dict(lr=lr, momentum=momentum, dampening=dampening,\n                        weight_decay=weight_decay, nesterov=nesterov)\n        if nesterov and (momentum <= 0 or dampening != 0):\n            raise ValueError(\"Nesterov momentum requires a momentum and zero dampening\")\n        super(SGD, self).__init__(params, defaults)\n\n    def __setstate__(self, state):\n        super(SGD, self).__setstate__(state)\n        for group in self.param_groups:\n            group.setdefault('nesterov', False)\n\n    @torch.no_grad()\n    def step(self, closure=None):\n        \"\"\"Performs a single optimization step.\n\n        Args:\n            closure (callable, optional): A closure that reevaluates the model\n                and returns the loss.\n        \"\"\"\n        loss = None\n        if closure is not None:\n            with torch.enable_grad():\n                loss = closure()\n\n        for group in self.param_groups:\n            params_with_grad = []\n            d_p_list = []\n            momentum_buffer_list = []\n            weight_decay = group['weight_decay']\n            momentum = group['momentum']\n            dampening = group['dampening']\n            nesterov = group['nesterov']\n            lr = group['lr']\n\n            for p in group['params']:\n                if p.grad is not None:\n                    params_with_grad.append(p)\n                    d_p_list.append(p.grad)\n\n                    state = self.state[p]\n                    if 'momentum_buffer' not in state:\n                        momentum_buffer_list.append(None)\n                    else:\n                        momentum_buffer_list.append(state['momentum_buffer'])\n\n            F.sgd(params_with_grad,\n                  d_p_list,\n                  momentum_buffer_list,\n                  weight_decay=weight_decay,\n                  momentum=momentum,\n                  lr=lr,\n                  dampening=dampening,\n                  nesterov=nesterov)\n\n            # update momentum_buffers in state\n            for p, momentum_buffer in zip(params_with_grad, momentum_buffer_list):\n                state = self.state[p]\n                state['momentum_buffer'] = momentum_buffer\n\n        return loss\n", "line_start": 6}, "children": {"ludwig.modules.optimization_modules.SGDOptimizerConfig.torch_type.__init__": {"name": "__init__", "path": "ludwig.modules.optimization_modules.SGDOptimizerConfig.torch_type.__init__", "category": "method", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["special"], "parent_path": "ludwig.modules.optimization_modules.SGDOptimizerConfig.torch_type", "has_contents": false, "docstring": "", "docstring_sections": [], "source": {"code": "    def __init__(self, params, lr=required, momentum=0, dampening=0,\n                 weight_decay=0, nesterov=False):\n        if lr is not required and lr < 0.0:\n            raise ValueError(\"Invalid learning rate: {}\".format(lr))\n        if momentum < 0.0:\n            raise ValueError(\"Invalid momentum value: {}\".format(momentum))\n        if weight_decay < 0.0:\n            raise ValueError(\"Invalid weight_decay value: {}\".format(weight_decay))\n\n        defaults = dict(lr=lr, momentum=momentum, dampening=dampening,\n                        weight_decay=weight_decay, nesterov=nesterov)\n        if nesterov and (momentum <= 0 or dampening != 0):\n            raise ValueError(\"Nesterov momentum requires a momentum and zero dampening\")\n        super(SGD, self).__init__(params, defaults)\n", "line_start": 82}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "signature": {"parameters": [{"kind": "POSITIONAL_OR_KEYWORD", "name": "self"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "params"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "lr", "default": "<required parameter>"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "momentum", "default": "0"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "dampening", "default": "0"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "weight_decay", "default": "0"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "nesterov", "default": "False"}]}}, "ludwig.modules.optimization_modules.SGDOptimizerConfig.torch_type.__setstate__": {"name": "__setstate__", "path": "ludwig.modules.optimization_modules.SGDOptimizerConfig.torch_type.__setstate__", "category": "method", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["special"], "parent_path": "ludwig.modules.optimization_modules.SGDOptimizerConfig.torch_type", "has_contents": false, "docstring": "", "docstring_sections": [], "source": {"code": "    def __setstate__(self, state):\n        super(SGD, self).__setstate__(state)\n        for group in self.param_groups:\n            group.setdefault('nesterov', False)\n", "line_start": 97}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "signature": {"parameters": [{"kind": "POSITIONAL_OR_KEYWORD", "name": "self"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "state"}]}}, "ludwig.modules.optimization_modules.SGDOptimizerConfig.torch_type.step": {"name": "step", "path": "ludwig.modules.optimization_modules.SGDOptimizerConfig.torch_type.step", "category": "method", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": [], "parent_path": "ludwig.modules.optimization_modules.SGDOptimizerConfig.torch_type", "has_contents": true, "docstring": "Performs a single optimization step.\n\nArgs:\n    closure (callable, optional): A closure that reevaluates the model\n        and returns the loss.", "docstring_sections": [{"type": "markdown", "value": "Performs a single optimization step.\n\nArgs:\n    closure (callable, optional): A closure that reevaluates the model\n        and returns the loss."}], "source": {"code": "    @torch.no_grad()\n    def step(self, closure=None):\n        \"\"\"Performs a single optimization step.\n\n        Args:\n            closure (callable, optional): A closure that reevaluates the model\n                and returns the loss.\n        \"\"\"\n        loss = None\n        if closure is not None:\n            with torch.enable_grad():\n                loss = closure()\n\n        for group in self.param_groups:\n            params_with_grad = []\n            d_p_list = []\n            momentum_buffer_list = []\n            weight_decay = group['weight_decay']\n            momentum = group['momentum']\n            dampening = group['dampening']\n            nesterov = group['nesterov']\n            lr = group['lr']\n\n            for p in group['params']:\n                if p.grad is not None:\n                    params_with_grad.append(p)\n                    d_p_list.append(p.grad)\n\n                    state = self.state[p]\n                    if 'momentum_buffer' not in state:\n                        momentum_buffer_list.append(None)\n                    else:\n                        momentum_buffer_list.append(state['momentum_buffer'])\n\n            F.sgd(params_with_grad,\n                  d_p_list,\n                  momentum_buffer_list,\n                  weight_decay=weight_decay,\n                  momentum=momentum,\n                  lr=lr,\n                  dampening=dampening,\n                  nesterov=nesterov)\n\n            # update momentum_buffers in state\n            for p, momentum_buffer in zip(params_with_grad, momentum_buffer_list):\n                state = self.state[p]\n                state['momentum_buffer'] = momentum_buffer\n\n        return loss\n", "line_start": 102}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "signature": {"parameters": [{"kind": "POSITIONAL_OR_KEYWORD", "name": "self"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "closure", "default": "None"}]}}}, "attributes": [], "methods": ["ludwig.modules.optimization_modules.SGDOptimizerConfig.torch_type.__init__", "ludwig.modules.optimization_modules.SGDOptimizerConfig.torch_type.__setstate__", "ludwig.modules.optimization_modules.SGDOptimizerConfig.torch_type.step"], "functions": [], "modules": [], "classes": [], "bases": ["torch.optim.optimizer.Optimizer"]}, "ludwig.modules.optimization_modules.SGDOptimizerConfig.type": {"name": "type", "path": "ludwig.modules.optimization_modules.SGDOptimizerConfig.type", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": [], "parent_path": "ludwig.modules.optimization_modules.SGDOptimizerConfig", "has_contents": true, "docstring": "Must be one of ['sgd', 'gd', 'stochastic_gradient_descent', 'gradient_descent']  - corresponds to names\nin `ludwig.modules.optimization_modules.optimizer_registry` (default: 'sgd')", "docstring_sections": [{"type": "markdown", "value": "Must be one of ['sgd', 'gd', 'stochastic_gradient_descent', 'gradient_descent']  - corresponds to names\nin `ludwig.modules.optimization_modules.optimizer_registry` (default: 'sgd')"}], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "str"}, "ludwig.modules.optimization_modules.SGDOptimizerConfig.weight_decay": {"name": "weight_decay", "path": "ludwig.modules.optimization_modules.SGDOptimizerConfig.weight_decay", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["dataclass-field"], "parent_path": "ludwig.modules.optimization_modules.SGDOptimizerConfig", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "float"}}, "attributes": ["ludwig.modules.optimization_modules.SGDOptimizerConfig.type", "ludwig.modules.optimization_modules.SGDOptimizerConfig.lr", "ludwig.modules.optimization_modules.SGDOptimizerConfig.momentum", "ludwig.modules.optimization_modules.SGDOptimizerConfig.weight_decay", "ludwig.modules.optimization_modules.SGDOptimizerConfig.dampening", "ludwig.modules.optimization_modules.SGDOptimizerConfig.nesterov"], "methods": ["ludwig.modules.optimization_modules.SGDOptimizerConfig.__eq__", "ludwig.modules.optimization_modules.SGDOptimizerConfig.__init__", "ludwig.modules.optimization_modules.SGDOptimizerConfig.__repr__"], "functions": [], "modules": [], "classes": ["ludwig.modules.optimization_modules.SGDOptimizerConfig.Schema", "ludwig.modules.optimization_modules.SGDOptimizerConfig.torch_type"], "bases": ["ludwig.modules.optimization_modules.BaseOptimizerConfig"]}]}, "BaseCombinerConfig": {"loading_errors": [], "parsing_errors": {}, "objects": [{"name": "BaseCombinerConfig", "path": "ludwig.combiners.combiners.BaseCombinerConfig", "category": "class", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": [], "parent_path": "ludwig.combiners.combiners", "has_contents": true, "docstring": "Base combiner config class.", "docstring_sections": [{"type": "markdown", "value": "Base combiner config class."}], "source": {"code": "class BaseCombinerConfig(schema.BaseMarshmallowConfig):\n    \"\"\"Base combiner config class.\"\"\"\n\n    pass\n", "line_start": 96}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "bases": ["ludwig.utils.marshmallow_schema_utils.BaseMarshmallowConfig"]}]}, "BaseOptimizerConfig": {"loading_errors": [], "parsing_errors": {}, "objects": [{"name": "BaseOptimizerConfig", "path": "ludwig.modules.optimization_modules.BaseOptimizerConfig", "category": "class", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["dataclass"], "parent_path": "ludwig.modules.optimization_modules", "has_contents": true, "docstring": "Base class for optimizers. Not meant to be used directly.\n\nThe dataclass format prevents arbitrary properties from being set. Consequently, in child classes, all properties\nfrom the corresponding `torch.optim.Optimizer` class are copied over: check each class to check which attributes are\ndifferent from the torch-specified defaults.", "docstring_sections": [{"type": "markdown", "value": "Base class for optimizers. Not meant to be used directly.\n\nThe dataclass format prevents arbitrary properties from being set. Consequently, in child classes, all properties\nfrom the corresponding `torch.optim.Optimizer` class are copied over: check each class to check which attributes are\ndifferent from the torch-specified defaults."}], "source": {"code": "class BaseOptimizerConfig(BaseMarshmallowConfig):\n    \"\"\"Base class for optimizers. Not meant to be used directly.\n\n    The dataclass format prevents arbitrary properties from being set. Consequently, in child classes, all properties\n    from the corresponding `torch.optim.Optimizer` class are copied over: check each class to check which attributes are\n    different from the torch-specified defaults.\n    \"\"\"\n\n    torch_type: ClassVar[Optional[torch.optim.Optimizer]] = None\n    \"Class variable pointing to the corresponding `torch.optim.Optimizer` class.\"\n    type: str\n    \"\"\"Name corresponding to an optimizer `ludwig.modules.optimization_modules.optimizer_registry`.\n       Technically mutable, but attempting to load a derived optimizer with `type` set to a mismatched value will\n       result in a `ValidationError`.\"\"\"\n\n    @validates(\"type\")\n    def validate_type(self, data, **kwargs):\n        \"\"\"Workaround to enforce immutable `type` in defined optimizer classes.\n\n        :param data: Any-typed object that should be a string correctly identifying the optimizer type.\n        \"\"\"\n        if not isinstance(data, str):\n            raise ValidationError(\n                f\"{self.__class__.__name__} expects type of field `type` to be `str`, instead received '{data}'\"\n            )\n        default = self.declared_fields[\"type\"].dump_default\n        if default is not missing and data != default:\n            # Handle aliases:\n            if optimizer_registry[default] == optimizer_registry[data]:\n                return\n            raise ValidationError(\n                f\"{self.__class__.__name__} expects value of field `type` to be '{default}', instead received '{data}'\"\n            )\n", "line_start": 47}, "children": {"ludwig.modules.optimization_modules.BaseOptimizerConfig.Schema": {"name": "Schema", "path": "ludwig.modules.optimization_modules.BaseOptimizerConfig.Schema", "category": "class", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["marshmallow-model"], "parent_path": "ludwig.modules.optimization_modules.BaseOptimizerConfig", "has_contents": true, "docstring": "", "docstring_sections": [], "source": {}, "children": {"ludwig.modules.optimization_modules.BaseOptimizerConfig.Schema.Meta": {"name": "Meta", "path": "ludwig.modules.optimization_modules.BaseOptimizerConfig.Schema.Meta", "category": "class", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": [], "parent_path": "ludwig.modules.optimization_modules.BaseOptimizerConfig.Schema", "has_contents": true, "docstring": "Sub-class specifying meta information for Marshmallow.\n\nCurrently only sets `unknown` flag to `EXCLUDE`. This is done to mirror Ludwig behavior: unknown properties are\nexcluded from `load` calls so that the marshmallow_dataclass package can be used but\n`get_custom_schema_from_marshmallow_class` will manually set a marshmallow schema's `additionalProperties` attr.\nto True so that JSON objects with extra properties do not raise errors; as a result properties are picked and\nfilled in as necessary.", "docstring_sections": [{"type": "markdown", "value": "Sub-class specifying meta information for Marshmallow.\n\nCurrently only sets `unknown` flag to `EXCLUDE`. This is done to mirror Ludwig behavior: unknown properties are\nexcluded from `load` calls so that the marshmallow_dataclass package can be used but\n`get_custom_schema_from_marshmallow_class` will manually set a marshmallow schema's `additionalProperties` attr.\nto True so that JSON objects with extra properties do not raise errors; as a result properties are picked and\nfilled in as necessary."}], "source": {"code": "    class Meta:\n        \"\"\"Sub-class specifying meta information for Marshmallow.\n\n        Currently only sets `unknown` flag to `EXCLUDE`. This is done to mirror Ludwig behavior: unknown properties are\n        excluded from `load` calls so that the marshmallow_dataclass package can be used but\n        `get_custom_schema_from_marshmallow_class` will manually set a marshmallow schema's `additionalProperties` attr.\n        to True so that JSON objects with extra properties do not raise errors; as a result properties are picked and\n        filled in as necessary.\n        \"\"\"\n\n        unknown = EXCLUDE\n        \"Flag that sets marshmallow `load` calls to ignore unknown properties passed as a parameter.\"\n", "line_start": 49}, "children": {"ludwig.modules.optimization_modules.BaseOptimizerConfig.Schema.Meta.unknown": {"name": "unknown", "path": "ludwig.modules.optimization_modules.BaseOptimizerConfig.Schema.Meta.unknown", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": [], "parent_path": "ludwig.modules.optimization_modules.BaseOptimizerConfig.Schema.Meta", "has_contents": true, "docstring": "Flag that sets marshmallow `load` calls to ignore unknown properties passed as a parameter.", "docstring_sections": [{"type": "markdown", "value": "Flag that sets marshmallow `load` calls to ignore unknown properties passed as a parameter."}], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": ""}}, "attributes": ["ludwig.modules.optimization_modules.BaseOptimizerConfig.Schema.Meta.unknown"], "methods": [], "functions": [], "modules": [], "classes": [], "bases": ["object"]}, "ludwig.modules.optimization_modules.BaseOptimizerConfig.Schema._declared_fields": {"name": "_declared_fields", "path": "ludwig.modules.optimization_modules.BaseOptimizerConfig.Schema._declared_fields", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["private"], "parent_path": "ludwig.modules.optimization_modules.BaseOptimizerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": ""}, "ludwig.modules.optimization_modules.BaseOptimizerConfig.Schema._hooks": {"name": "_hooks", "path": "ludwig.modules.optimization_modules.BaseOptimizerConfig.Schema._hooks", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["private"], "parent_path": "ludwig.modules.optimization_modules.BaseOptimizerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": ""}, "ludwig.modules.optimization_modules.BaseOptimizerConfig.Schema.opts": {"name": "opts", "path": "ludwig.modules.optimization_modules.BaseOptimizerConfig.Schema.opts", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": [], "parent_path": "ludwig.modules.optimization_modules.BaseOptimizerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": ""}, "ludwig.modules.optimization_modules.BaseOptimizerConfig.Schema.validate_type": {"name": "validate_type", "path": "ludwig.modules.optimization_modules.BaseOptimizerConfig.Schema.validate_type", "category": "method", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": [], "parent_path": "ludwig.modules.optimization_modules.BaseOptimizerConfig.Schema", "has_contents": true, "docstring": "Workaround to enforce immutable `type` in defined optimizer classes.\n\n:param data: Any-typed object that should be a string correctly identifying the optimizer type.", "docstring_sections": [{"type": "markdown", "value": "Workaround to enforce immutable `type` in defined optimizer classes."}, {"type": "parameters", "value": [{"description": "Any-typed object that should be a string correctly identifying the optimizer type.", "annotation": "", "name": "data", "kind": "POSITIONAL_OR_KEYWORD", "default": "", "is_optional": false, "is_required": true, "is_args": false, "is_kwargs": false}]}], "source": {"code": "    @validates(\"type\")\n    def validate_type(self, data, **kwargs):\n        \"\"\"Workaround to enforce immutable `type` in defined optimizer classes.\n\n        :param data: Any-typed object that should be a string correctly identifying the optimizer type.\n        \"\"\"\n        if not isinstance(data, str):\n            raise ValidationError(\n                f\"{self.__class__.__name__} expects type of field `type` to be `str`, instead received '{data}'\"\n            )\n        default = self.declared_fields[\"type\"].dump_default\n        if default is not missing and data != default:\n            # Handle aliases:\n            if optimizer_registry[default] == optimizer_registry[data]:\n                return\n            raise ValidationError(\n                f\"{self.__class__.__name__} expects value of field `type` to be '{default}', instead received '{data}'\"\n            )\n", "line_start": 62}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "signature": {"parameters": [{"kind": "POSITIONAL_OR_KEYWORD", "name": "self"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "data"}, {"kind": "VAR_KEYWORD", "name": "kwargs"}]}}, "ludwig.modules.optimization_modules.BaseOptimizerConfig.Schema.type": {"name": "type", "path": "ludwig.modules.optimization_modules.BaseOptimizerConfig.Schema.type", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["marshmallow-field", "required"], "parent_path": "ludwig.modules.optimization_modules.BaseOptimizerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "String"}}, "attributes": ["ludwig.modules.optimization_modules.BaseOptimizerConfig.Schema._declared_fields", "ludwig.modules.optimization_modules.BaseOptimizerConfig.Schema._hooks", "ludwig.modules.optimization_modules.BaseOptimizerConfig.Schema.opts", "ludwig.modules.optimization_modules.BaseOptimizerConfig.Schema.type"], "methods": ["ludwig.modules.optimization_modules.BaseOptimizerConfig.Schema.validate_type"], "functions": [], "modules": [], "classes": ["ludwig.modules.optimization_modules.BaseOptimizerConfig.Schema.Meta"], "bases": ["marshmallow_dataclass._base_schema.<locals>.BaseSchema"]}, "ludwig.modules.optimization_modules.BaseOptimizerConfig.__eq__": {"name": "__eq__", "path": "ludwig.modules.optimization_modules.BaseOptimizerConfig.__eq__", "category": "method", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["special"], "parent_path": "ludwig.modules.optimization_modules.BaseOptimizerConfig", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "signature": {"parameters": [{"kind": "POSITIONAL_OR_KEYWORD", "name": "self"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "other"}]}}, "ludwig.modules.optimization_modules.BaseOptimizerConfig.__init__": {"name": "__init__", "path": "ludwig.modules.optimization_modules.BaseOptimizerConfig.__init__", "category": "method", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["special"], "parent_path": "ludwig.modules.optimization_modules.BaseOptimizerConfig", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "signature": {"parameters": [{"kind": "POSITIONAL_OR_KEYWORD", "name": "self"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "type", "annotation": "str"}], "return_annotation": "None"}}, "ludwig.modules.optimization_modules.BaseOptimizerConfig.__repr__": {"name": "__repr__", "path": "ludwig.modules.optimization_modules.BaseOptimizerConfig.__repr__", "category": "method", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["special"], "parent_path": "ludwig.modules.optimization_modules.BaseOptimizerConfig", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "signature": {"parameters": [{"kind": "POSITIONAL_OR_KEYWORD", "name": "self"}]}}, "ludwig.modules.optimization_modules.BaseOptimizerConfig.torch_type": {"name": "torch_type", "path": "ludwig.modules.optimization_modules.BaseOptimizerConfig.torch_type", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["dataclass-field"], "parent_path": "ludwig.modules.optimization_modules.BaseOptimizerConfig", "has_contents": true, "docstring": "Class variable pointing to the corresponding `torch.optim.Optimizer` class.", "docstring_sections": [{"type": "markdown", "value": "Class variable pointing to the corresponding `torch.optim.Optimizer` class."}], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "ClassVar[Optional[torch.optim.optimizer.Optimizer]]"}, "ludwig.modules.optimization_modules.BaseOptimizerConfig.validate_type": {"name": "validate_type", "path": "ludwig.modules.optimization_modules.BaseOptimizerConfig.validate_type", "category": "method", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": [], "parent_path": "ludwig.modules.optimization_modules.BaseOptimizerConfig", "has_contents": true, "docstring": "Workaround to enforce immutable `type` in defined optimizer classes.\n\n:param data: Any-typed object that should be a string correctly identifying the optimizer type.", "docstring_sections": [{"type": "markdown", "value": "Workaround to enforce immutable `type` in defined optimizer classes."}, {"type": "parameters", "value": [{"description": "Any-typed object that should be a string correctly identifying the optimizer type.", "annotation": "", "name": "data", "kind": "POSITIONAL_OR_KEYWORD", "default": "", "is_optional": false, "is_required": true, "is_args": false, "is_kwargs": false}]}], "source": {"code": "    @validates(\"type\")\n    def validate_type(self, data, **kwargs):\n        \"\"\"Workaround to enforce immutable `type` in defined optimizer classes.\n\n        :param data: Any-typed object that should be a string correctly identifying the optimizer type.\n        \"\"\"\n        if not isinstance(data, str):\n            raise ValidationError(\n                f\"{self.__class__.__name__} expects type of field `type` to be `str`, instead received '{data}'\"\n            )\n        default = self.declared_fields[\"type\"].dump_default\n        if default is not missing and data != default:\n            # Handle aliases:\n            if optimizer_registry[default] == optimizer_registry[data]:\n                return\n            raise ValidationError(\n                f\"{self.__class__.__name__} expects value of field `type` to be '{default}', instead received '{data}'\"\n            )\n", "line_start": 62}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "signature": {"parameters": [{"kind": "POSITIONAL_OR_KEYWORD", "name": "self"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "data"}, {"kind": "VAR_KEYWORD", "name": "kwargs"}]}}, "ludwig.modules.optimization_modules.BaseOptimizerConfig.type": {"name": "type", "path": "ludwig.modules.optimization_modules.BaseOptimizerConfig.type", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["dataclass-field"], "parent_path": "ludwig.modules.optimization_modules.BaseOptimizerConfig", "has_contents": true, "docstring": "Name corresponding to an optimizer `ludwig.modules.optimization_modules.optimizer_registry`.\nTechnically mutable, but attempting to load a derived optimizer with `type` set to a mismatched value will\nresult in a `ValidationError`.", "docstring_sections": [{"type": "markdown", "value": "Name corresponding to an optimizer `ludwig.modules.optimization_modules.optimizer_registry`.\nTechnically mutable, but attempting to load a derived optimizer with `type` set to a mismatched value will\nresult in a `ValidationError`."}], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "str"}}, "attributes": ["ludwig.modules.optimization_modules.BaseOptimizerConfig.torch_type", "ludwig.modules.optimization_modules.BaseOptimizerConfig.type"], "methods": ["ludwig.modules.optimization_modules.BaseOptimizerConfig.__eq__", "ludwig.modules.optimization_modules.BaseOptimizerConfig.__init__", "ludwig.modules.optimization_modules.BaseOptimizerConfig.__repr__", "ludwig.modules.optimization_modules.BaseOptimizerConfig.validate_type"], "functions": [], "modules": [], "classes": ["ludwig.modules.optimization_modules.BaseOptimizerConfig.Schema"], "bases": ["ludwig.utils.marshmallow_schema_utils.BaseMarshmallowConfig"]}]}, "RMSPropOptimizerConfig": {"loading_errors": [], "parsing_errors": {}, "objects": [{"name": "RMSPropOptimizerConfig", "path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig", "category": "class", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["dataclass"], "parent_path": "ludwig.modules.optimization_modules", "has_contents": true, "docstring": "Parameters for rmsprop optimization.", "docstring_sections": [{"type": "markdown", "value": "Parameters for rmsprop optimization."}], "source": {"code": "class RMSPropOptimizerConfig(BaseOptimizerConfig):\n    \"\"\"Parameters for rmsprop optimization.\"\"\"\n\n    torch_type: ClassVar[torch.optim.Optimizer] = torch.optim.RMSprop\n    \"Points to `torch.optim.RMSprop`.\"\n\n    type: str = \"rmsprop\"\n    \"\"\"Must be 'rmsprop' - corresponds to name in `ludwig.modules.optimization_modules.optimizer_registry`\n       (default: 'rmsprop')\"\"\"\n\n    weight_decay: float = NonNegativeFloat(default=0.9)\n    \"(default: 0.9)\"\n\n    momentum: float = NonNegativeFloat(default=0.0)\n    \"(default: 0.0)\"\n\n    eps: float = NonNegativeFloat(default=1e-10)\n    \"(default: 1e-10)\"\n\n    centered: bool = False\n    \"(default: False)\"\n\n    # Defaults taken from https://pytorch.org/docs/stable/generated/torch.optim.RMSprop.html#torch.optim.RMSprop:\n    lr: float = FloatRange(default=1e-2, min=0.0, max=1.0)\n    alpha: float = NonNegativeFloat(default=0.99)\n", "line_start": 225}, "children": {"ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema": {"name": "Schema", "path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema", "category": "class", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["marshmallow-model"], "parent_path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig", "has_contents": true, "docstring": "", "docstring_sections": [], "source": {}, "children": {"ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema.Meta": {"name": "Meta", "path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema.Meta", "category": "class", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": [], "parent_path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema", "has_contents": true, "docstring": "Sub-class specifying meta information for Marshmallow.\n\nCurrently only sets `unknown` flag to `EXCLUDE`. This is done to mirror Ludwig behavior: unknown properties are\nexcluded from `load` calls so that the marshmallow_dataclass package can be used but\n`get_custom_schema_from_marshmallow_class` will manually set a marshmallow schema's `additionalProperties` attr.\nto True so that JSON objects with extra properties do not raise errors; as a result properties are picked and\nfilled in as necessary.", "docstring_sections": [{"type": "markdown", "value": "Sub-class specifying meta information for Marshmallow.\n\nCurrently only sets `unknown` flag to `EXCLUDE`. This is done to mirror Ludwig behavior: unknown properties are\nexcluded from `load` calls so that the marshmallow_dataclass package can be used but\n`get_custom_schema_from_marshmallow_class` will manually set a marshmallow schema's `additionalProperties` attr.\nto True so that JSON objects with extra properties do not raise errors; as a result properties are picked and\nfilled in as necessary."}], "source": {"code": "    class Meta:\n        \"\"\"Sub-class specifying meta information for Marshmallow.\n\n        Currently only sets `unknown` flag to `EXCLUDE`. This is done to mirror Ludwig behavior: unknown properties are\n        excluded from `load` calls so that the marshmallow_dataclass package can be used but\n        `get_custom_schema_from_marshmallow_class` will manually set a marshmallow schema's `additionalProperties` attr.\n        to True so that JSON objects with extra properties do not raise errors; as a result properties are picked and\n        filled in as necessary.\n        \"\"\"\n\n        unknown = EXCLUDE\n        \"Flag that sets marshmallow `load` calls to ignore unknown properties passed as a parameter.\"\n", "line_start": 49}, "children": {"ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema.Meta.unknown": {"name": "unknown", "path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema.Meta.unknown", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": [], "parent_path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema.Meta", "has_contents": true, "docstring": "Flag that sets marshmallow `load` calls to ignore unknown properties passed as a parameter.", "docstring_sections": [{"type": "markdown", "value": "Flag that sets marshmallow `load` calls to ignore unknown properties passed as a parameter."}], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": ""}}, "attributes": ["ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema.Meta.unknown"], "methods": [], "functions": [], "modules": [], "classes": [], "bases": ["object"]}, "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema._declared_fields": {"name": "_declared_fields", "path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema._declared_fields", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["private"], "parent_path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": ""}, "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema._hooks": {"name": "_hooks", "path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema._hooks", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["private"], "parent_path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": ""}, "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema.opts": {"name": "opts", "path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema.opts", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": [], "parent_path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": ""}, "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema.validate_type": {"name": "validate_type", "path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema.validate_type", "category": "method", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": [], "parent_path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema", "has_contents": true, "docstring": "Workaround to enforce immutable `type` in defined optimizer classes.\n\n:param data: Any-typed object that should be a string correctly identifying the optimizer type.", "docstring_sections": [{"type": "markdown", "value": "Workaround to enforce immutable `type` in defined optimizer classes."}, {"type": "parameters", "value": [{"description": "Any-typed object that should be a string correctly identifying the optimizer type.", "annotation": "", "name": "data", "kind": "POSITIONAL_OR_KEYWORD", "default": "", "is_optional": false, "is_required": true, "is_args": false, "is_kwargs": false}]}], "source": {"code": "    @validates(\"type\")\n    def validate_type(self, data, **kwargs):\n        \"\"\"Workaround to enforce immutable `type` in defined optimizer classes.\n\n        :param data: Any-typed object that should be a string correctly identifying the optimizer type.\n        \"\"\"\n        if not isinstance(data, str):\n            raise ValidationError(\n                f\"{self.__class__.__name__} expects type of field `type` to be `str`, instead received '{data}'\"\n            )\n        default = self.declared_fields[\"type\"].dump_default\n        if default is not missing and data != default:\n            # Handle aliases:\n            if optimizer_registry[default] == optimizer_registry[data]:\n                return\n            raise ValidationError(\n                f\"{self.__class__.__name__} expects value of field `type` to be '{default}', instead received '{data}'\"\n            )\n", "line_start": 62}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "signature": {"parameters": [{"kind": "POSITIONAL_OR_KEYWORD", "name": "self"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "data"}, {"kind": "VAR_KEYWORD", "name": "kwargs"}]}}, "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema.type": {"name": "type", "path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema.type", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "String"}, "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema.weight_decay": {"name": "weight_decay", "path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema.weight_decay", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "Float"}, "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema.momentum": {"name": "momentum", "path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema.momentum", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "Float"}, "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema.eps": {"name": "eps", "path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema.eps", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "Float"}, "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema.centered": {"name": "centered", "path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema.centered", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "Boolean"}, "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema.lr": {"name": "lr", "path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema.lr", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "Float"}, "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema.alpha": {"name": "alpha", "path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema.alpha", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "Float"}}, "attributes": ["ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema._declared_fields", "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema._hooks", "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema.opts", "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema.type", "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema.weight_decay", "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema.momentum", "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema.eps", "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema.centered", "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema.lr", "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema.alpha"], "methods": ["ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema.validate_type"], "functions": [], "modules": [], "classes": ["ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema.Meta"], "bases": ["marshmallow_dataclass._base_schema.<locals>.BaseSchema"]}, "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.__eq__": {"name": "__eq__", "path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.__eq__", "category": "method", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["special"], "parent_path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig", "has_contents": false, "docstring": "", "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "signature": {"parameters": [{"kind": "POSITIONAL_OR_KEYWORD", "name": "self"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "other"}]}}, "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.__init__": {"name": "__init__", "path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.__init__", "category": "method", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["special"], "parent_path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig", "has_contents": false, "docstring": "", "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "signature": {"parameters": [{"kind": "POSITIONAL_OR_KEYWORD", "name": "self"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "type", "annotation": "str", "default": "'rmsprop'"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "weight_decay", "annotation": "float", "default": "0.9"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "momentum", "annotation": "float", "default": "0.0"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "eps", "annotation": "float", "default": "1e-10"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "centered", "annotation": "bool", "default": "False"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "lr", "annotation": "float", "default": "0.01"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "alpha", "annotation": "float", "default": "0.99"}], "return_annotation": "None"}}, "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.__repr__": {"name": "__repr__", "path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.__repr__", "category": "method", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["special"], "parent_path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig", "has_contents": false, "docstring": "", "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "signature": {"parameters": [{"kind": "POSITIONAL_OR_KEYWORD", "name": "self"}]}}, "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.alpha": {"name": "alpha", "path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.alpha", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["dataclass-field"], "parent_path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "float"}, "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.centered": {"name": "centered", "path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.centered", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["dataclass-field"], "parent_path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig", "has_contents": true, "docstring": "(default: False)", "docstring_sections": [{"type": "markdown", "value": "(default: False)"}], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "bool"}, "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.eps": {"name": "eps", "path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.eps", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["dataclass-field"], "parent_path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig", "has_contents": true, "docstring": "(default: 1e-10)", "docstring_sections": [{"type": "markdown", "value": "(default: 1e-10)"}], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "float"}, "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.lr": {"name": "lr", "path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.lr", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["dataclass-field"], "parent_path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "float"}, "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.momentum": {"name": "momentum", "path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.momentum", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["dataclass-field"], "parent_path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig", "has_contents": true, "docstring": "(default: 0.0)", "docstring_sections": [{"type": "markdown", "value": "(default: 0.0)"}], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "float"}, "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.torch_type": {"name": "torch_type", "path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.torch_type", "category": "class", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": [], "parent_path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig", "has_contents": true, "docstring": "Implements RMSprop algorithm.\n\n.. math::\n   \\begin{aligned}\n        &\\rule{110mm}{0.4pt}                                                                 \\\\\n        &\\textbf{input}      : \\alpha \\text{ (alpha)},\\: \\gamma \\text{ (lr)},\n            \\: \\theta_0 \\text{ (params)}, \\: f(\\theta) \\text{ (objective)}                   \\\\\n        &\\hspace{13mm}   \\lambda \\text{ (weight decay)},\\: \\mu \\text{ (momentum)},\\: centered\\\\\n        &\\textbf{initialize} : v_0 \\leftarrow 0 \\text{ (square average)}, \\:\n            \\textbf{b}_0 \\leftarrow 0 \\text{ (buffer)}, \\: g^{ave}_0 \\leftarrow 0     \\\\[-1.ex]\n        &\\rule{110mm}{0.4pt}                                                                 \\\\\n        &\\textbf{for} \\: t=1 \\: \\textbf{to} \\: \\ldots \\: \\textbf{do}                         \\\\\n        &\\hspace{5mm}g_t           \\leftarrow   \\nabla_{\\theta} f_t (\\theta_{t-1})           \\\\\n        &\\hspace{5mm}if \\: \\lambda \\neq 0                                                    \\\\\n        &\\hspace{10mm} g_t \\leftarrow g_t + \\lambda  \\theta_{t-1}                            \\\\\n        &\\hspace{5mm}v_t           \\leftarrow   \\alpha v_{t-1} + (1 - \\alpha) g^2_t\n            \\hspace{8mm}                                                                     \\\\\n        &\\hspace{5mm} \\tilde{v_t} \\leftarrow v_t                                             \\\\\n        &\\hspace{5mm}if \\: centered                                                          \\\\\n        &\\hspace{10mm} g^{ave}_t \\leftarrow g^{ave}_{t-1} \\alpha + (1-\\alpha) g_t            \\\\\n        &\\hspace{10mm} \\tilde{v_t} \\leftarrow \\tilde{v_t} -  \\big(g^{ave}_{t} \\big)^2        \\\\\n        &\\hspace{5mm}if \\: \\mu > 0                                                           \\\\\n        &\\hspace{10mm} \\textbf{b}_t\\leftarrow \\mu \\textbf{b}_{t-1} +\n            g_t/ \\big(\\sqrt{\\tilde{v_t}} +  \\epsilon \\big)                                   \\\\\n        &\\hspace{10mm} \\theta_t \\leftarrow \\theta_{t-1} - \\gamma \\textbf{b}_t                \\\\\n        &\\hspace{5mm} else                                                                   \\\\\n        &\\hspace{10mm}\\theta_t      \\leftarrow   \\theta_{t-1} -\n            \\gamma  g_t/ \\big(\\sqrt{\\tilde{v_t}} + \\epsilon \\big)  \\hspace{3mm}              \\\\\n        &\\rule{110mm}{0.4pt}                                                          \\\\[-1.ex]\n        &\\bf{return} \\:  \\theta_t                                                     \\\\[-1.ex]\n        &\\rule{110mm}{0.4pt}                                                          \\\\[-1.ex]\n   \\end{aligned}\n\nFor further details regarding the algorithm we refer to\n`lecture notes <https://www.cs.toronto.edu/~tijmen/csc321/slides/lecture_slides_lec6.pdf>`_ by G. Hinton.\nand centered version `Generating Sequences\nWith Recurrent Neural Networks <https://arxiv.org/pdf/1308.0850v5.pdf>`_.\nThe implementation here takes the square root of the gradient average before\nadding epsilon (note that TensorFlow interchanges these two operations). The effective\nlearning rate is thus :math:`\\gamma/(\\sqrt{v} + \\epsilon)` where :math:`\\gamma`\nis the scheduled learning rate and :math:`v` is the weighted moving average\nof the squared gradient.\n\nArgs:\n    params (iterable): iterable of parameters to optimize or dicts defining\n        parameter groups\n    lr (float, optional): learning rate (default: 1e-2)\n    momentum (float, optional): momentum factor (default: 0)\n    alpha (float, optional): smoothing constant (default: 0.99)\n    eps (float, optional): term added to the denominator to improve\n        numerical stability (default: 1e-8)\n    centered (bool, optional) : if ``True``, compute the centered RMSProp,\n        the gradient is normalized by an estimation of its variance\n    weight_decay (float, optional): weight decay (L2 penalty) (default: 0)", "docstring_sections": [{"type": "markdown", "value": "Implements RMSprop algorithm.\n\n.. math::\n   \\begin{aligned}\n        &\\rule{110mm}{0.4pt}                                                                 \\\\\n        &\\textbf{input}      : \\alpha \\text{ (alpha)},\\: \\gamma \\text{ (lr)},\n            \\: \\theta_0 \\text{ (params)}, \\: f(\\theta) \\text{ (objective)}                   \\\\\n        &\\hspace{13mm}   \\lambda \\text{ (weight decay)},\\: \\mu \\text{ (momentum)},\\: centered\\\\\n        &\\textbf{initialize} : v_0 \\leftarrow 0 \\text{ (square average)}, \\:\n            \\textbf{b}_0 \\leftarrow 0 \\text{ (buffer)}, \\: g^{ave}_0 \\leftarrow 0     \\\\[-1.ex]\n        &\\rule{110mm}{0.4pt}                                                                 \\\\\n        &\\textbf{for} \\: t=1 \\: \\textbf{to} \\: \\ldots \\: \\textbf{do}                         \\\\\n        &\\hspace{5mm}g_t           \\leftarrow   \\nabla_{\\theta} f_t (\\theta_{t-1})           \\\\\n        &\\hspace{5mm}if \\: \\lambda \\neq 0                                                    \\\\\n        &\\hspace{10mm} g_t \\leftarrow g_t + \\lambda  \\theta_{t-1}                            \\\\\n        &\\hspace{5mm}v_t           \\leftarrow   \\alpha v_{t-1} + (1 - \\alpha) g^2_t\n            \\hspace{8mm}                                                                     \\\\\n        &\\hspace{5mm} \\tilde{v_t} \\leftarrow v_t                                             \\\\\n        &\\hspace{5mm}if \\: centered                                                          \\\\\n        &\\hspace{10mm} g^{ave}_t \\leftarrow g^{ave}_{t-1} \\alpha + (1-\\alpha) g_t            \\\\\n        &\\hspace{10mm} \\tilde{v_t} \\leftarrow \\tilde{v_t} -  \\big(g^{ave}_{t} \\big)^2        \\\\\n        &\\hspace{5mm}if \\: \\mu > 0                                                           \\\\\n        &\\hspace{10mm} \\textbf{b}_t\\leftarrow \\mu \\textbf{b}_{t-1} +\n            g_t/ \\big(\\sqrt{\\tilde{v_t}} +  \\epsilon \\big)                                   \\\\\n        &\\hspace{10mm} \\theta_t \\leftarrow \\theta_{t-1} - \\gamma \\textbf{b}_t                \\\\\n        &\\hspace{5mm} else                                                                   \\\\\n        &\\hspace{10mm}\\theta_t      \\leftarrow   \\theta_{t-1} -\n            \\gamma  g_t/ \\big(\\sqrt{\\tilde{v_t}} + \\epsilon \\big)  \\hspace{3mm}              \\\\\n        &\\rule{110mm}{0.4pt}                                                          \\\\[-1.ex]\n        &\\bf{return} \\:  \\theta_t                                                     \\\\[-1.ex]\n        &\\rule{110mm}{0.4pt}                                                          \\\\[-1.ex]\n   \\end{aligned}\n\nFor further details regarding the algorithm we refer to\n`lecture notes <https://www.cs.toronto.edu/~tijmen/csc321/slides/lecture_slides_lec6.pdf>`_ by G. Hinton.\nand centered version `Generating Sequences\nWith Recurrent Neural Networks <https://arxiv.org/pdf/1308.0850v5.pdf>`_.\nThe implementation here takes the square root of the gradient average before\nadding epsilon (note that TensorFlow interchanges these two operations). The effective\nlearning rate is thus :math:`\\gamma/(\\sqrt{v} + \\epsilon)` where :math:`\\gamma`\nis the scheduled learning rate and :math:`v` is the weighted moving average\nof the squared gradient.\n\nArgs:\n    params (iterable): iterable of parameters to optimize or dicts defining\n        parameter groups\n    lr (float, optional): learning rate (default: 1e-2)\n    momentum (float, optional): momentum factor (default: 0)\n    alpha (float, optional): smoothing constant (default: 0.99)\n    eps (float, optional): term added to the denominator to improve\n        numerical stability (default: 1e-8)\n    centered (bool, optional) : if ``True``, compute the centered RMSProp,\n        the gradient is normalized by an estimation of its variance\n    weight_decay (float, optional): weight decay (L2 penalty) (default: 0)"}], "source": {"code": "class RMSprop(Optimizer):\n    r\"\"\"Implements RMSprop algorithm.\n\n    .. math::\n       \\begin{aligned}\n            &\\rule{110mm}{0.4pt}                                                                 \\\\\n            &\\textbf{input}      : \\alpha \\text{ (alpha)},\\: \\gamma \\text{ (lr)},\n                \\: \\theta_0 \\text{ (params)}, \\: f(\\theta) \\text{ (objective)}                   \\\\\n            &\\hspace{13mm}   \\lambda \\text{ (weight decay)},\\: \\mu \\text{ (momentum)},\\: centered\\\\\n            &\\textbf{initialize} : v_0 \\leftarrow 0 \\text{ (square average)}, \\:\n                \\textbf{b}_0 \\leftarrow 0 \\text{ (buffer)}, \\: g^{ave}_0 \\leftarrow 0     \\\\[-1.ex]\n            &\\rule{110mm}{0.4pt}                                                                 \\\\\n            &\\textbf{for} \\: t=1 \\: \\textbf{to} \\: \\ldots \\: \\textbf{do}                         \\\\\n            &\\hspace{5mm}g_t           \\leftarrow   \\nabla_{\\theta} f_t (\\theta_{t-1})           \\\\\n            &\\hspace{5mm}if \\: \\lambda \\neq 0                                                    \\\\\n            &\\hspace{10mm} g_t \\leftarrow g_t + \\lambda  \\theta_{t-1}                            \\\\\n            &\\hspace{5mm}v_t           \\leftarrow   \\alpha v_{t-1} + (1 - \\alpha) g^2_t\n                \\hspace{8mm}                                                                     \\\\\n            &\\hspace{5mm} \\tilde{v_t} \\leftarrow v_t                                             \\\\\n            &\\hspace{5mm}if \\: centered                                                          \\\\\n            &\\hspace{10mm} g^{ave}_t \\leftarrow g^{ave}_{t-1} \\alpha + (1-\\alpha) g_t            \\\\\n            &\\hspace{10mm} \\tilde{v_t} \\leftarrow \\tilde{v_t} -  \\big(g^{ave}_{t} \\big)^2        \\\\\n            &\\hspace{5mm}if \\: \\mu > 0                                                           \\\\\n            &\\hspace{10mm} \\textbf{b}_t\\leftarrow \\mu \\textbf{b}_{t-1} +\n                g_t/ \\big(\\sqrt{\\tilde{v_t}} +  \\epsilon \\big)                                   \\\\\n            &\\hspace{10mm} \\theta_t \\leftarrow \\theta_{t-1} - \\gamma \\textbf{b}_t                \\\\\n            &\\hspace{5mm} else                                                                   \\\\\n            &\\hspace{10mm}\\theta_t      \\leftarrow   \\theta_{t-1} -\n                \\gamma  g_t/ \\big(\\sqrt{\\tilde{v_t}} + \\epsilon \\big)  \\hspace{3mm}              \\\\\n            &\\rule{110mm}{0.4pt}                                                          \\\\[-1.ex]\n            &\\bf{return} \\:  \\theta_t                                                     \\\\[-1.ex]\n            &\\rule{110mm}{0.4pt}                                                          \\\\[-1.ex]\n       \\end{aligned}\n\n    For further details regarding the algorithm we refer to\n    `lecture notes <https://www.cs.toronto.edu/~tijmen/csc321/slides/lecture_slides_lec6.pdf>`_ by G. Hinton.\n    and centered version `Generating Sequences\n    With Recurrent Neural Networks <https://arxiv.org/pdf/1308.0850v5.pdf>`_.\n    The implementation here takes the square root of the gradient average before\n    adding epsilon (note that TensorFlow interchanges these two operations). The effective\n    learning rate is thus :math:`\\gamma/(\\sqrt{v} + \\epsilon)` where :math:`\\gamma`\n    is the scheduled learning rate and :math:`v` is the weighted moving average\n    of the squared gradient.\n\n    Args:\n        params (iterable): iterable of parameters to optimize or dicts defining\n            parameter groups\n        lr (float, optional): learning rate (default: 1e-2)\n        momentum (float, optional): momentum factor (default: 0)\n        alpha (float, optional): smoothing constant (default: 0.99)\n        eps (float, optional): term added to the denominator to improve\n            numerical stability (default: 1e-8)\n        centered (bool, optional) : if ``True``, compute the centered RMSProp,\n            the gradient is normalized by an estimation of its variance\n        weight_decay (float, optional): weight decay (L2 penalty) (default: 0)\n\n    \"\"\"\n\n    def __init__(self, params, lr=1e-2, alpha=0.99, eps=1e-8, weight_decay=0, momentum=0, centered=False):\n        if not 0.0 <= lr:\n            raise ValueError(\"Invalid learning rate: {}\".format(lr))\n        if not 0.0 <= eps:\n            raise ValueError(\"Invalid epsilon value: {}\".format(eps))\n        if not 0.0 <= momentum:\n            raise ValueError(\"Invalid momentum value: {}\".format(momentum))\n        if not 0.0 <= weight_decay:\n            raise ValueError(\"Invalid weight_decay value: {}\".format(weight_decay))\n        if not 0.0 <= alpha:\n            raise ValueError(\"Invalid alpha value: {}\".format(alpha))\n\n        defaults = dict(lr=lr, momentum=momentum, alpha=alpha, eps=eps, centered=centered, weight_decay=weight_decay)\n        super(RMSprop, self).__init__(params, defaults)\n\n    def __setstate__(self, state):\n        super(RMSprop, self).__setstate__(state)\n        for group in self.param_groups:\n            group.setdefault('momentum', 0)\n            group.setdefault('centered', False)\n\n    @torch.no_grad()\n    def step(self, closure=None):\n        \"\"\"Performs a single optimization step.\n\n        Args:\n            closure (callable, optional): A closure that reevaluates the model\n                and returns the loss.\n        \"\"\"\n        loss = None\n        if closure is not None:\n            with torch.enable_grad():\n                loss = closure()\n\n        for group in self.param_groups:\n            params_with_grad = []\n            grads = []\n            square_avgs = []\n            grad_avgs = []\n            momentum_buffer_list = []\n\n            for p in group['params']:\n                if p.grad is None:\n                    continue\n                params_with_grad.append(p)\n\n                if p.grad.is_sparse:\n                    raise RuntimeError('RMSprop does not support sparse gradients')\n                grads.append(p.grad)\n\n                state = self.state[p]\n\n                # State initialization\n                if len(state) == 0:\n                    state['step'] = 0\n                    state['square_avg'] = torch.zeros_like(p, memory_format=torch.preserve_format)\n                    if group['momentum'] > 0:\n                        state['momentum_buffer'] = torch.zeros_like(p, memory_format=torch.preserve_format)\n                    if group['centered']:\n                        state['grad_avg'] = torch.zeros_like(p, memory_format=torch.preserve_format)\n\n                square_avgs.append(state['square_avg'])\n\n                if group['momentum'] > 0:\n                    momentum_buffer_list.append(state['momentum_buffer'])\n                if group['centered']:\n                    grad_avgs.append(state['grad_avg'])\n\n                state['step'] += 1\n\n\n            F.rmsprop(params_with_grad,\n                      grads,\n                      square_avgs,\n                      grad_avgs,\n                      momentum_buffer_list,\n                      lr=group['lr'],\n                      alpha=group['alpha'],\n                      eps=group['eps'],\n                      weight_decay=group['weight_decay'],\n                      momentum=group['momentum'],\n                      centered=group['centered'])\n\n        return loss\n", "line_start": 6}, "children": {"ludwig.modules.optimization_modules.RMSPropOptimizerConfig.torch_type.__init__": {"name": "__init__", "path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.torch_type.__init__", "category": "method", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["special"], "parent_path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.torch_type", "has_contents": false, "docstring": "", "docstring_sections": [], "source": {"code": "    def __init__(self, params, lr=1e-2, alpha=0.99, eps=1e-8, weight_decay=0, momentum=0, centered=False):\n        if not 0.0 <= lr:\n            raise ValueError(\"Invalid learning rate: {}\".format(lr))\n        if not 0.0 <= eps:\n            raise ValueError(\"Invalid epsilon value: {}\".format(eps))\n        if not 0.0 <= momentum:\n            raise ValueError(\"Invalid momentum value: {}\".format(momentum))\n        if not 0.0 <= weight_decay:\n            raise ValueError(\"Invalid weight_decay value: {}\".format(weight_decay))\n        if not 0.0 <= alpha:\n            raise ValueError(\"Invalid alpha value: {}\".format(alpha))\n\n        defaults = dict(lr=lr, momentum=momentum, alpha=alpha, eps=eps, centered=centered, weight_decay=weight_decay)\n        super(RMSprop, self).__init__(params, defaults)\n", "line_start": 64}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "signature": {"parameters": [{"kind": "POSITIONAL_OR_KEYWORD", "name": "self"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "params"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "lr", "default": "0.01"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "alpha", "default": "0.99"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "eps", "default": "1e-08"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "weight_decay", "default": "0"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "momentum", "default": "0"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "centered", "default": "False"}]}}, "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.torch_type.__setstate__": {"name": "__setstate__", "path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.torch_type.__setstate__", "category": "method", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["special"], "parent_path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.torch_type", "has_contents": false, "docstring": "", "docstring_sections": [], "source": {"code": "    def __setstate__(self, state):\n        super(RMSprop, self).__setstate__(state)\n        for group in self.param_groups:\n            group.setdefault('momentum', 0)\n            group.setdefault('centered', False)\n", "line_start": 79}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "signature": {"parameters": [{"kind": "POSITIONAL_OR_KEYWORD", "name": "self"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "state"}]}}, "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.torch_type.step": {"name": "step", "path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.torch_type.step", "category": "method", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": [], "parent_path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.torch_type", "has_contents": true, "docstring": "Performs a single optimization step.\n\nArgs:\n    closure (callable, optional): A closure that reevaluates the model\n        and returns the loss.", "docstring_sections": [{"type": "markdown", "value": "Performs a single optimization step.\n\nArgs:\n    closure (callable, optional): A closure that reevaluates the model\n        and returns the loss."}], "source": {"code": "    @torch.no_grad()\n    def step(self, closure=None):\n        \"\"\"Performs a single optimization step.\n\n        Args:\n            closure (callable, optional): A closure that reevaluates the model\n                and returns the loss.\n        \"\"\"\n        loss = None\n        if closure is not None:\n            with torch.enable_grad():\n                loss = closure()\n\n        for group in self.param_groups:\n            params_with_grad = []\n            grads = []\n            square_avgs = []\n            grad_avgs = []\n            momentum_buffer_list = []\n\n            for p in group['params']:\n                if p.grad is None:\n                    continue\n                params_with_grad.append(p)\n\n                if p.grad.is_sparse:\n                    raise RuntimeError('RMSprop does not support sparse gradients')\n                grads.append(p.grad)\n\n                state = self.state[p]\n\n                # State initialization\n                if len(state) == 0:\n                    state['step'] = 0\n                    state['square_avg'] = torch.zeros_like(p, memory_format=torch.preserve_format)\n                    if group['momentum'] > 0:\n                        state['momentum_buffer'] = torch.zeros_like(p, memory_format=torch.preserve_format)\n                    if group['centered']:\n                        state['grad_avg'] = torch.zeros_like(p, memory_format=torch.preserve_format)\n\n                square_avgs.append(state['square_avg'])\n\n                if group['momentum'] > 0:\n                    momentum_buffer_list.append(state['momentum_buffer'])\n                if group['centered']:\n                    grad_avgs.append(state['grad_avg'])\n\n                state['step'] += 1\n\n\n            F.rmsprop(params_with_grad,\n                      grads,\n                      square_avgs,\n                      grad_avgs,\n                      momentum_buffer_list,\n                      lr=group['lr'],\n                      alpha=group['alpha'],\n                      eps=group['eps'],\n                      weight_decay=group['weight_decay'],\n                      momentum=group['momentum'],\n                      centered=group['centered'])\n\n        return loss\n", "line_start": 85}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "signature": {"parameters": [{"kind": "POSITIONAL_OR_KEYWORD", "name": "self"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "closure", "default": "None"}]}}}, "attributes": [], "methods": ["ludwig.modules.optimization_modules.RMSPropOptimizerConfig.torch_type.__init__", "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.torch_type.__setstate__", "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.torch_type.step"], "functions": [], "modules": [], "classes": [], "bases": ["torch.optim.optimizer.Optimizer"]}, "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.type": {"name": "type", "path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.type", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": [], "parent_path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig", "has_contents": true, "docstring": "Must be 'rmsprop' - corresponds to name in `ludwig.modules.optimization_modules.optimizer_registry`\n(default: 'rmsprop')", "docstring_sections": [{"type": "markdown", "value": "Must be 'rmsprop' - corresponds to name in `ludwig.modules.optimization_modules.optimizer_registry`\n(default: 'rmsprop')"}], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "str"}, "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.weight_decay": {"name": "weight_decay", "path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.weight_decay", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["dataclass-field"], "parent_path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig", "has_contents": true, "docstring": "(default: 0.9)", "docstring_sections": [{"type": "markdown", "value": "(default: 0.9)"}], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "float"}}, "attributes": ["ludwig.modules.optimization_modules.RMSPropOptimizerConfig.type", "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.weight_decay", "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.momentum", "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.eps", "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.centered", "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.lr", "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.alpha"], "methods": ["ludwig.modules.optimization_modules.RMSPropOptimizerConfig.__eq__", "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.__init__", "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.__repr__"], "functions": [], "modules": [], "classes": ["ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema", "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.torch_type"], "bases": ["ludwig.modules.optimization_modules.BaseOptimizerConfig"]}]}, "TabNetCombinerConfig": {"loading_errors": [], "parsing_errors": {}, "objects": [{"name": "TabNetCombinerConfig", "path": "ludwig.combiners.combiners.TabNetCombinerConfig", "category": "class", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["dataclass"], "parent_path": "ludwig.combiners.combiners", "has_contents": true, "docstring": "Parameters for tabnet combiner.", "docstring_sections": [{"type": "markdown", "value": "Parameters for tabnet combiner."}], "source": {"code": "class TabNetCombinerConfig(BaseCombinerConfig):\n    \"\"\"Parameters for tabnet combiner.\"\"\"\n\n    size: int = schema.PositiveInteger(default=32)\n    \"\"\"`N_a` in the paper (default: 32).\"\"\"\n\n    output_size: int = schema.PositiveInteger(default=32)\n    \"\"\"Output size of a fully connected layer. `N_d` in the paper (default: 32).\"\"\"\n\n    num_steps: int = schema.NonNegativeInteger(default=1)\n    \"\"\"Number of steps / repetitions of the the attentive transformer and feature transformer computations. `N_steps` in\n       the paper (default: 1).\"\"\"\n\n    num_total_blocks: int = schema.NonNegativeInteger(default=4)\n    \"\"\"Total number of feature transformer block at each step (default: 4).\"\"\"\n\n    num_shared_blocks: int = schema.NonNegativeInteger(default=2)\n    \"\"\"Number of shared feature transformer blocks across the steps (default: 2).\"\"\"\n\n    relaxation_factor: float = 1.5\n    \"\"\"Factor that influences how many times a feature should be used across the steps of computation. a value of 1\n       implies it each feature should be use once, a higher value allows for multiple usages. `gamma` in the paper\n       (default: 1.5).\"\"\"\n\n    bn_epsilon: float = 1e-3\n    \"\"\"Epsilon to be added to the batch norm denominator (default: 1e-3).\"\"\"\n\n    bn_momentum: float = 0.7\n    \"\"\"Momentum of the batch norm. `m_B` in the paper (default: 0.7).\"\"\"\n\n    bn_virtual_bs: Optional[int] = schema.PositiveInteger()\n    \"\"\"Size of the virtual batch size used by ghost batch norm. If null, regular batch norm is used instead. `B_v` from\n       the paper (default: None).\"\"\"\n\n    sparsity: float = 1e-5\n    \"\"\"Multiplier of the sparsity inducing loss. `lambda_sparse` in the paper (default: 1e-5).\"\"\"\n\n    dropout: float = schema.FloatRange(default=0.0, min=0, max=1)\n    \"\"\"Dropout rate for the transformer block (default: 0.0).\"\"\"\n", "line_start": 455}, "children": {"ludwig.combiners.combiners.TabNetCombinerConfig.Schema": {"name": "Schema", "path": "ludwig.combiners.combiners.TabNetCombinerConfig.Schema", "category": "class", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["marshmallow-model"], "parent_path": "ludwig.combiners.combiners.TabNetCombinerConfig", "has_contents": true, "docstring": "", "docstring_sections": [], "source": {}, "children": {"ludwig.combiners.combiners.TabNetCombinerConfig.Schema.Meta": {"name": "Meta", "path": "ludwig.combiners.combiners.TabNetCombinerConfig.Schema.Meta", "category": "class", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": [], "parent_path": "ludwig.combiners.combiners.TabNetCombinerConfig.Schema", "has_contents": true, "docstring": "Sub-class specifying meta information for Marshmallow.\n\nCurrently only sets `unknown` flag to `EXCLUDE`. This is done to mirror Ludwig behavior: unknown properties are\nexcluded from `load` calls so that the marshmallow_dataclass package can be used but\n`get_custom_schema_from_marshmallow_class` will manually set a marshmallow schema's `additionalProperties` attr.\nto True so that JSON objects with extra properties do not raise errors; as a result properties are picked and\nfilled in as necessary.", "docstring_sections": [{"type": "markdown", "value": "Sub-class specifying meta information for Marshmallow.\n\nCurrently only sets `unknown` flag to `EXCLUDE`. This is done to mirror Ludwig behavior: unknown properties are\nexcluded from `load` calls so that the marshmallow_dataclass package can be used but\n`get_custom_schema_from_marshmallow_class` will manually set a marshmallow schema's `additionalProperties` attr.\nto True so that JSON objects with extra properties do not raise errors; as a result properties are picked and\nfilled in as necessary."}], "source": {"code": "    class Meta:\n        \"\"\"Sub-class specifying meta information for Marshmallow.\n\n        Currently only sets `unknown` flag to `EXCLUDE`. This is done to mirror Ludwig behavior: unknown properties are\n        excluded from `load` calls so that the marshmallow_dataclass package can be used but\n        `get_custom_schema_from_marshmallow_class` will manually set a marshmallow schema's `additionalProperties` attr.\n        to True so that JSON objects with extra properties do not raise errors; as a result properties are picked and\n        filled in as necessary.\n        \"\"\"\n\n        unknown = EXCLUDE\n        \"Flag that sets marshmallow `load` calls to ignore unknown properties passed as a parameter.\"\n", "line_start": 49}, "children": {"ludwig.combiners.combiners.TabNetCombinerConfig.Schema.Meta.unknown": {"name": "unknown", "path": "ludwig.combiners.combiners.TabNetCombinerConfig.Schema.Meta.unknown", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": [], "parent_path": "ludwig.combiners.combiners.TabNetCombinerConfig.Schema.Meta", "has_contents": true, "docstring": "Flag that sets marshmallow `load` calls to ignore unknown properties passed as a parameter.", "docstring_sections": [{"type": "markdown", "value": "Flag that sets marshmallow `load` calls to ignore unknown properties passed as a parameter."}], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": ""}}, "attributes": ["ludwig.combiners.combiners.TabNetCombinerConfig.Schema.Meta.unknown"], "methods": [], "functions": [], "modules": [], "classes": [], "bases": ["object"]}, "ludwig.combiners.combiners.TabNetCombinerConfig.Schema._declared_fields": {"name": "_declared_fields", "path": "ludwig.combiners.combiners.TabNetCombinerConfig.Schema._declared_fields", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["private"], "parent_path": "ludwig.combiners.combiners.TabNetCombinerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": ""}, "ludwig.combiners.combiners.TabNetCombinerConfig.Schema._hooks": {"name": "_hooks", "path": "ludwig.combiners.combiners.TabNetCombinerConfig.Schema._hooks", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["private"], "parent_path": "ludwig.combiners.combiners.TabNetCombinerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": ""}, "ludwig.combiners.combiners.TabNetCombinerConfig.Schema.opts": {"name": "opts", "path": "ludwig.combiners.combiners.TabNetCombinerConfig.Schema.opts", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": [], "parent_path": "ludwig.combiners.combiners.TabNetCombinerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": ""}, "ludwig.combiners.combiners.TabNetCombinerConfig.Schema.size": {"name": "size", "path": "ludwig.combiners.combiners.TabNetCombinerConfig.Schema.size", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.combiners.combiners.TabNetCombinerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "Integer"}, "ludwig.combiners.combiners.TabNetCombinerConfig.Schema.output_size": {"name": "output_size", "path": "ludwig.combiners.combiners.TabNetCombinerConfig.Schema.output_size", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.combiners.combiners.TabNetCombinerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "Integer"}, "ludwig.combiners.combiners.TabNetCombinerConfig.Schema.num_steps": {"name": "num_steps", "path": "ludwig.combiners.combiners.TabNetCombinerConfig.Schema.num_steps", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.combiners.combiners.TabNetCombinerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "Integer"}, "ludwig.combiners.combiners.TabNetCombinerConfig.Schema.num_total_blocks": {"name": "num_total_blocks", "path": "ludwig.combiners.combiners.TabNetCombinerConfig.Schema.num_total_blocks", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.combiners.combiners.TabNetCombinerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "Integer"}, "ludwig.combiners.combiners.TabNetCombinerConfig.Schema.num_shared_blocks": {"name": "num_shared_blocks", "path": "ludwig.combiners.combiners.TabNetCombinerConfig.Schema.num_shared_blocks", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.combiners.combiners.TabNetCombinerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "Integer"}, "ludwig.combiners.combiners.TabNetCombinerConfig.Schema.relaxation_factor": {"name": "relaxation_factor", "path": "ludwig.combiners.combiners.TabNetCombinerConfig.Schema.relaxation_factor", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.combiners.combiners.TabNetCombinerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "Float"}, "ludwig.combiners.combiners.TabNetCombinerConfig.Schema.bn_epsilon": {"name": "bn_epsilon", "path": "ludwig.combiners.combiners.TabNetCombinerConfig.Schema.bn_epsilon", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.combiners.combiners.TabNetCombinerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "Float"}, "ludwig.combiners.combiners.TabNetCombinerConfig.Schema.bn_momentum": {"name": "bn_momentum", "path": "ludwig.combiners.combiners.TabNetCombinerConfig.Schema.bn_momentum", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.combiners.combiners.TabNetCombinerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "Float"}, "ludwig.combiners.combiners.TabNetCombinerConfig.Schema.bn_virtual_bs": {"name": "bn_virtual_bs", "path": "ludwig.combiners.combiners.TabNetCombinerConfig.Schema.bn_virtual_bs", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.combiners.combiners.TabNetCombinerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "Integer"}, "ludwig.combiners.combiners.TabNetCombinerConfig.Schema.sparsity": {"name": "sparsity", "path": "ludwig.combiners.combiners.TabNetCombinerConfig.Schema.sparsity", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.combiners.combiners.TabNetCombinerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "Float"}, "ludwig.combiners.combiners.TabNetCombinerConfig.Schema.dropout": {"name": "dropout", "path": "ludwig.combiners.combiners.TabNetCombinerConfig.Schema.dropout", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.combiners.combiners.TabNetCombinerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "Float"}}, "attributes": ["ludwig.combiners.combiners.TabNetCombinerConfig.Schema._declared_fields", "ludwig.combiners.combiners.TabNetCombinerConfig.Schema._hooks", "ludwig.combiners.combiners.TabNetCombinerConfig.Schema.opts", "ludwig.combiners.combiners.TabNetCombinerConfig.Schema.size", "ludwig.combiners.combiners.TabNetCombinerConfig.Schema.output_size", "ludwig.combiners.combiners.TabNetCombinerConfig.Schema.num_steps", "ludwig.combiners.combiners.TabNetCombinerConfig.Schema.num_total_blocks", "ludwig.combiners.combiners.TabNetCombinerConfig.Schema.num_shared_blocks", "ludwig.combiners.combiners.TabNetCombinerConfig.Schema.relaxation_factor", "ludwig.combiners.combiners.TabNetCombinerConfig.Schema.bn_epsilon", "ludwig.combiners.combiners.TabNetCombinerConfig.Schema.bn_momentum", "ludwig.combiners.combiners.TabNetCombinerConfig.Schema.bn_virtual_bs", "ludwig.combiners.combiners.TabNetCombinerConfig.Schema.sparsity", "ludwig.combiners.combiners.TabNetCombinerConfig.Schema.dropout"], "methods": [], "functions": [], "modules": [], "classes": ["ludwig.combiners.combiners.TabNetCombinerConfig.Schema.Meta"], "bases": ["marshmallow_dataclass._base_schema.<locals>.BaseSchema"]}, "ludwig.combiners.combiners.TabNetCombinerConfig.__eq__": {"name": "__eq__", "path": "ludwig.combiners.combiners.TabNetCombinerConfig.__eq__", "category": "method", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["special"], "parent_path": "ludwig.combiners.combiners.TabNetCombinerConfig", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "signature": {"parameters": [{"kind": "POSITIONAL_OR_KEYWORD", "name": "self"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "other"}]}}, "ludwig.combiners.combiners.TabNetCombinerConfig.__init__": {"name": "__init__", "path": "ludwig.combiners.combiners.TabNetCombinerConfig.__init__", "category": "method", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["special"], "parent_path": "ludwig.combiners.combiners.TabNetCombinerConfig", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "signature": {"parameters": [{"kind": "POSITIONAL_OR_KEYWORD", "name": "self"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "size", "annotation": "int", "default": "32"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "output_size", "annotation": "int", "default": "32"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "num_steps", "annotation": "int", "default": "1"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "num_total_blocks", "annotation": "int", "default": "4"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "num_shared_blocks", "annotation": "int", "default": "2"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "relaxation_factor", "annotation": "float", "default": "1.5"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "bn_epsilon", "annotation": "float", "default": "0.001"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "bn_momentum", "annotation": "float", "default": "0.7"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "bn_virtual_bs", "annotation": "Optional[int]", "default": "None"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "sparsity", "annotation": "float", "default": "1e-05"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "dropout", "annotation": "float", "default": "0.0"}], "return_annotation": "None"}}, "ludwig.combiners.combiners.TabNetCombinerConfig.__repr__": {"name": "__repr__", "path": "ludwig.combiners.combiners.TabNetCombinerConfig.__repr__", "category": "method", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["special"], "parent_path": "ludwig.combiners.combiners.TabNetCombinerConfig", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "signature": {"parameters": [{"kind": "POSITIONAL_OR_KEYWORD", "name": "self"}]}}, "ludwig.combiners.combiners.TabNetCombinerConfig.bn_epsilon": {"name": "bn_epsilon", "path": "ludwig.combiners.combiners.TabNetCombinerConfig.bn_epsilon", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["dataclass-field"], "parent_path": "ludwig.combiners.combiners.TabNetCombinerConfig", "has_contents": true, "docstring": "Epsilon to be added to the batch norm denominator (default: 1e-3).", "docstring_sections": [{"type": "markdown", "value": "Epsilon to be added to the batch norm denominator (default: 1e-3)."}], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "float"}, "ludwig.combiners.combiners.TabNetCombinerConfig.bn_momentum": {"name": "bn_momentum", "path": "ludwig.combiners.combiners.TabNetCombinerConfig.bn_momentum", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["dataclass-field"], "parent_path": "ludwig.combiners.combiners.TabNetCombinerConfig", "has_contents": true, "docstring": "Momentum of the batch norm. `m_B` in the paper (default: 0.7).", "docstring_sections": [{"type": "markdown", "value": "Momentum of the batch norm. `m_B` in the paper (default: 0.7)."}], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "float"}, "ludwig.combiners.combiners.TabNetCombinerConfig.bn_virtual_bs": {"name": "bn_virtual_bs", "path": "ludwig.combiners.combiners.TabNetCombinerConfig.bn_virtual_bs", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["dataclass-field"], "parent_path": "ludwig.combiners.combiners.TabNetCombinerConfig", "has_contents": true, "docstring": "Size of the virtual batch size used by ghost batch norm. If null, regular batch norm is used instead. `B_v` from\nthe paper (default: None).", "docstring_sections": [{"type": "markdown", "value": "Size of the virtual batch size used by ghost batch norm. If null, regular batch norm is used instead. `B_v` from\nthe paper (default: None)."}], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "Optional[int]"}, "ludwig.combiners.combiners.TabNetCombinerConfig.dropout": {"name": "dropout", "path": "ludwig.combiners.combiners.TabNetCombinerConfig.dropout", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["dataclass-field"], "parent_path": "ludwig.combiners.combiners.TabNetCombinerConfig", "has_contents": true, "docstring": "Dropout rate for the transformer block (default: 0.0).", "docstring_sections": [{"type": "markdown", "value": "Dropout rate for the transformer block (default: 0.0)."}], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "float"}, "ludwig.combiners.combiners.TabNetCombinerConfig.num_shared_blocks": {"name": "num_shared_blocks", "path": "ludwig.combiners.combiners.TabNetCombinerConfig.num_shared_blocks", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["dataclass-field"], "parent_path": "ludwig.combiners.combiners.TabNetCombinerConfig", "has_contents": true, "docstring": "Number of shared feature transformer blocks across the steps (default: 2).", "docstring_sections": [{"type": "markdown", "value": "Number of shared feature transformer blocks across the steps (default: 2)."}], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "int"}, "ludwig.combiners.combiners.TabNetCombinerConfig.num_steps": {"name": "num_steps", "path": "ludwig.combiners.combiners.TabNetCombinerConfig.num_steps", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["dataclass-field"], "parent_path": "ludwig.combiners.combiners.TabNetCombinerConfig", "has_contents": true, "docstring": "Number of steps / repetitions of the the attentive transformer and feature transformer computations. `N_steps` in\nthe paper (default: 1).", "docstring_sections": [{"type": "markdown", "value": "Number of steps / repetitions of the the attentive transformer and feature transformer computations. `N_steps` in\nthe paper (default: 1)."}], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "int"}, "ludwig.combiners.combiners.TabNetCombinerConfig.num_total_blocks": {"name": "num_total_blocks", "path": "ludwig.combiners.combiners.TabNetCombinerConfig.num_total_blocks", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["dataclass-field"], "parent_path": "ludwig.combiners.combiners.TabNetCombinerConfig", "has_contents": true, "docstring": "Total number of feature transformer block at each step (default: 4).", "docstring_sections": [{"type": "markdown", "value": "Total number of feature transformer block at each step (default: 4)."}], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "int"}, "ludwig.combiners.combiners.TabNetCombinerConfig.output_size": {"name": "output_size", "path": "ludwig.combiners.combiners.TabNetCombinerConfig.output_size", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["dataclass-field"], "parent_path": "ludwig.combiners.combiners.TabNetCombinerConfig", "has_contents": true, "docstring": "Output size of a fully connected layer. `N_d` in the paper (default: 32).", "docstring_sections": [{"type": "markdown", "value": "Output size of a fully connected layer. `N_d` in the paper (default: 32)."}], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "int"}, "ludwig.combiners.combiners.TabNetCombinerConfig.relaxation_factor": {"name": "relaxation_factor", "path": "ludwig.combiners.combiners.TabNetCombinerConfig.relaxation_factor", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["dataclass-field"], "parent_path": "ludwig.combiners.combiners.TabNetCombinerConfig", "has_contents": true, "docstring": "Factor that influences how many times a feature should be used across the steps of computation. a value of 1\nimplies it each feature should be use once, a higher value allows for multiple usages. `gamma` in the paper\n(default: 1.5).", "docstring_sections": [{"type": "markdown", "value": "Factor that influences how many times a feature should be used across the steps of computation. a value of 1\nimplies it each feature should be use once, a higher value allows for multiple usages. `gamma` in the paper\n(default: 1.5)."}], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "float"}, "ludwig.combiners.combiners.TabNetCombinerConfig.size": {"name": "size", "path": "ludwig.combiners.combiners.TabNetCombinerConfig.size", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["dataclass-field"], "parent_path": "ludwig.combiners.combiners.TabNetCombinerConfig", "has_contents": true, "docstring": "`N_a` in the paper (default: 32).", "docstring_sections": [{"type": "markdown", "value": "`N_a` in the paper (default: 32)."}], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "int"}, "ludwig.combiners.combiners.TabNetCombinerConfig.sparsity": {"name": "sparsity", "path": "ludwig.combiners.combiners.TabNetCombinerConfig.sparsity", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["dataclass-field"], "parent_path": "ludwig.combiners.combiners.TabNetCombinerConfig", "has_contents": true, "docstring": "Multiplier of the sparsity inducing loss. `lambda_sparse` in the paper (default: 1e-5).", "docstring_sections": [{"type": "markdown", "value": "Multiplier of the sparsity inducing loss. `lambda_sparse` in the paper (default: 1e-5)."}], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "float"}}, "attributes": ["ludwig.combiners.combiners.TabNetCombinerConfig.size", "ludwig.combiners.combiners.TabNetCombinerConfig.output_size", "ludwig.combiners.combiners.TabNetCombinerConfig.num_steps", "ludwig.combiners.combiners.TabNetCombinerConfig.num_total_blocks", "ludwig.combiners.combiners.TabNetCombinerConfig.num_shared_blocks", "ludwig.combiners.combiners.TabNetCombinerConfig.relaxation_factor", "ludwig.combiners.combiners.TabNetCombinerConfig.bn_epsilon", "ludwig.combiners.combiners.TabNetCombinerConfig.bn_momentum", "ludwig.combiners.combiners.TabNetCombinerConfig.bn_virtual_bs", "ludwig.combiners.combiners.TabNetCombinerConfig.sparsity", "ludwig.combiners.combiners.TabNetCombinerConfig.dropout"], "methods": ["ludwig.combiners.combiners.TabNetCombinerConfig.__eq__", "ludwig.combiners.combiners.TabNetCombinerConfig.__init__", "ludwig.combiners.combiners.TabNetCombinerConfig.__repr__"], "functions": [], "modules": [], "classes": ["ludwig.combiners.combiners.TabNetCombinerConfig.Schema"], "bases": ["ludwig.combiners.combiners.BaseCombinerConfig"]}]}, "AdamOptimizerConfig": {"loading_errors": [], "parsing_errors": {}, "objects": [{"name": "AdamOptimizerConfig", "path": "ludwig.modules.optimization_modules.AdamOptimizerConfig", "category": "class", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["dataclass"], "parent_path": "ludwig.modules.optimization_modules", "has_contents": true, "docstring": "Parameters for adam optimization.", "docstring_sections": [{"type": "markdown", "value": "Parameters for adam optimization."}], "source": {"code": "class AdamOptimizerConfig(BaseOptimizerConfig):\n    \"\"\"Parameters for adam optimization.\"\"\"\n\n    torch_type: ClassVar[torch.optim.Optimizer] = torch.optim.Adam\n    \"Points to `torch.optim.Adam`.\"\n\n    type: str = \"adam\"\n\n    lr: float = FloatRange(default=0.001, min=0.0, max=1.0)\n    \"(default: 0.001)\"\n\n    betas: Tuple[float, float] = FloatRangeTupleDataclassField(default=(0.9, 0.999))\n    \"(default: (0.9, 0.999))\"\n\n    eps: float = NonNegativeFloat(default=1e-08)\n    \"(default: 1e-08)\"\n\n    # Defaults taken from https://pytorch.org/docs/stable/generated/torch.optim.Adam.html#torch.optim.Adam :\n    weight_decay: float = NonNegativeFloat(default=0.0)\n    amsgrad: bool = False\n", "line_start": 111}, "children": {"ludwig.modules.optimization_modules.AdamOptimizerConfig.Schema": {"name": "Schema", "path": "ludwig.modules.optimization_modules.AdamOptimizerConfig.Schema", "category": "class", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["marshmallow-model"], "parent_path": "ludwig.modules.optimization_modules.AdamOptimizerConfig", "has_contents": true, "docstring": "", "docstring_sections": [], "source": {}, "children": {"ludwig.modules.optimization_modules.AdamOptimizerConfig.Schema.Meta": {"name": "Meta", "path": "ludwig.modules.optimization_modules.AdamOptimizerConfig.Schema.Meta", "category": "class", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": [], "parent_path": "ludwig.modules.optimization_modules.AdamOptimizerConfig.Schema", "has_contents": true, "docstring": "Sub-class specifying meta information for Marshmallow.\n\nCurrently only sets `unknown` flag to `EXCLUDE`. This is done to mirror Ludwig behavior: unknown properties are\nexcluded from `load` calls so that the marshmallow_dataclass package can be used but\n`get_custom_schema_from_marshmallow_class` will manually set a marshmallow schema's `additionalProperties` attr.\nto True so that JSON objects with extra properties do not raise errors; as a result properties are picked and\nfilled in as necessary.", "docstring_sections": [{"type": "markdown", "value": "Sub-class specifying meta information for Marshmallow.\n\nCurrently only sets `unknown` flag to `EXCLUDE`. This is done to mirror Ludwig behavior: unknown properties are\nexcluded from `load` calls so that the marshmallow_dataclass package can be used but\n`get_custom_schema_from_marshmallow_class` will manually set a marshmallow schema's `additionalProperties` attr.\nto True so that JSON objects with extra properties do not raise errors; as a result properties are picked and\nfilled in as necessary."}], "source": {"code": "    class Meta:\n        \"\"\"Sub-class specifying meta information for Marshmallow.\n\n        Currently only sets `unknown` flag to `EXCLUDE`. This is done to mirror Ludwig behavior: unknown properties are\n        excluded from `load` calls so that the marshmallow_dataclass package can be used but\n        `get_custom_schema_from_marshmallow_class` will manually set a marshmallow schema's `additionalProperties` attr.\n        to True so that JSON objects with extra properties do not raise errors; as a result properties are picked and\n        filled in as necessary.\n        \"\"\"\n\n        unknown = EXCLUDE\n        \"Flag that sets marshmallow `load` calls to ignore unknown properties passed as a parameter.\"\n", "line_start": 49}, "children": {"ludwig.modules.optimization_modules.AdamOptimizerConfig.Schema.Meta.unknown": {"name": "unknown", "path": "ludwig.modules.optimization_modules.AdamOptimizerConfig.Schema.Meta.unknown", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": [], "parent_path": "ludwig.modules.optimization_modules.AdamOptimizerConfig.Schema.Meta", "has_contents": true, "docstring": "Flag that sets marshmallow `load` calls to ignore unknown properties passed as a parameter.", "docstring_sections": [{"type": "markdown", "value": "Flag that sets marshmallow `load` calls to ignore unknown properties passed as a parameter."}], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": ""}}, "attributes": ["ludwig.modules.optimization_modules.AdamOptimizerConfig.Schema.Meta.unknown"], "methods": [], "functions": [], "modules": [], "classes": [], "bases": ["object"]}, "ludwig.modules.optimization_modules.AdamOptimizerConfig.Schema._declared_fields": {"name": "_declared_fields", "path": "ludwig.modules.optimization_modules.AdamOptimizerConfig.Schema._declared_fields", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["private"], "parent_path": "ludwig.modules.optimization_modules.AdamOptimizerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": ""}, "ludwig.modules.optimization_modules.AdamOptimizerConfig.Schema._hooks": {"name": "_hooks", "path": "ludwig.modules.optimization_modules.AdamOptimizerConfig.Schema._hooks", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["private"], "parent_path": "ludwig.modules.optimization_modules.AdamOptimizerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": ""}, "ludwig.modules.optimization_modules.AdamOptimizerConfig.Schema.opts": {"name": "opts", "path": "ludwig.modules.optimization_modules.AdamOptimizerConfig.Schema.opts", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": [], "parent_path": "ludwig.modules.optimization_modules.AdamOptimizerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": ""}, "ludwig.modules.optimization_modules.AdamOptimizerConfig.Schema.validate_type": {"name": "validate_type", "path": "ludwig.modules.optimization_modules.AdamOptimizerConfig.Schema.validate_type", "category": "method", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": [], "parent_path": "ludwig.modules.optimization_modules.AdamOptimizerConfig.Schema", "has_contents": true, "docstring": "Workaround to enforce immutable `type` in defined optimizer classes.\n\n:param data: Any-typed object that should be a string correctly identifying the optimizer type.", "docstring_sections": [{"type": "markdown", "value": "Workaround to enforce immutable `type` in defined optimizer classes."}, {"type": "parameters", "value": [{"description": "Any-typed object that should be a string correctly identifying the optimizer type.", "annotation": "", "name": "data", "kind": "POSITIONAL_OR_KEYWORD", "default": "", "is_optional": false, "is_required": true, "is_args": false, "is_kwargs": false}]}], "source": {"code": "    @validates(\"type\")\n    def validate_type(self, data, **kwargs):\n        \"\"\"Workaround to enforce immutable `type` in defined optimizer classes.\n\n        :param data: Any-typed object that should be a string correctly identifying the optimizer type.\n        \"\"\"\n        if not isinstance(data, str):\n            raise ValidationError(\n                f\"{self.__class__.__name__} expects type of field `type` to be `str`, instead received '{data}'\"\n            )\n        default = self.declared_fields[\"type\"].dump_default\n        if default is not missing and data != default:\n            # Handle aliases:\n            if optimizer_registry[default] == optimizer_registry[data]:\n                return\n            raise ValidationError(\n                f\"{self.__class__.__name__} expects value of field `type` to be '{default}', instead received '{data}'\"\n            )\n", "line_start": 62}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "signature": {"parameters": [{"kind": "POSITIONAL_OR_KEYWORD", "name": "self"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "data"}, {"kind": "VAR_KEYWORD", "name": "kwargs"}]}}, "ludwig.modules.optimization_modules.AdamOptimizerConfig.Schema.type": {"name": "type", "path": "ludwig.modules.optimization_modules.AdamOptimizerConfig.Schema.type", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.modules.optimization_modules.AdamOptimizerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "String"}, "ludwig.modules.optimization_modules.AdamOptimizerConfig.Schema.lr": {"name": "lr", "path": "ludwig.modules.optimization_modules.AdamOptimizerConfig.Schema.lr", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.modules.optimization_modules.AdamOptimizerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "Float"}, "ludwig.modules.optimization_modules.AdamOptimizerConfig.Schema.betas": {"name": "betas", "path": "ludwig.modules.optimization_modules.AdamOptimizerConfig.Schema.betas", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.modules.optimization_modules.AdamOptimizerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "FloatTupleMarshmallowField"}, "ludwig.modules.optimization_modules.AdamOptimizerConfig.Schema.eps": {"name": "eps", "path": "ludwig.modules.optimization_modules.AdamOptimizerConfig.Schema.eps", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.modules.optimization_modules.AdamOptimizerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "Float"}, "ludwig.modules.optimization_modules.AdamOptimizerConfig.Schema.weight_decay": {"name": "weight_decay", "path": "ludwig.modules.optimization_modules.AdamOptimizerConfig.Schema.weight_decay", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.modules.optimization_modules.AdamOptimizerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "Float"}, "ludwig.modules.optimization_modules.AdamOptimizerConfig.Schema.amsgrad": {"name": "amsgrad", "path": "ludwig.modules.optimization_modules.AdamOptimizerConfig.Schema.amsgrad", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.modules.optimization_modules.AdamOptimizerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "Boolean"}}, "attributes": ["ludwig.modules.optimization_modules.AdamOptimizerConfig.Schema._declared_fields", "ludwig.modules.optimization_modules.AdamOptimizerConfig.Schema._hooks", "ludwig.modules.optimization_modules.AdamOptimizerConfig.Schema.opts", "ludwig.modules.optimization_modules.AdamOptimizerConfig.Schema.type", "ludwig.modules.optimization_modules.AdamOptimizerConfig.Schema.lr", "ludwig.modules.optimization_modules.AdamOptimizerConfig.Schema.betas", "ludwig.modules.optimization_modules.AdamOptimizerConfig.Schema.eps", "ludwig.modules.optimization_modules.AdamOptimizerConfig.Schema.weight_decay", "ludwig.modules.optimization_modules.AdamOptimizerConfig.Schema.amsgrad"], "methods": ["ludwig.modules.optimization_modules.AdamOptimizerConfig.Schema.validate_type"], "functions": [], "modules": [], "classes": ["ludwig.modules.optimization_modules.AdamOptimizerConfig.Schema.Meta"], "bases": ["marshmallow_dataclass._base_schema.<locals>.BaseSchema"]}, "ludwig.modules.optimization_modules.AdamOptimizerConfig.__eq__": {"name": "__eq__", "path": "ludwig.modules.optimization_modules.AdamOptimizerConfig.__eq__", "category": "method", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["special"], "parent_path": "ludwig.modules.optimization_modules.AdamOptimizerConfig", "has_contents": false, "docstring": "", "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "signature": {"parameters": [{"kind": "POSITIONAL_OR_KEYWORD", "name": "self"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "other"}]}}, "ludwig.modules.optimization_modules.AdamOptimizerConfig.__init__": {"name": "__init__", "path": "ludwig.modules.optimization_modules.AdamOptimizerConfig.__init__", "category": "method", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["special"], "parent_path": "ludwig.modules.optimization_modules.AdamOptimizerConfig", "has_contents": false, "docstring": "", "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "signature": {"parameters": [{"kind": "POSITIONAL_OR_KEYWORD", "name": "self"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "type", "annotation": "str", "default": "'adam'"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "lr", "annotation": "float", "default": "0.001"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "betas", "annotation": "Tuple[float, float]", "default": "(0.9, 0.999)"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "eps", "annotation": "float", "default": "1e-08"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "weight_decay", "annotation": "float", "default": "0.0"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "amsgrad", "annotation": "bool", "default": "False"}], "return_annotation": "None"}}, "ludwig.modules.optimization_modules.AdamOptimizerConfig.__repr__": {"name": "__repr__", "path": "ludwig.modules.optimization_modules.AdamOptimizerConfig.__repr__", "category": "method", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["special"], "parent_path": "ludwig.modules.optimization_modules.AdamOptimizerConfig", "has_contents": false, "docstring": "", "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "signature": {"parameters": [{"kind": "POSITIONAL_OR_KEYWORD", "name": "self"}]}}, "ludwig.modules.optimization_modules.AdamOptimizerConfig.amsgrad": {"name": "amsgrad", "path": "ludwig.modules.optimization_modules.AdamOptimizerConfig.amsgrad", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["dataclass-field"], "parent_path": "ludwig.modules.optimization_modules.AdamOptimizerConfig", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "bool"}, "ludwig.modules.optimization_modules.AdamOptimizerConfig.betas": {"name": "betas", "path": "ludwig.modules.optimization_modules.AdamOptimizerConfig.betas", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["dataclass-field"], "parent_path": "ludwig.modules.optimization_modules.AdamOptimizerConfig", "has_contents": true, "docstring": "(default: (0.9, 0.999))", "docstring_sections": [{"type": "markdown", "value": "(default: (0.9, 0.999))"}], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "Tuple[float, float]"}, "ludwig.modules.optimization_modules.AdamOptimizerConfig.eps": {"name": "eps", "path": "ludwig.modules.optimization_modules.AdamOptimizerConfig.eps", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["dataclass-field"], "parent_path": "ludwig.modules.optimization_modules.AdamOptimizerConfig", "has_contents": true, "docstring": "(default: 1e-08)", "docstring_sections": [{"type": "markdown", "value": "(default: 1e-08)"}], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "float"}, "ludwig.modules.optimization_modules.AdamOptimizerConfig.lr": {"name": "lr", "path": "ludwig.modules.optimization_modules.AdamOptimizerConfig.lr", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["dataclass-field"], "parent_path": "ludwig.modules.optimization_modules.AdamOptimizerConfig", "has_contents": true, "docstring": "(default: 0.001)", "docstring_sections": [{"type": "markdown", "value": "(default: 0.001)"}], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "float"}, "ludwig.modules.optimization_modules.AdamOptimizerConfig.torch_type": {"name": "torch_type", "path": "ludwig.modules.optimization_modules.AdamOptimizerConfig.torch_type", "category": "class", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": [], "parent_path": "ludwig.modules.optimization_modules.AdamOptimizerConfig", "has_contents": true, "docstring": "Implements Adam algorithm.\n\n.. math::\n   \\begin{aligned}\n        &\\rule{110mm}{0.4pt}                                                                 \\\\\n        &\\textbf{input}      : \\gamma \\text{ (lr)}, \\beta_1, \\beta_2\n            \\text{ (betas)},\\theta_0 \\text{ (params)},f(\\theta) \\text{ (objective)}          \\\\\n        &\\hspace{13mm}      \\lambda \\text{ (weight decay)},  \\: amsgrad                      \\\\\n        &\\textbf{initialize} :  m_0 \\leftarrow 0 \\text{ ( first moment)},\n            v_0\\leftarrow 0 \\text{ (second moment)},\\: \\widehat{v_0}^{max}\\leftarrow 0\\\\[-1.ex]\n        &\\rule{110mm}{0.4pt}                                                                 \\\\\n        &\\textbf{for} \\: t=1 \\: \\textbf{to} \\: \\ldots \\: \\textbf{do}                         \\\\\n        &\\hspace{5mm}g_t           \\leftarrow   \\nabla_{\\theta} f_t (\\theta_{t-1})           \\\\\n        &\\hspace{5mm}\\textbf{if} \\: \\lambda \\neq 0                                           \\\\\n        &\\hspace{10mm} g_t \\leftarrow g_t + \\lambda  \\theta_{t-1}                            \\\\\n        &\\hspace{5mm}m_t           \\leftarrow   \\beta_1 m_{t-1} + (1 - \\beta_1) g_t          \\\\\n        &\\hspace{5mm}v_t           \\leftarrow   \\beta_2 v_{t-1} + (1-\\beta_2) g^2_t          \\\\\n        &\\hspace{5mm}\\widehat{m_t} \\leftarrow   m_t/\\big(1-\\beta_1^t \\big)                   \\\\\n        &\\hspace{5mm}\\widehat{v_t} \\leftarrow   v_t/\\big(1-\\beta_2^t \\big)                   \\\\\n        &\\hspace{5mm}\\textbf{if} \\: amsgrad                                                  \\\\\n        &\\hspace{10mm}\\widehat{v_t}^{max} \\leftarrow \\mathrm{max}(\\widehat{v_t}^{max},\n            \\widehat{v_t})                                                                   \\\\\n        &\\hspace{10mm}\\theta_t \\leftarrow \\theta_{t-1} - \\gamma \\widehat{m_t}/\n            \\big(\\sqrt{\\widehat{v_t}^{max}} + \\epsilon \\big)                                 \\\\\n        &\\hspace{5mm}\\textbf{else}                                                           \\\\\n        &\\hspace{10mm}\\theta_t \\leftarrow \\theta_{t-1} - \\gamma \\widehat{m_t}/\n            \\big(\\sqrt{\\widehat{v_t}} + \\epsilon \\big)                                       \\\\\n        &\\rule{110mm}{0.4pt}                                                          \\\\[-1.ex]\n        &\\bf{return} \\:  \\theta_t                                                     \\\\[-1.ex]\n        &\\rule{110mm}{0.4pt}                                                          \\\\[-1.ex]\n   \\end{aligned}\n\nFor further details regarding the algorithm we refer to `Adam: A Method for Stochastic Optimization`_.\n\nArgs:\n    params (iterable): iterable of parameters to optimize or dicts defining\n        parameter groups\n    lr (float, optional): learning rate (default: 1e-3)\n    betas (Tuple[float, float], optional): coefficients used for computing\n        running averages of gradient and its square (default: (0.9, 0.999))\n    eps (float, optional): term added to the denominator to improve\n        numerical stability (default: 1e-8)\n    weight_decay (float, optional): weight decay (L2 penalty) (default: 0)\n    amsgrad (boolean, optional): whether to use the AMSGrad variant of this\n        algorithm from the paper `On the Convergence of Adam and Beyond`_\n        (default: False)\n\n.. _Adam\\: A Method for Stochastic Optimization:\n    https://arxiv.org/abs/1412.6980\n.. _On the Convergence of Adam and Beyond:\n    https://openreview.net/forum?id=ryQu7f-RZ", "docstring_sections": [{"type": "markdown", "value": "Implements Adam algorithm.\n\n.. math::\n   \\begin{aligned}\n        &\\rule{110mm}{0.4pt}                                                                 \\\\\n        &\\textbf{input}      : \\gamma \\text{ (lr)}, \\beta_1, \\beta_2\n            \\text{ (betas)},\\theta_0 \\text{ (params)},f(\\theta) \\text{ (objective)}          \\\\\n        &\\hspace{13mm}      \\lambda \\text{ (weight decay)},  \\: amsgrad                      \\\\\n        &\\textbf{initialize} :  m_0 \\leftarrow 0 \\text{ ( first moment)},\n            v_0\\leftarrow 0 \\text{ (second moment)},\\: \\widehat{v_0}^{max}\\leftarrow 0\\\\[-1.ex]\n        &\\rule{110mm}{0.4pt}                                                                 \\\\\n        &\\textbf{for} \\: t=1 \\: \\textbf{to} \\: \\ldots \\: \\textbf{do}                         \\\\\n        &\\hspace{5mm}g_t           \\leftarrow   \\nabla_{\\theta} f_t (\\theta_{t-1})           \\\\\n        &\\hspace{5mm}\\textbf{if} \\: \\lambda \\neq 0                                           \\\\\n        &\\hspace{10mm} g_t \\leftarrow g_t + \\lambda  \\theta_{t-1}                            \\\\\n        &\\hspace{5mm}m_t           \\leftarrow   \\beta_1 m_{t-1} + (1 - \\beta_1) g_t          \\\\\n        &\\hspace{5mm}v_t           \\leftarrow   \\beta_2 v_{t-1} + (1-\\beta_2) g^2_t          \\\\\n        &\\hspace{5mm}\\widehat{m_t} \\leftarrow   m_t/\\big(1-\\beta_1^t \\big)                   \\\\\n        &\\hspace{5mm}\\widehat{v_t} \\leftarrow   v_t/\\big(1-\\beta_2^t \\big)                   \\\\\n        &\\hspace{5mm}\\textbf{if} \\: amsgrad                                                  \\\\\n        &\\hspace{10mm}\\widehat{v_t}^{max} \\leftarrow \\mathrm{max}(\\widehat{v_t}^{max},\n            \\widehat{v_t})                                                                   \\\\\n        &\\hspace{10mm}\\theta_t \\leftarrow \\theta_{t-1} - \\gamma \\widehat{m_t}/\n            \\big(\\sqrt{\\widehat{v_t}^{max}} + \\epsilon \\big)                                 \\\\\n        &\\hspace{5mm}\\textbf{else}                                                           \\\\\n        &\\hspace{10mm}\\theta_t \\leftarrow \\theta_{t-1} - \\gamma \\widehat{m_t}/\n            \\big(\\sqrt{\\widehat{v_t}} + \\epsilon \\big)                                       \\\\\n        &\\rule{110mm}{0.4pt}                                                          \\\\[-1.ex]\n        &\\bf{return} \\:  \\theta_t                                                     \\\\[-1.ex]\n        &\\rule{110mm}{0.4pt}                                                          \\\\[-1.ex]\n   \\end{aligned}\n\nFor further details regarding the algorithm we refer to `Adam: A Method for Stochastic Optimization`_.\n\nArgs:\n    params (iterable): iterable of parameters to optimize or dicts defining\n        parameter groups\n    lr (float, optional): learning rate (default: 1e-3)\n    betas (Tuple[float, float], optional): coefficients used for computing\n        running averages of gradient and its square (default: (0.9, 0.999))\n    eps (float, optional): term added to the denominator to improve\n        numerical stability (default: 1e-8)\n    weight_decay (float, optional): weight decay (L2 penalty) (default: 0)\n    amsgrad (boolean, optional): whether to use the AMSGrad variant of this\n        algorithm from the paper `On the Convergence of Adam and Beyond`_\n        (default: False)\n\n.. _Adam\\: A Method for Stochastic Optimization:\n    https://arxiv.org/abs/1412.6980\n.. _On the Convergence of Adam and Beyond:\n    https://openreview.net/forum?id=ryQu7f-RZ"}], "source": {"code": "class Adam(Optimizer):\n    r\"\"\"Implements Adam algorithm.\n\n    .. math::\n       \\begin{aligned}\n            &\\rule{110mm}{0.4pt}                                                                 \\\\\n            &\\textbf{input}      : \\gamma \\text{ (lr)}, \\beta_1, \\beta_2\n                \\text{ (betas)},\\theta_0 \\text{ (params)},f(\\theta) \\text{ (objective)}          \\\\\n            &\\hspace{13mm}      \\lambda \\text{ (weight decay)},  \\: amsgrad                      \\\\\n            &\\textbf{initialize} :  m_0 \\leftarrow 0 \\text{ ( first moment)},\n                v_0\\leftarrow 0 \\text{ (second moment)},\\: \\widehat{v_0}^{max}\\leftarrow 0\\\\[-1.ex]\n            &\\rule{110mm}{0.4pt}                                                                 \\\\\n            &\\textbf{for} \\: t=1 \\: \\textbf{to} \\: \\ldots \\: \\textbf{do}                         \\\\\n            &\\hspace{5mm}g_t           \\leftarrow   \\nabla_{\\theta} f_t (\\theta_{t-1})           \\\\\n            &\\hspace{5mm}\\textbf{if} \\: \\lambda \\neq 0                                           \\\\\n            &\\hspace{10mm} g_t \\leftarrow g_t + \\lambda  \\theta_{t-1}                            \\\\\n            &\\hspace{5mm}m_t           \\leftarrow   \\beta_1 m_{t-1} + (1 - \\beta_1) g_t          \\\\\n            &\\hspace{5mm}v_t           \\leftarrow   \\beta_2 v_{t-1} + (1-\\beta_2) g^2_t          \\\\\n            &\\hspace{5mm}\\widehat{m_t} \\leftarrow   m_t/\\big(1-\\beta_1^t \\big)                   \\\\\n            &\\hspace{5mm}\\widehat{v_t} \\leftarrow   v_t/\\big(1-\\beta_2^t \\big)                   \\\\\n            &\\hspace{5mm}\\textbf{if} \\: amsgrad                                                  \\\\\n            &\\hspace{10mm}\\widehat{v_t}^{max} \\leftarrow \\mathrm{max}(\\widehat{v_t}^{max},\n                \\widehat{v_t})                                                                   \\\\\n            &\\hspace{10mm}\\theta_t \\leftarrow \\theta_{t-1} - \\gamma \\widehat{m_t}/\n                \\big(\\sqrt{\\widehat{v_t}^{max}} + \\epsilon \\big)                                 \\\\\n            &\\hspace{5mm}\\textbf{else}                                                           \\\\\n            &\\hspace{10mm}\\theta_t \\leftarrow \\theta_{t-1} - \\gamma \\widehat{m_t}/\n                \\big(\\sqrt{\\widehat{v_t}} + \\epsilon \\big)                                       \\\\\n            &\\rule{110mm}{0.4pt}                                                          \\\\[-1.ex]\n            &\\bf{return} \\:  \\theta_t                                                     \\\\[-1.ex]\n            &\\rule{110mm}{0.4pt}                                                          \\\\[-1.ex]\n       \\end{aligned}\n\n    For further details regarding the algorithm we refer to `Adam: A Method for Stochastic Optimization`_.\n\n    Args:\n        params (iterable): iterable of parameters to optimize or dicts defining\n            parameter groups\n        lr (float, optional): learning rate (default: 1e-3)\n        betas (Tuple[float, float], optional): coefficients used for computing\n            running averages of gradient and its square (default: (0.9, 0.999))\n        eps (float, optional): term added to the denominator to improve\n            numerical stability (default: 1e-8)\n        weight_decay (float, optional): weight decay (L2 penalty) (default: 0)\n        amsgrad (boolean, optional): whether to use the AMSGrad variant of this\n            algorithm from the paper `On the Convergence of Adam and Beyond`_\n            (default: False)\n\n    .. _Adam\\: A Method for Stochastic Optimization:\n        https://arxiv.org/abs/1412.6980\n    .. _On the Convergence of Adam and Beyond:\n        https://openreview.net/forum?id=ryQu7f-RZ\n    \"\"\"\n\n    def __init__(self, params, lr=1e-3, betas=(0.9, 0.999), eps=1e-8,\n                 weight_decay=0, amsgrad=False):\n        if not 0.0 <= lr:\n            raise ValueError(\"Invalid learning rate: {}\".format(lr))\n        if not 0.0 <= eps:\n            raise ValueError(\"Invalid epsilon value: {}\".format(eps))\n        if not 0.0 <= betas[0] < 1.0:\n            raise ValueError(\"Invalid beta parameter at index 0: {}\".format(betas[0]))\n        if not 0.0 <= betas[1] < 1.0:\n            raise ValueError(\"Invalid beta parameter at index 1: {}\".format(betas[1]))\n        if not 0.0 <= weight_decay:\n            raise ValueError(\"Invalid weight_decay value: {}\".format(weight_decay))\n        defaults = dict(lr=lr, betas=betas, eps=eps,\n                        weight_decay=weight_decay, amsgrad=amsgrad)\n        super(Adam, self).__init__(params, defaults)\n\n    def __setstate__(self, state):\n        super(Adam, self).__setstate__(state)\n        for group in self.param_groups:\n            group.setdefault('amsgrad', False)\n\n    @torch.no_grad()\n    def step(self, closure=None):\n        \"\"\"Performs a single optimization step.\n\n        Args:\n            closure (callable, optional): A closure that reevaluates the model\n                and returns the loss.\n        \"\"\"\n        loss = None\n        if closure is not None:\n            with torch.enable_grad():\n                loss = closure()\n\n        for group in self.param_groups:\n            params_with_grad = []\n            grads = []\n            exp_avgs = []\n            exp_avg_sqs = []\n            max_exp_avg_sqs = []\n            state_steps = []\n            beta1, beta2 = group['betas']\n\n            for p in group['params']:\n                if p.grad is not None:\n                    params_with_grad.append(p)\n                    if p.grad.is_sparse:\n                        raise RuntimeError('Adam does not support sparse gradients, please consider SparseAdam instead')\n                    grads.append(p.grad)\n\n                    state = self.state[p]\n                    # Lazy state initialization\n                    if len(state) == 0:\n                        state['step'] = 0\n                        # Exponential moving average of gradient values\n                        state['exp_avg'] = torch.zeros_like(p, memory_format=torch.preserve_format)\n                        # Exponential moving average of squared gradient values\n                        state['exp_avg_sq'] = torch.zeros_like(p, memory_format=torch.preserve_format)\n                        if group['amsgrad']:\n                            # Maintains max of all exp. moving avg. of sq. grad. values\n                            state['max_exp_avg_sq'] = torch.zeros_like(p, memory_format=torch.preserve_format)\n\n                    exp_avgs.append(state['exp_avg'])\n                    exp_avg_sqs.append(state['exp_avg_sq'])\n\n                    if group['amsgrad']:\n                        max_exp_avg_sqs.append(state['max_exp_avg_sq'])\n\n                    # update the steps for each param group update\n                    state['step'] += 1\n                    # record the step after step update\n                    state_steps.append(state['step'])\n\n            F.adam(params_with_grad,\n                   grads,\n                   exp_avgs,\n                   exp_avg_sqs,\n                   max_exp_avg_sqs,\n                   state_steps,\n                   amsgrad=group['amsgrad'],\n                   beta1=beta1,\n                   beta2=beta2,\n                   lr=group['lr'],\n                   weight_decay=group['weight_decay'],\n                   eps=group['eps'])\n        return loss\n", "line_start": 6}, "children": {"ludwig.modules.optimization_modules.AdamOptimizerConfig.torch_type.__init__": {"name": "__init__", "path": "ludwig.modules.optimization_modules.AdamOptimizerConfig.torch_type.__init__", "category": "method", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["special"], "parent_path": "ludwig.modules.optimization_modules.AdamOptimizerConfig.torch_type", "has_contents": false, "docstring": "", "docstring_sections": [], "source": {"code": "    def __init__(self, params, lr=1e-3, betas=(0.9, 0.999), eps=1e-8,\n                 weight_decay=0, amsgrad=False):\n        if not 0.0 <= lr:\n            raise ValueError(\"Invalid learning rate: {}\".format(lr))\n        if not 0.0 <= eps:\n            raise ValueError(\"Invalid epsilon value: {}\".format(eps))\n        if not 0.0 <= betas[0] < 1.0:\n            raise ValueError(\"Invalid beta parameter at index 0: {}\".format(betas[0]))\n        if not 0.0 <= betas[1] < 1.0:\n            raise ValueError(\"Invalid beta parameter at index 1: {}\".format(betas[1]))\n        if not 0.0 <= weight_decay:\n            raise ValueError(\"Invalid weight_decay value: {}\".format(weight_decay))\n        defaults = dict(lr=lr, betas=betas, eps=eps,\n                        weight_decay=weight_decay, amsgrad=amsgrad)\n        super(Adam, self).__init__(params, defaults)\n", "line_start": 60}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "signature": {"parameters": [{"kind": "POSITIONAL_OR_KEYWORD", "name": "self"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "params"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "lr", "default": "0.001"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "betas", "default": "(0.9, 0.999)"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "eps", "default": "1e-08"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "weight_decay", "default": "0"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "amsgrad", "default": "False"}]}}, "ludwig.modules.optimization_modules.AdamOptimizerConfig.torch_type.__setstate__": {"name": "__setstate__", "path": "ludwig.modules.optimization_modules.AdamOptimizerConfig.torch_type.__setstate__", "category": "method", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["special"], "parent_path": "ludwig.modules.optimization_modules.AdamOptimizerConfig.torch_type", "has_contents": false, "docstring": "", "docstring_sections": [], "source": {"code": "    def __setstate__(self, state):\n        super(Adam, self).__setstate__(state)\n        for group in self.param_groups:\n            group.setdefault('amsgrad', False)\n", "line_start": 76}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "signature": {"parameters": [{"kind": "POSITIONAL_OR_KEYWORD", "name": "self"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "state"}]}}, "ludwig.modules.optimization_modules.AdamOptimizerConfig.torch_type.step": {"name": "step", "path": "ludwig.modules.optimization_modules.AdamOptimizerConfig.torch_type.step", "category": "method", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": [], "parent_path": "ludwig.modules.optimization_modules.AdamOptimizerConfig.torch_type", "has_contents": true, "docstring": "Performs a single optimization step.\n\nArgs:\n    closure (callable, optional): A closure that reevaluates the model\n        and returns the loss.", "docstring_sections": [{"type": "markdown", "value": "Performs a single optimization step.\n\nArgs:\n    closure (callable, optional): A closure that reevaluates the model\n        and returns the loss."}], "source": {"code": "    @torch.no_grad()\n    def step(self, closure=None):\n        \"\"\"Performs a single optimization step.\n\n        Args:\n            closure (callable, optional): A closure that reevaluates the model\n                and returns the loss.\n        \"\"\"\n        loss = None\n        if closure is not None:\n            with torch.enable_grad():\n                loss = closure()\n\n        for group in self.param_groups:\n            params_with_grad = []\n            grads = []\n            exp_avgs = []\n            exp_avg_sqs = []\n            max_exp_avg_sqs = []\n            state_steps = []\n            beta1, beta2 = group['betas']\n\n            for p in group['params']:\n                if p.grad is not None:\n                    params_with_grad.append(p)\n                    if p.grad.is_sparse:\n                        raise RuntimeError('Adam does not support sparse gradients, please consider SparseAdam instead')\n                    grads.append(p.grad)\n\n                    state = self.state[p]\n                    # Lazy state initialization\n                    if len(state) == 0:\n                        state['step'] = 0\n                        # Exponential moving average of gradient values\n                        state['exp_avg'] = torch.zeros_like(p, memory_format=torch.preserve_format)\n                        # Exponential moving average of squared gradient values\n                        state['exp_avg_sq'] = torch.zeros_like(p, memory_format=torch.preserve_format)\n                        if group['amsgrad']:\n                            # Maintains max of all exp. moving avg. of sq. grad. values\n                            state['max_exp_avg_sq'] = torch.zeros_like(p, memory_format=torch.preserve_format)\n\n                    exp_avgs.append(state['exp_avg'])\n                    exp_avg_sqs.append(state['exp_avg_sq'])\n\n                    if group['amsgrad']:\n                        max_exp_avg_sqs.append(state['max_exp_avg_sq'])\n\n                    # update the steps for each param group update\n                    state['step'] += 1\n                    # record the step after step update\n                    state_steps.append(state['step'])\n\n            F.adam(params_with_grad,\n                   grads,\n                   exp_avgs,\n                   exp_avg_sqs,\n                   max_exp_avg_sqs,\n                   state_steps,\n                   amsgrad=group['amsgrad'],\n                   beta1=beta1,\n                   beta2=beta2,\n                   lr=group['lr'],\n                   weight_decay=group['weight_decay'],\n                   eps=group['eps'])\n        return loss\n", "line_start": 81}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "signature": {"parameters": [{"kind": "POSITIONAL_OR_KEYWORD", "name": "self"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "closure", "default": "None"}]}}}, "attributes": [], "methods": ["ludwig.modules.optimization_modules.AdamOptimizerConfig.torch_type.__init__", "ludwig.modules.optimization_modules.AdamOptimizerConfig.torch_type.__setstate__", "ludwig.modules.optimization_modules.AdamOptimizerConfig.torch_type.step"], "functions": [], "modules": [], "classes": [], "bases": ["torch.optim.optimizer.Optimizer"]}, "ludwig.modules.optimization_modules.AdamOptimizerConfig.type": {"name": "type", "path": "ludwig.modules.optimization_modules.AdamOptimizerConfig.type", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": [], "parent_path": "ludwig.modules.optimization_modules.AdamOptimizerConfig", "has_contents": true, "docstring": "Name corresponding to an optimizer `ludwig.modules.optimization_modules.optimizer_registry`.\nTechnically mutable, but attempting to load a derived optimizer with `type` set to a mismatched value will\nresult in a `ValidationError`.", "docstring_sections": [{"type": "markdown", "value": "Name corresponding to an optimizer `ludwig.modules.optimization_modules.optimizer_registry`.\nTechnically mutable, but attempting to load a derived optimizer with `type` set to a mismatched value will\nresult in a `ValidationError`."}], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "str"}, "ludwig.modules.optimization_modules.AdamOptimizerConfig.weight_decay": {"name": "weight_decay", "path": "ludwig.modules.optimization_modules.AdamOptimizerConfig.weight_decay", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["dataclass-field"], "parent_path": "ludwig.modules.optimization_modules.AdamOptimizerConfig", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "float"}}, "attributes": ["ludwig.modules.optimization_modules.AdamOptimizerConfig.type", "ludwig.modules.optimization_modules.AdamOptimizerConfig.lr", "ludwig.modules.optimization_modules.AdamOptimizerConfig.betas", "ludwig.modules.optimization_modules.AdamOptimizerConfig.eps", "ludwig.modules.optimization_modules.AdamOptimizerConfig.weight_decay", "ludwig.modules.optimization_modules.AdamOptimizerConfig.amsgrad"], "methods": ["ludwig.modules.optimization_modules.AdamOptimizerConfig.__eq__", "ludwig.modules.optimization_modules.AdamOptimizerConfig.__init__", "ludwig.modules.optimization_modules.AdamOptimizerConfig.__repr__"], "functions": [], "modules": [], "classes": ["ludwig.modules.optimization_modules.AdamOptimizerConfig.Schema", "ludwig.modules.optimization_modules.AdamOptimizerConfig.torch_type"], "bases": ["ludwig.modules.optimization_modules.BaseOptimizerConfig"]}]}, "TrainerConfig": {"loading_errors": [], "parsing_errors": {}, "objects": [{"name": "TrainerConfig", "path": "ludwig.models.trainer.TrainerConfig", "category": "class", "file_path": "/home/ksbrar/work/ludwig/ludwig/models/trainer.py", "relative_file_path": "ludwig/models/trainer.py", "properties": ["dataclass"], "parent_path": "ludwig.models.trainer", "has_contents": true, "docstring": "TrainerConfig is a dataclass that configures most of the hyperparameters used for model training.", "docstring_sections": [{"type": "markdown", "value": "TrainerConfig is a dataclass that configures most of the hyperparameters used for model training."}], "source": {"code": "class TrainerConfig(schema.BaseMarshmallowConfig):\n    \"\"\"TrainerConfig is a dataclass that configures most of the hyperparameters used for model training.\"\"\"\n\n    optimizer: BaseOptimizerConfig = OptimizerDataclassField(default={\"type\": \"adam\"})\n    \"\"\"Instance of `ludwig.modules.optimization_modules.BaseOptimizerConfig` that specifies a torch-supported optimizer\n       and its attributes (default: `ludwig.modules.optimization_modules.AdamOptimizer()`).\"\"\"\n\n    epochs: int = schema.PositiveInteger(default=100)\n    \"Number of epochs the algorithm is intended to be run over (default: 100).\"\n\n    regularization_lambda: float = schema.FloatRange(default=0.0, min=0)\n    \"Strength of the $L2$ regularization (default: 0.0).\"\n\n    regularization_type: Optional[str] = schema.RegularizerOptions(default=\"l2\")\n    \"Type of regularization, one of ('l1', 'l2', 'l1_l2', None) (default: 'l2').\"\n\n    should_shuffle: bool = True\n    \"Whether to shuffle batches during training when true (default: True).\"\n\n    learning_rate: float = schema.NumericOrStringOptionsField(\n        default=0.001, min=0.0, max=1.0, options=[\"auto\"], nullable=False\n    )\n    \"\"\"Learning rate specified in configuration, represents how much to scale the gradients by. If 'auto',\n       `tune_learning_rate` must be called before training to estimate the optimal learning rate. (default: 0.001).\"\"\"\n\n    batch_size: Union[int, str] = schema.IntegerOrStringOptionsField(\n        default=128, options=[\"auto\"], nullable=False, min_exclusive=0\n    )\n    \"Size of batch to pass to the model for training (default: 128).\"\n\n    eval_batch_size: Union[None, int, str] = schema.IntegerOrStringOptionsField(\n        default=None, options=[\"auto\"], nullable=True, min_exclusive=0\n    )\n    \"\"\"Size of batch to pass to the model for evaluation (default: 'auto').\"\"\"\n\n    early_stop: int = schema.IntegerRange(default=5, min=-1)\n    \"\"\"How many epochs without any improvement in the `validation_metric` triggers the algorithm to stop. Can be set to\n       -1, which disables early_stop (default: 5).\"\"\"\n\n    reduce_learning_rate_on_plateau: float = schema.FloatRange(default=0.0, min=0.0, max=1.0)\n    \"\"\"Reduces the learning rate when the algorithm hits a plateau (i.e. the performance on the validation does not\n       improve). (default: 0.0).\"\"\"\n\n    reduce_learning_rate_on_plateau_patience: int = schema.NonNegativeInteger(default=5)\n    \"\"\"How many epochs have to pass before the learning rate reduces (default: 5).\"\"\"\n\n    reduce_learning_rate_on_plateau_rate: float = schema.FloatRange(default=0.5, min=0.0, max=1.0)\n    \"\"\"Rate at which we reduce the learning rate (default: 0.5).\"\"\"\n\n    reduce_learning_rate_eval_metric: str = LOSS\n    \"\"\"TODO: Document parameters. (default: `ludwig.constants.LOSS`).\"\"\"\n\n    reduce_learning_rate_eval_split: str = TRAINING\n    \"\"\"TODO (default: `ludwig.constants.TRAINING`).\"\"\"\n\n    increase_batch_size_on_plateau: int = schema.NonNegativeInteger(default=0)\n    \"\"\"Number to increase the batch size by on a plateau (default: 0).\"\"\"\n\n    increase_batch_size_on_plateau_patience: int = schema.NonNegativeInteger(default=5)\n    \"How many epochs to wait for before increasing the batch size (default: 5).\"\n\n    increase_batch_size_on_plateau_rate: float = schema.NonNegativeFloat(default=2.0)\n    \"Rate at which the batch size increases (default: 2.0).\"\n\n    increase_batch_size_on_plateau_max: int = schema.PositiveInteger(default=512)\n    \"Maximum size of the batch (default: 512).\"\n\n    increase_batch_size_eval_metric: str = LOSS\n    \"\"\"TODO: Document parameters. (default: 'loss').\"\"\"\n\n    increase_batch_size_eval_split: str = TRAINING\n    \"\"\"TODO: Document parameters. (default: 'training').\"\"\"\n\n    decay: bool = False\n    \"\"\"Turn on exponential decay of the learning rate (default: False).\"\"\"\n\n    decay_steps: int = schema.PositiveInteger(default=10000)\n    \"\"\"TODO: Document parameters. (default: 10000).\"\"\"\n\n    decay_rate: float = schema.FloatRange(default=0.96, min=0.0, max=1.0)\n    \"\"\"TODO: Document parameters. (default: 0.96).\"\"\"\n\n    staircase: bool = False\n    \"\"\"Decays the learning rate at discrete intervals (default: False).\"\"\"\n\n    gradient_clipping: Optional[ClipperConfig] = ClipperDataclassField(default={})\n    \"\"\"Instance of `ludwig.modules.optimization_modules.ClipperConfig` that sets gradient clipping params.\n       (default: `ludwig.modules.optimization_modules.ClipperConfig()`)\"\"\"\n\n    # TODO(#1673): Need some more logic here for validating against output features\n    validation_field: str = COMBINED\n    \"\"\"First output feature, by default it is set as the same field of the first output feature (default:\n       `ludwig.constants.COMBINED`).\"\"\"\n\n    validation_metric: str = LOSS\n    \"\"\"Metric used on `validation_field`, set by default to accuracy (default: `ludwig.constants.LOSS`).\"\"\"\n\n    learning_rate_warmup_epochs: float = schema.NonNegativeFloat(default=1.0)\n    \"\"\"Number of epochs to warmup the learning rate for (default: 1.0).\"\"\"\n", "line_start": 103}, "children": {"ludwig.models.trainer.TrainerConfig.Schema": {"name": "Schema", "path": "ludwig.models.trainer.TrainerConfig.Schema", "category": "class", "file_path": "/home/ksbrar/work/ludwig/ludwig/models/trainer.py", "relative_file_path": "ludwig/models/trainer.py", "properties": ["marshmallow-model"], "parent_path": "ludwig.models.trainer.TrainerConfig", "has_contents": true, "docstring": "", "docstring_sections": [], "source": {}, "children": {"ludwig.models.trainer.TrainerConfig.Schema.Meta": {"name": "Meta", "path": "ludwig.models.trainer.TrainerConfig.Schema.Meta", "category": "class", "file_path": "/home/ksbrar/work/ludwig/ludwig/models/trainer.py", "relative_file_path": "ludwig/models/trainer.py", "properties": [], "parent_path": "ludwig.models.trainer.TrainerConfig.Schema", "has_contents": true, "docstring": "Sub-class specifying meta information for Marshmallow.\n\nCurrently only sets `unknown` flag to `EXCLUDE`. This is done to mirror Ludwig behavior: unknown properties are\nexcluded from `load` calls so that the marshmallow_dataclass package can be used but\n`get_custom_schema_from_marshmallow_class` will manually set a marshmallow schema's `additionalProperties` attr.\nto True so that JSON objects with extra properties do not raise errors; as a result properties are picked and\nfilled in as necessary.", "docstring_sections": [{"type": "markdown", "value": "Sub-class specifying meta information for Marshmallow.\n\nCurrently only sets `unknown` flag to `EXCLUDE`. This is done to mirror Ludwig behavior: unknown properties are\nexcluded from `load` calls so that the marshmallow_dataclass package can be used but\n`get_custom_schema_from_marshmallow_class` will manually set a marshmallow schema's `additionalProperties` attr.\nto True so that JSON objects with extra properties do not raise errors; as a result properties are picked and\nfilled in as necessary."}], "source": {"code": "    class Meta:\n        \"\"\"Sub-class specifying meta information for Marshmallow.\n\n        Currently only sets `unknown` flag to `EXCLUDE`. This is done to mirror Ludwig behavior: unknown properties are\n        excluded from `load` calls so that the marshmallow_dataclass package can be used but\n        `get_custom_schema_from_marshmallow_class` will manually set a marshmallow schema's `additionalProperties` attr.\n        to True so that JSON objects with extra properties do not raise errors; as a result properties are picked and\n        filled in as necessary.\n        \"\"\"\n\n        unknown = EXCLUDE\n        \"Flag that sets marshmallow `load` calls to ignore unknown properties passed as a parameter.\"\n", "line_start": 49}, "children": {"ludwig.models.trainer.TrainerConfig.Schema.Meta.unknown": {"name": "unknown", "path": "ludwig.models.trainer.TrainerConfig.Schema.Meta.unknown", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/models/trainer.py", "relative_file_path": "ludwig/models/trainer.py", "properties": [], "parent_path": "ludwig.models.trainer.TrainerConfig.Schema.Meta", "has_contents": true, "docstring": "Flag that sets marshmallow `load` calls to ignore unknown properties passed as a parameter.", "docstring_sections": [{"type": "markdown", "value": "Flag that sets marshmallow `load` calls to ignore unknown properties passed as a parameter."}], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": ""}}, "attributes": ["ludwig.models.trainer.TrainerConfig.Schema.Meta.unknown"], "methods": [], "functions": [], "modules": [], "classes": [], "bases": ["object"]}, "ludwig.models.trainer.TrainerConfig.Schema._declared_fields": {"name": "_declared_fields", "path": "ludwig.models.trainer.TrainerConfig.Schema._declared_fields", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/models/trainer.py", "relative_file_path": "ludwig/models/trainer.py", "properties": ["private"], "parent_path": "ludwig.models.trainer.TrainerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": ""}, "ludwig.models.trainer.TrainerConfig.Schema._hooks": {"name": "_hooks", "path": "ludwig.models.trainer.TrainerConfig.Schema._hooks", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/models/trainer.py", "relative_file_path": "ludwig/models/trainer.py", "properties": ["private"], "parent_path": "ludwig.models.trainer.TrainerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": ""}, "ludwig.models.trainer.TrainerConfig.Schema.opts": {"name": "opts", "path": "ludwig.models.trainer.TrainerConfig.Schema.opts", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/models/trainer.py", "relative_file_path": "ludwig/models/trainer.py", "properties": [], "parent_path": "ludwig.models.trainer.TrainerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": ""}, "ludwig.models.trainer.TrainerConfig.Schema.optimizer": {"name": "optimizer", "path": "ludwig.models.trainer.TrainerConfig.Schema.optimizer", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/models/trainer.py", "relative_file_path": "ludwig/models/trainer.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.models.trainer.TrainerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "OptimizerMarshmallowField"}, "ludwig.models.trainer.TrainerConfig.Schema.epochs": {"name": "epochs", "path": "ludwig.models.trainer.TrainerConfig.Schema.epochs", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/models/trainer.py", "relative_file_path": "ludwig/models/trainer.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.models.trainer.TrainerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "Integer"}, "ludwig.models.trainer.TrainerConfig.Schema.regularization_lambda": {"name": "regularization_lambda", "path": "ludwig.models.trainer.TrainerConfig.Schema.regularization_lambda", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/models/trainer.py", "relative_file_path": "ludwig/models/trainer.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.models.trainer.TrainerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "Float"}, "ludwig.models.trainer.TrainerConfig.Schema.regularization_type": {"name": "regularization_type", "path": "ludwig.models.trainer.TrainerConfig.Schema.regularization_type", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/models/trainer.py", "relative_file_path": "ludwig/models/trainer.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.models.trainer.TrainerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "String"}, "ludwig.models.trainer.TrainerConfig.Schema.should_shuffle": {"name": "should_shuffle", "path": "ludwig.models.trainer.TrainerConfig.Schema.should_shuffle", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/models/trainer.py", "relative_file_path": "ludwig/models/trainer.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.models.trainer.TrainerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "Boolean"}, "ludwig.models.trainer.TrainerConfig.Schema.learning_rate": {"name": "learning_rate", "path": "ludwig.models.trainer.TrainerConfig.Schema.learning_rate", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/models/trainer.py", "relative_file_path": "ludwig/models/trainer.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.models.trainer.TrainerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "IntegerOrStringOptionsField"}, "ludwig.models.trainer.TrainerConfig.Schema.batch_size": {"name": "batch_size", "path": "ludwig.models.trainer.TrainerConfig.Schema.batch_size", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/models/trainer.py", "relative_file_path": "ludwig/models/trainer.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.models.trainer.TrainerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "IntegerOrStringOptionsField"}, "ludwig.models.trainer.TrainerConfig.Schema.eval_batch_size": {"name": "eval_batch_size", "path": "ludwig.models.trainer.TrainerConfig.Schema.eval_batch_size", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/models/trainer.py", "relative_file_path": "ludwig/models/trainer.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.models.trainer.TrainerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "IntegerOrStringOptionsField"}, "ludwig.models.trainer.TrainerConfig.Schema.early_stop": {"name": "early_stop", "path": "ludwig.models.trainer.TrainerConfig.Schema.early_stop", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/models/trainer.py", "relative_file_path": "ludwig/models/trainer.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.models.trainer.TrainerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "Integer"}, "ludwig.models.trainer.TrainerConfig.Schema.reduce_learning_rate_on_plateau": {"name": "reduce_learning_rate_on_plateau", "path": "ludwig.models.trainer.TrainerConfig.Schema.reduce_learning_rate_on_plateau", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/models/trainer.py", "relative_file_path": "ludwig/models/trainer.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.models.trainer.TrainerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "Float"}, "ludwig.models.trainer.TrainerConfig.Schema.reduce_learning_rate_on_plateau_patience": {"name": "reduce_learning_rate_on_plateau_patience", "path": "ludwig.models.trainer.TrainerConfig.Schema.reduce_learning_rate_on_plateau_patience", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/models/trainer.py", "relative_file_path": "ludwig/models/trainer.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.models.trainer.TrainerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "Integer"}, "ludwig.models.trainer.TrainerConfig.Schema.reduce_learning_rate_on_plateau_rate": {"name": "reduce_learning_rate_on_plateau_rate", "path": "ludwig.models.trainer.TrainerConfig.Schema.reduce_learning_rate_on_plateau_rate", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/models/trainer.py", "relative_file_path": "ludwig/models/trainer.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.models.trainer.TrainerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "Float"}, "ludwig.models.trainer.TrainerConfig.Schema.reduce_learning_rate_eval_metric": {"name": "reduce_learning_rate_eval_metric", "path": "ludwig.models.trainer.TrainerConfig.Schema.reduce_learning_rate_eval_metric", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/models/trainer.py", "relative_file_path": "ludwig/models/trainer.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.models.trainer.TrainerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "String"}, "ludwig.models.trainer.TrainerConfig.Schema.reduce_learning_rate_eval_split": {"name": "reduce_learning_rate_eval_split", "path": "ludwig.models.trainer.TrainerConfig.Schema.reduce_learning_rate_eval_split", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/models/trainer.py", "relative_file_path": "ludwig/models/trainer.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.models.trainer.TrainerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "String"}, "ludwig.models.trainer.TrainerConfig.Schema.increase_batch_size_on_plateau": {"name": "increase_batch_size_on_plateau", "path": "ludwig.models.trainer.TrainerConfig.Schema.increase_batch_size_on_plateau", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/models/trainer.py", "relative_file_path": "ludwig/models/trainer.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.models.trainer.TrainerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "Integer"}, "ludwig.models.trainer.TrainerConfig.Schema.increase_batch_size_on_plateau_patience": {"name": "increase_batch_size_on_plateau_patience", "path": "ludwig.models.trainer.TrainerConfig.Schema.increase_batch_size_on_plateau_patience", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/models/trainer.py", "relative_file_path": "ludwig/models/trainer.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.models.trainer.TrainerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "Integer"}, "ludwig.models.trainer.TrainerConfig.Schema.increase_batch_size_on_plateau_rate": {"name": "increase_batch_size_on_plateau_rate", "path": "ludwig.models.trainer.TrainerConfig.Schema.increase_batch_size_on_plateau_rate", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/models/trainer.py", "relative_file_path": "ludwig/models/trainer.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.models.trainer.TrainerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "Float"}, "ludwig.models.trainer.TrainerConfig.Schema.increase_batch_size_on_plateau_max": {"name": "increase_batch_size_on_plateau_max", "path": "ludwig.models.trainer.TrainerConfig.Schema.increase_batch_size_on_plateau_max", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/models/trainer.py", "relative_file_path": "ludwig/models/trainer.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.models.trainer.TrainerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "Integer"}, "ludwig.models.trainer.TrainerConfig.Schema.increase_batch_size_eval_metric": {"name": "increase_batch_size_eval_metric", "path": "ludwig.models.trainer.TrainerConfig.Schema.increase_batch_size_eval_metric", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/models/trainer.py", "relative_file_path": "ludwig/models/trainer.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.models.trainer.TrainerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "String"}, "ludwig.models.trainer.TrainerConfig.Schema.increase_batch_size_eval_split": {"name": "increase_batch_size_eval_split", "path": "ludwig.models.trainer.TrainerConfig.Schema.increase_batch_size_eval_split", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/models/trainer.py", "relative_file_path": "ludwig/models/trainer.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.models.trainer.TrainerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "String"}, "ludwig.models.trainer.TrainerConfig.Schema.decay": {"name": "decay", "path": "ludwig.models.trainer.TrainerConfig.Schema.decay", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/models/trainer.py", "relative_file_path": "ludwig/models/trainer.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.models.trainer.TrainerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "Boolean"}, "ludwig.models.trainer.TrainerConfig.Schema.decay_steps": {"name": "decay_steps", "path": "ludwig.models.trainer.TrainerConfig.Schema.decay_steps", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/models/trainer.py", "relative_file_path": "ludwig/models/trainer.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.models.trainer.TrainerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "Integer"}, "ludwig.models.trainer.TrainerConfig.Schema.decay_rate": {"name": "decay_rate", "path": "ludwig.models.trainer.TrainerConfig.Schema.decay_rate", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/models/trainer.py", "relative_file_path": "ludwig/models/trainer.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.models.trainer.TrainerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "Float"}, "ludwig.models.trainer.TrainerConfig.Schema.staircase": {"name": "staircase", "path": "ludwig.models.trainer.TrainerConfig.Schema.staircase", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/models/trainer.py", "relative_file_path": "ludwig/models/trainer.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.models.trainer.TrainerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "Boolean"}, "ludwig.models.trainer.TrainerConfig.Schema.gradient_clipping": {"name": "gradient_clipping", "path": "ludwig.models.trainer.TrainerConfig.Schema.gradient_clipping", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/models/trainer.py", "relative_file_path": "ludwig/models/trainer.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.models.trainer.TrainerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "ClipperMarshmallowField"}, "ludwig.models.trainer.TrainerConfig.Schema.validation_field": {"name": "validation_field", "path": "ludwig.models.trainer.TrainerConfig.Schema.validation_field", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/models/trainer.py", "relative_file_path": "ludwig/models/trainer.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.models.trainer.TrainerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "String"}, "ludwig.models.trainer.TrainerConfig.Schema.validation_metric": {"name": "validation_metric", "path": "ludwig.models.trainer.TrainerConfig.Schema.validation_metric", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/models/trainer.py", "relative_file_path": "ludwig/models/trainer.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.models.trainer.TrainerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "String"}, "ludwig.models.trainer.TrainerConfig.Schema.learning_rate_warmup_epochs": {"name": "learning_rate_warmup_epochs", "path": "ludwig.models.trainer.TrainerConfig.Schema.learning_rate_warmup_epochs", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/models/trainer.py", "relative_file_path": "ludwig/models/trainer.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.models.trainer.TrainerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "Float"}}, "attributes": ["ludwig.models.trainer.TrainerConfig.Schema._declared_fields", "ludwig.models.trainer.TrainerConfig.Schema._hooks", "ludwig.models.trainer.TrainerConfig.Schema.opts", "ludwig.models.trainer.TrainerConfig.Schema.optimizer", "ludwig.models.trainer.TrainerConfig.Schema.epochs", "ludwig.models.trainer.TrainerConfig.Schema.regularization_lambda", "ludwig.models.trainer.TrainerConfig.Schema.regularization_type", "ludwig.models.trainer.TrainerConfig.Schema.should_shuffle", "ludwig.models.trainer.TrainerConfig.Schema.learning_rate", "ludwig.models.trainer.TrainerConfig.Schema.batch_size", "ludwig.models.trainer.TrainerConfig.Schema.eval_batch_size", "ludwig.models.trainer.TrainerConfig.Schema.early_stop", "ludwig.models.trainer.TrainerConfig.Schema.reduce_learning_rate_on_plateau", "ludwig.models.trainer.TrainerConfig.Schema.reduce_learning_rate_on_plateau_patience", "ludwig.models.trainer.TrainerConfig.Schema.reduce_learning_rate_on_plateau_rate", "ludwig.models.trainer.TrainerConfig.Schema.reduce_learning_rate_eval_metric", "ludwig.models.trainer.TrainerConfig.Schema.reduce_learning_rate_eval_split", "ludwig.models.trainer.TrainerConfig.Schema.increase_batch_size_on_plateau", "ludwig.models.trainer.TrainerConfig.Schema.increase_batch_size_on_plateau_patience", "ludwig.models.trainer.TrainerConfig.Schema.increase_batch_size_on_plateau_rate", "ludwig.models.trainer.TrainerConfig.Schema.increase_batch_size_on_plateau_max", "ludwig.models.trainer.TrainerConfig.Schema.increase_batch_size_eval_metric", "ludwig.models.trainer.TrainerConfig.Schema.increase_batch_size_eval_split", "ludwig.models.trainer.TrainerConfig.Schema.decay", "ludwig.models.trainer.TrainerConfig.Schema.decay_steps", "ludwig.models.trainer.TrainerConfig.Schema.decay_rate", "ludwig.models.trainer.TrainerConfig.Schema.staircase", "ludwig.models.trainer.TrainerConfig.Schema.gradient_clipping", "ludwig.models.trainer.TrainerConfig.Schema.validation_field", "ludwig.models.trainer.TrainerConfig.Schema.validation_metric", "ludwig.models.trainer.TrainerConfig.Schema.learning_rate_warmup_epochs"], "methods": [], "functions": [], "modules": [], "classes": ["ludwig.models.trainer.TrainerConfig.Schema.Meta"], "bases": ["marshmallow_dataclass._base_schema.<locals>.BaseSchema"]}, "ludwig.models.trainer.TrainerConfig.__eq__": {"name": "__eq__", "path": "ludwig.models.trainer.TrainerConfig.__eq__", "category": "method", "file_path": "/home/ksbrar/work/ludwig/ludwig/models/trainer.py", "relative_file_path": "ludwig/models/trainer.py", "properties": ["special"], "parent_path": "ludwig.models.trainer.TrainerConfig", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "signature": {"parameters": [{"kind": "POSITIONAL_OR_KEYWORD", "name": "self"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "other"}]}}, "ludwig.models.trainer.TrainerConfig.__init__": {"name": "__init__", "path": "ludwig.models.trainer.TrainerConfig.__init__", "category": "method", "file_path": "/home/ksbrar/work/ludwig/ludwig/models/trainer.py", "relative_file_path": "ludwig/models/trainer.py", "properties": ["special"], "parent_path": "ludwig.models.trainer.TrainerConfig", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "signature": {"parameters": [{"kind": "POSITIONAL_OR_KEYWORD", "name": "self"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "optimizer", "annotation": "BaseOptimizerConfig", "default": "<factory>"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "epochs", "annotation": "int", "default": "100"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "regularization_lambda", "annotation": "float", "default": "0.0"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "regularization_type", "annotation": "Optional[str]", "default": "'l2'"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "should_shuffle", "annotation": "bool", "default": "True"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "learning_rate", "annotation": "float", "default": "0.001"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "batch_size", "annotation": "Union[int, str]", "default": "128"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "eval_batch_size", "annotation": "Union[NoneType, int, str]", "default": "None"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "early_stop", "annotation": "int", "default": "5"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "reduce_learning_rate_on_plateau", "annotation": "float", "default": "0.0"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "reduce_learning_rate_on_plateau_patience", "annotation": "int", "default": "5"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "reduce_learning_rate_on_plateau_rate", "annotation": "float", "default": "0.5"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "reduce_learning_rate_eval_metric", "annotation": "str", "default": "'loss'"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "reduce_learning_rate_eval_split", "annotation": "str", "default": "'training'"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "increase_batch_size_on_plateau", "annotation": "int", "default": "0"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "increase_batch_size_on_plateau_patience", "annotation": "int", "default": "5"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "increase_batch_size_on_plateau_rate", "annotation": "float", "default": "2.0"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "increase_batch_size_on_plateau_max", "annotation": "int", "default": "512"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "increase_batch_size_eval_metric", "annotation": "str", "default": "'loss'"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "increase_batch_size_eval_split", "annotation": "str", "default": "'training'"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "decay", "annotation": "bool", "default": "False"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "decay_steps", "annotation": "int", "default": "10000"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "decay_rate", "annotation": "float", "default": "0.96"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "staircase", "annotation": "bool", "default": "False"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "gradient_clipping", "annotation": "Optional[ludwig.modules.optimization_modules.ClipperConfig]", "default": "<factory>"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "validation_field", "annotation": "str", "default": "'combined'"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "validation_metric", "annotation": "str", "default": "'loss'"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "learning_rate_warmup_epochs", "annotation": "float", "default": "1.0"}], "return_annotation": "None"}}, "ludwig.models.trainer.TrainerConfig.__repr__": {"name": "__repr__", "path": "ludwig.models.trainer.TrainerConfig.__repr__", "category": "method", "file_path": "/home/ksbrar/work/ludwig/ludwig/models/trainer.py", "relative_file_path": "ludwig/models/trainer.py", "properties": ["special"], "parent_path": "ludwig.models.trainer.TrainerConfig", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "signature": {"parameters": [{"kind": "POSITIONAL_OR_KEYWORD", "name": "self"}]}}, "ludwig.models.trainer.TrainerConfig.batch_size": {"name": "batch_size", "path": "ludwig.models.trainer.TrainerConfig.batch_size", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/models/trainer.py", "relative_file_path": "ludwig/models/trainer.py", "properties": ["dataclass-field"], "parent_path": "ludwig.models.trainer.TrainerConfig", "has_contents": true, "docstring": "Size of batch to pass to the model for training (default: 128).", "docstring_sections": [{"type": "markdown", "value": "Size of batch to pass to the model for training (default: 128)."}], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "Union[int, str]"}, "ludwig.models.trainer.TrainerConfig.decay": {"name": "decay", "path": "ludwig.models.trainer.TrainerConfig.decay", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/models/trainer.py", "relative_file_path": "ludwig/models/trainer.py", "properties": ["dataclass-field"], "parent_path": "ludwig.models.trainer.TrainerConfig", "has_contents": true, "docstring": "Turn on exponential decay of the learning rate (default: False).", "docstring_sections": [{"type": "markdown", "value": "Turn on exponential decay of the learning rate (default: False)."}], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "bool"}, "ludwig.models.trainer.TrainerConfig.decay_rate": {"name": "decay_rate", "path": "ludwig.models.trainer.TrainerConfig.decay_rate", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/models/trainer.py", "relative_file_path": "ludwig/models/trainer.py", "properties": ["dataclass-field"], "parent_path": "ludwig.models.trainer.TrainerConfig", "has_contents": true, "docstring": "TODO: Document parameters. (default: 0.96).", "docstring_sections": [{"type": "markdown", "value": "TODO: Document parameters. (default: 0.96)."}], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "float"}, "ludwig.models.trainer.TrainerConfig.decay_steps": {"name": "decay_steps", "path": "ludwig.models.trainer.TrainerConfig.decay_steps", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/models/trainer.py", "relative_file_path": "ludwig/models/trainer.py", "properties": ["dataclass-field"], "parent_path": "ludwig.models.trainer.TrainerConfig", "has_contents": true, "docstring": "TODO: Document parameters. (default: 10000).", "docstring_sections": [{"type": "markdown", "value": "TODO: Document parameters. (default: 10000)."}], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "int"}, "ludwig.models.trainer.TrainerConfig.early_stop": {"name": "early_stop", "path": "ludwig.models.trainer.TrainerConfig.early_stop", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/models/trainer.py", "relative_file_path": "ludwig/models/trainer.py", "properties": ["dataclass-field"], "parent_path": "ludwig.models.trainer.TrainerConfig", "has_contents": true, "docstring": "How many epochs without any improvement in the `validation_metric` triggers the algorithm to stop. Can be set to\n-1, which disables early_stop (default: 5).", "docstring_sections": [{"type": "markdown", "value": "How many epochs without any improvement in the `validation_metric` triggers the algorithm to stop. Can be set to\n-1, which disables early_stop (default: 5)."}], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "int"}, "ludwig.models.trainer.TrainerConfig.epochs": {"name": "epochs", "path": "ludwig.models.trainer.TrainerConfig.epochs", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/models/trainer.py", "relative_file_path": "ludwig/models/trainer.py", "properties": ["dataclass-field"], "parent_path": "ludwig.models.trainer.TrainerConfig", "has_contents": true, "docstring": "Number of epochs the algorithm is intended to be run over (default: 100).", "docstring_sections": [{"type": "markdown", "value": "Number of epochs the algorithm is intended to be run over (default: 100)."}], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "int"}, "ludwig.models.trainer.TrainerConfig.eval_batch_size": {"name": "eval_batch_size", "path": "ludwig.models.trainer.TrainerConfig.eval_batch_size", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/models/trainer.py", "relative_file_path": "ludwig/models/trainer.py", "properties": ["dataclass-field"], "parent_path": "ludwig.models.trainer.TrainerConfig", "has_contents": true, "docstring": "Size of batch to pass to the model for evaluation (default: 'auto').", "docstring_sections": [{"type": "markdown", "value": "Size of batch to pass to the model for evaluation (default: 'auto')."}], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "Union[NoneType, int, str]"}, "ludwig.models.trainer.TrainerConfig.increase_batch_size_eval_metric": {"name": "increase_batch_size_eval_metric", "path": "ludwig.models.trainer.TrainerConfig.increase_batch_size_eval_metric", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/models/trainer.py", "relative_file_path": "ludwig/models/trainer.py", "properties": ["dataclass-field"], "parent_path": "ludwig.models.trainer.TrainerConfig", "has_contents": true, "docstring": "TODO: Document parameters. (default: 'loss').", "docstring_sections": [{"type": "markdown", "value": "TODO: Document parameters. (default: 'loss')."}], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "str"}, "ludwig.models.trainer.TrainerConfig.increase_batch_size_eval_split": {"name": "increase_batch_size_eval_split", "path": "ludwig.models.trainer.TrainerConfig.increase_batch_size_eval_split", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/models/trainer.py", "relative_file_path": "ludwig/models/trainer.py", "properties": ["dataclass-field"], "parent_path": "ludwig.models.trainer.TrainerConfig", "has_contents": true, "docstring": "TODO: Document parameters. (default: 'training').", "docstring_sections": [{"type": "markdown", "value": "TODO: Document parameters. (default: 'training')."}], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "str"}, "ludwig.models.trainer.TrainerConfig.increase_batch_size_on_plateau": {"name": "increase_batch_size_on_plateau", "path": "ludwig.models.trainer.TrainerConfig.increase_batch_size_on_plateau", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/models/trainer.py", "relative_file_path": "ludwig/models/trainer.py", "properties": ["dataclass-field"], "parent_path": "ludwig.models.trainer.TrainerConfig", "has_contents": true, "docstring": "Number to increase the batch size by on a plateau (default: 0).", "docstring_sections": [{"type": "markdown", "value": "Number to increase the batch size by on a plateau (default: 0)."}], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "int"}, "ludwig.models.trainer.TrainerConfig.increase_batch_size_on_plateau_max": {"name": "increase_batch_size_on_plateau_max", "path": "ludwig.models.trainer.TrainerConfig.increase_batch_size_on_plateau_max", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/models/trainer.py", "relative_file_path": "ludwig/models/trainer.py", "properties": ["dataclass-field"], "parent_path": "ludwig.models.trainer.TrainerConfig", "has_contents": true, "docstring": "Maximum size of the batch (default: 512).", "docstring_sections": [{"type": "markdown", "value": "Maximum size of the batch (default: 512)."}], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "int"}, "ludwig.models.trainer.TrainerConfig.increase_batch_size_on_plateau_patience": {"name": "increase_batch_size_on_plateau_patience", "path": "ludwig.models.trainer.TrainerConfig.increase_batch_size_on_plateau_patience", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/models/trainer.py", "relative_file_path": "ludwig/models/trainer.py", "properties": ["dataclass-field"], "parent_path": "ludwig.models.trainer.TrainerConfig", "has_contents": true, "docstring": "How many epochs to wait for before increasing the batch size (default: 5).", "docstring_sections": [{"type": "markdown", "value": "How many epochs to wait for before increasing the batch size (default: 5)."}], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "int"}, "ludwig.models.trainer.TrainerConfig.increase_batch_size_on_plateau_rate": {"name": "increase_batch_size_on_plateau_rate", "path": "ludwig.models.trainer.TrainerConfig.increase_batch_size_on_plateau_rate", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/models/trainer.py", "relative_file_path": "ludwig/models/trainer.py", "properties": ["dataclass-field"], "parent_path": "ludwig.models.trainer.TrainerConfig", "has_contents": true, "docstring": "Rate at which the batch size increases (default: 2.0).", "docstring_sections": [{"type": "markdown", "value": "Rate at which the batch size increases (default: 2.0)."}], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "float"}, "ludwig.models.trainer.TrainerConfig.learning_rate": {"name": "learning_rate", "path": "ludwig.models.trainer.TrainerConfig.learning_rate", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/models/trainer.py", "relative_file_path": "ludwig/models/trainer.py", "properties": ["dataclass-field"], "parent_path": "ludwig.models.trainer.TrainerConfig", "has_contents": true, "docstring": "Learning rate specified in configuration, represents how much to scale the gradients by. If 'auto',\n`tune_learning_rate` must be called before training to estimate the optimal learning rate. (default: 0.001).", "docstring_sections": [{"type": "markdown", "value": "Learning rate specified in configuration, represents how much to scale the gradients by. If 'auto',\n`tune_learning_rate` must be called before training to estimate the optimal learning rate. (default: 0.001)."}], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "float"}, "ludwig.models.trainer.TrainerConfig.learning_rate_warmup_epochs": {"name": "learning_rate_warmup_epochs", "path": "ludwig.models.trainer.TrainerConfig.learning_rate_warmup_epochs", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/models/trainer.py", "relative_file_path": "ludwig/models/trainer.py", "properties": ["dataclass-field"], "parent_path": "ludwig.models.trainer.TrainerConfig", "has_contents": true, "docstring": "Number of epochs to warmup the learning rate for (default: 1.0).", "docstring_sections": [{"type": "markdown", "value": "Number of epochs to warmup the learning rate for (default: 1.0)."}], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "float"}, "ludwig.models.trainer.TrainerConfig.reduce_learning_rate_eval_metric": {"name": "reduce_learning_rate_eval_metric", "path": "ludwig.models.trainer.TrainerConfig.reduce_learning_rate_eval_metric", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/models/trainer.py", "relative_file_path": "ludwig/models/trainer.py", "properties": ["dataclass-field"], "parent_path": "ludwig.models.trainer.TrainerConfig", "has_contents": true, "docstring": "TODO: Document parameters. (default: `ludwig.constants.LOSS`).", "docstring_sections": [{"type": "markdown", "value": "TODO: Document parameters. (default: `ludwig.constants.LOSS`)."}], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "str"}, "ludwig.models.trainer.TrainerConfig.reduce_learning_rate_eval_split": {"name": "reduce_learning_rate_eval_split", "path": "ludwig.models.trainer.TrainerConfig.reduce_learning_rate_eval_split", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/models/trainer.py", "relative_file_path": "ludwig/models/trainer.py", "properties": ["dataclass-field"], "parent_path": "ludwig.models.trainer.TrainerConfig", "has_contents": true, "docstring": "TODO (default: `ludwig.constants.TRAINING`).", "docstring_sections": [{"type": "markdown", "value": "TODO (default: `ludwig.constants.TRAINING`)."}], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "str"}, "ludwig.models.trainer.TrainerConfig.reduce_learning_rate_on_plateau": {"name": "reduce_learning_rate_on_plateau", "path": "ludwig.models.trainer.TrainerConfig.reduce_learning_rate_on_plateau", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/models/trainer.py", "relative_file_path": "ludwig/models/trainer.py", "properties": ["dataclass-field"], "parent_path": "ludwig.models.trainer.TrainerConfig", "has_contents": true, "docstring": "Reduces the learning rate when the algorithm hits a plateau (i.e. the performance on the validation does not\nimprove). (default: 0.0).", "docstring_sections": [{"type": "markdown", "value": "Reduces the learning rate when the algorithm hits a plateau (i.e. the performance on the validation does not\nimprove). (default: 0.0)."}], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "float"}, "ludwig.models.trainer.TrainerConfig.reduce_learning_rate_on_plateau_patience": {"name": "reduce_learning_rate_on_plateau_patience", "path": "ludwig.models.trainer.TrainerConfig.reduce_learning_rate_on_plateau_patience", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/models/trainer.py", "relative_file_path": "ludwig/models/trainer.py", "properties": ["dataclass-field"], "parent_path": "ludwig.models.trainer.TrainerConfig", "has_contents": true, "docstring": "How many epochs have to pass before the learning rate reduces (default: 5).", "docstring_sections": [{"type": "markdown", "value": "How many epochs have to pass before the learning rate reduces (default: 5)."}], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "int"}, "ludwig.models.trainer.TrainerConfig.reduce_learning_rate_on_plateau_rate": {"name": "reduce_learning_rate_on_plateau_rate", "path": "ludwig.models.trainer.TrainerConfig.reduce_learning_rate_on_plateau_rate", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/models/trainer.py", "relative_file_path": "ludwig/models/trainer.py", "properties": ["dataclass-field"], "parent_path": "ludwig.models.trainer.TrainerConfig", "has_contents": true, "docstring": "Rate at which we reduce the learning rate (default: 0.5).", "docstring_sections": [{"type": "markdown", "value": "Rate at which we reduce the learning rate (default: 0.5)."}], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "float"}, "ludwig.models.trainer.TrainerConfig.regularization_lambda": {"name": "regularization_lambda", "path": "ludwig.models.trainer.TrainerConfig.regularization_lambda", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/models/trainer.py", "relative_file_path": "ludwig/models/trainer.py", "properties": ["dataclass-field"], "parent_path": "ludwig.models.trainer.TrainerConfig", "has_contents": true, "docstring": "Strength of the $L2$ regularization (default: 0.0).", "docstring_sections": [{"type": "markdown", "value": "Strength of the $L2$ regularization (default: 0.0)."}], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "float"}, "ludwig.models.trainer.TrainerConfig.regularization_type": {"name": "regularization_type", "path": "ludwig.models.trainer.TrainerConfig.regularization_type", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/models/trainer.py", "relative_file_path": "ludwig/models/trainer.py", "properties": ["dataclass-field"], "parent_path": "ludwig.models.trainer.TrainerConfig", "has_contents": true, "docstring": "Type of regularization, one of ('l1', 'l2', 'l1_l2', None) (default: 'l2').", "docstring_sections": [{"type": "markdown", "value": "Type of regularization, one of ('l1', 'l2', 'l1_l2', None) (default: 'l2')."}], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "Optional[str]"}, "ludwig.models.trainer.TrainerConfig.should_shuffle": {"name": "should_shuffle", "path": "ludwig.models.trainer.TrainerConfig.should_shuffle", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/models/trainer.py", "relative_file_path": "ludwig/models/trainer.py", "properties": ["dataclass-field"], "parent_path": "ludwig.models.trainer.TrainerConfig", "has_contents": true, "docstring": "Whether to shuffle batches during training when true (default: True).", "docstring_sections": [{"type": "markdown", "value": "Whether to shuffle batches during training when true (default: True)."}], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "bool"}, "ludwig.models.trainer.TrainerConfig.staircase": {"name": "staircase", "path": "ludwig.models.trainer.TrainerConfig.staircase", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/models/trainer.py", "relative_file_path": "ludwig/models/trainer.py", "properties": ["dataclass-field"], "parent_path": "ludwig.models.trainer.TrainerConfig", "has_contents": true, "docstring": "Decays the learning rate at discrete intervals (default: False).", "docstring_sections": [{"type": "markdown", "value": "Decays the learning rate at discrete intervals (default: False)."}], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "bool"}, "ludwig.models.trainer.TrainerConfig.validation_field": {"name": "validation_field", "path": "ludwig.models.trainer.TrainerConfig.validation_field", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/models/trainer.py", "relative_file_path": "ludwig/models/trainer.py", "properties": ["dataclass-field"], "parent_path": "ludwig.models.trainer.TrainerConfig", "has_contents": true, "docstring": "First output feature, by default it is set as the same field of the first output feature (default:\n`ludwig.constants.COMBINED`).", "docstring_sections": [{"type": "markdown", "value": "First output feature, by default it is set as the same field of the first output feature (default:\n`ludwig.constants.COMBINED`)."}], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "str"}, "ludwig.models.trainer.TrainerConfig.validation_metric": {"name": "validation_metric", "path": "ludwig.models.trainer.TrainerConfig.validation_metric", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/models/trainer.py", "relative_file_path": "ludwig/models/trainer.py", "properties": ["dataclass-field"], "parent_path": "ludwig.models.trainer.TrainerConfig", "has_contents": true, "docstring": "Metric used on `validation_field`, set by default to accuracy (default: `ludwig.constants.LOSS`).", "docstring_sections": [{"type": "markdown", "value": "Metric used on `validation_field`, set by default to accuracy (default: `ludwig.constants.LOSS`)."}], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "str"}, "ludwig.models.trainer.TrainerConfig.optimizer": {"name": "optimizer", "path": "ludwig.models.trainer.TrainerConfig.optimizer", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/models/trainer.py", "relative_file_path": "ludwig/models/trainer.py", "properties": ["dataclass-field"], "parent_path": "ludwig.models.trainer.TrainerConfig", "has_contents": true, "docstring": "Instance of `ludwig.modules.optimization_modules.BaseOptimizerConfig` that specifies a torch-supported optimizer\nand its attributes (default: `ludwig.modules.optimization_modules.AdamOptimizer()`).", "docstring_sections": [{"type": "markdown", "value": "Instance of `ludwig.modules.optimization_modules.BaseOptimizerConfig` that specifies a torch-supported optimizer\nand its attributes (default: `ludwig.modules.optimization_modules.AdamOptimizer()`)."}], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "BaseOptimizerConfig"}, "ludwig.models.trainer.TrainerConfig.gradient_clipping": {"name": "gradient_clipping", "path": "ludwig.models.trainer.TrainerConfig.gradient_clipping", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/models/trainer.py", "relative_file_path": "ludwig/models/trainer.py", "properties": ["dataclass-field"], "parent_path": "ludwig.models.trainer.TrainerConfig", "has_contents": true, "docstring": "Instance of `ludwig.modules.optimization_modules.ClipperConfig` that sets gradient clipping params.\n(default: `ludwig.modules.optimization_modules.ClipperConfig()`)", "docstring_sections": [{"type": "markdown", "value": "Instance of `ludwig.modules.optimization_modules.ClipperConfig` that sets gradient clipping params.\n(default: `ludwig.modules.optimization_modules.ClipperConfig()`)"}], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "Optional[ludwig.modules.optimization_modules.ClipperConfig]"}}, "attributes": ["ludwig.models.trainer.TrainerConfig.optimizer", "ludwig.models.trainer.TrainerConfig.epochs", "ludwig.models.trainer.TrainerConfig.regularization_lambda", "ludwig.models.trainer.TrainerConfig.regularization_type", "ludwig.models.trainer.TrainerConfig.should_shuffle", "ludwig.models.trainer.TrainerConfig.learning_rate", "ludwig.models.trainer.TrainerConfig.batch_size", "ludwig.models.trainer.TrainerConfig.eval_batch_size", "ludwig.models.trainer.TrainerConfig.early_stop", "ludwig.models.trainer.TrainerConfig.reduce_learning_rate_on_plateau", "ludwig.models.trainer.TrainerConfig.reduce_learning_rate_on_plateau_patience", "ludwig.models.trainer.TrainerConfig.reduce_learning_rate_on_plateau_rate", "ludwig.models.trainer.TrainerConfig.reduce_learning_rate_eval_metric", "ludwig.models.trainer.TrainerConfig.reduce_learning_rate_eval_split", "ludwig.models.trainer.TrainerConfig.increase_batch_size_on_plateau", "ludwig.models.trainer.TrainerConfig.increase_batch_size_on_plateau_patience", "ludwig.models.trainer.TrainerConfig.increase_batch_size_on_plateau_rate", "ludwig.models.trainer.TrainerConfig.increase_batch_size_on_plateau_max", "ludwig.models.trainer.TrainerConfig.increase_batch_size_eval_metric", "ludwig.models.trainer.TrainerConfig.increase_batch_size_eval_split", "ludwig.models.trainer.TrainerConfig.decay", "ludwig.models.trainer.TrainerConfig.decay_steps", "ludwig.models.trainer.TrainerConfig.decay_rate", "ludwig.models.trainer.TrainerConfig.staircase", "ludwig.models.trainer.TrainerConfig.gradient_clipping", "ludwig.models.trainer.TrainerConfig.validation_field", "ludwig.models.trainer.TrainerConfig.validation_metric", "ludwig.models.trainer.TrainerConfig.learning_rate_warmup_epochs"], "methods": ["ludwig.models.trainer.TrainerConfig.__eq__", "ludwig.models.trainer.TrainerConfig.__init__", "ludwig.models.trainer.TrainerConfig.__repr__"], "functions": [], "modules": [], "classes": ["ludwig.models.trainer.TrainerConfig.Schema"], "bases": ["ludwig.utils.marshmallow_schema_utils.BaseMarshmallowConfig"]}]}, "AdadeltaOptimizerConfig": {"loading_errors": [], "parsing_errors": {}, "objects": [{"name": "AdadeltaOptimizerConfig", "path": "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig", "category": "class", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["dataclass"], "parent_path": "ludwig.modules.optimization_modules", "has_contents": true, "docstring": "Parameters for adadelta optimization.", "docstring_sections": [{"type": "markdown", "value": "Parameters for adadelta optimization."}], "source": {"code": "class AdadeltaOptimizerConfig(BaseOptimizerConfig):\n    \"\"\"Parameters for adadelta optimization.\"\"\"\n\n    torch_type: ClassVar[torch.optim.Optimizer] = torch.optim.Adadelta\n    \"Points to `torch.optim.Adadelta`.\"\n\n    type: str = \"adadelta\"\n    \"\"\"Must be 'adadelta' - corresponds to name in `ludwig.modules.optimization_modules.optimizer_registry`\n       (default: 'adadelta')\"\"\"\n\n    rho: float = FloatRange(default=0.95, min=0.0, max=1.0)\n    \"(default: 0.95)\"\n\n    eps: float = NonNegativeFloat(default=1e-08)\n    \"(default: 1e-08)\"\n\n    # Defaults taken from https://pytorch.org/docs/stable/generated/torch.optim.Adadelta.html#torch.optim.Adadelta :\n    lr: float = FloatRange(default=1.0, min=0.0, max=1.0)\n    weight_decay: float = NonNegativeFloat(default=0.0)\n", "line_start": 135}, "children": {"ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.Schema": {"name": "Schema", "path": "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.Schema", "category": "class", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["marshmallow-model"], "parent_path": "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig", "has_contents": true, "docstring": "", "docstring_sections": [], "source": {}, "children": {"ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.Schema.Meta": {"name": "Meta", "path": "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.Schema.Meta", "category": "class", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": [], "parent_path": "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.Schema", "has_contents": true, "docstring": "Sub-class specifying meta information for Marshmallow.\n\nCurrently only sets `unknown` flag to `EXCLUDE`. This is done to mirror Ludwig behavior: unknown properties are\nexcluded from `load` calls so that the marshmallow_dataclass package can be used but\n`get_custom_schema_from_marshmallow_class` will manually set a marshmallow schema's `additionalProperties` attr.\nto True so that JSON objects with extra properties do not raise errors; as a result properties are picked and\nfilled in as necessary.", "docstring_sections": [{"type": "markdown", "value": "Sub-class specifying meta information for Marshmallow.\n\nCurrently only sets `unknown` flag to `EXCLUDE`. This is done to mirror Ludwig behavior: unknown properties are\nexcluded from `load` calls so that the marshmallow_dataclass package can be used but\n`get_custom_schema_from_marshmallow_class` will manually set a marshmallow schema's `additionalProperties` attr.\nto True so that JSON objects with extra properties do not raise errors; as a result properties are picked and\nfilled in as necessary."}], "source": {"code": "    class Meta:\n        \"\"\"Sub-class specifying meta information for Marshmallow.\n\n        Currently only sets `unknown` flag to `EXCLUDE`. This is done to mirror Ludwig behavior: unknown properties are\n        excluded from `load` calls so that the marshmallow_dataclass package can be used but\n        `get_custom_schema_from_marshmallow_class` will manually set a marshmallow schema's `additionalProperties` attr.\n        to True so that JSON objects with extra properties do not raise errors; as a result properties are picked and\n        filled in as necessary.\n        \"\"\"\n\n        unknown = EXCLUDE\n        \"Flag that sets marshmallow `load` calls to ignore unknown properties passed as a parameter.\"\n", "line_start": 49}, "children": {"ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.Schema.Meta.unknown": {"name": "unknown", "path": "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.Schema.Meta.unknown", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": [], "parent_path": "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.Schema.Meta", "has_contents": true, "docstring": "Flag that sets marshmallow `load` calls to ignore unknown properties passed as a parameter.", "docstring_sections": [{"type": "markdown", "value": "Flag that sets marshmallow `load` calls to ignore unknown properties passed as a parameter."}], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": ""}}, "attributes": ["ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.Schema.Meta.unknown"], "methods": [], "functions": [], "modules": [], "classes": [], "bases": ["object"]}, "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.Schema._declared_fields": {"name": "_declared_fields", "path": "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.Schema._declared_fields", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["private"], "parent_path": "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": ""}, "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.Schema._hooks": {"name": "_hooks", "path": "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.Schema._hooks", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["private"], "parent_path": "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": ""}, "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.Schema.opts": {"name": "opts", "path": "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.Schema.opts", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": [], "parent_path": "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": ""}, "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.Schema.validate_type": {"name": "validate_type", "path": "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.Schema.validate_type", "category": "method", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": [], "parent_path": "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.Schema", "has_contents": true, "docstring": "Workaround to enforce immutable `type` in defined optimizer classes.\n\n:param data: Any-typed object that should be a string correctly identifying the optimizer type.", "docstring_sections": [{"type": "markdown", "value": "Workaround to enforce immutable `type` in defined optimizer classes."}, {"type": "parameters", "value": [{"description": "Any-typed object that should be a string correctly identifying the optimizer type.", "annotation": "", "name": "data", "kind": "POSITIONAL_OR_KEYWORD", "default": "", "is_optional": false, "is_required": true, "is_args": false, "is_kwargs": false}]}], "source": {"code": "    @validates(\"type\")\n    def validate_type(self, data, **kwargs):\n        \"\"\"Workaround to enforce immutable `type` in defined optimizer classes.\n\n        :param data: Any-typed object that should be a string correctly identifying the optimizer type.\n        \"\"\"\n        if not isinstance(data, str):\n            raise ValidationError(\n                f\"{self.__class__.__name__} expects type of field `type` to be `str`, instead received '{data}'\"\n            )\n        default = self.declared_fields[\"type\"].dump_default\n        if default is not missing and data != default:\n            # Handle aliases:\n            if optimizer_registry[default] == optimizer_registry[data]:\n                return\n            raise ValidationError(\n                f\"{self.__class__.__name__} expects value of field `type` to be '{default}', instead received '{data}'\"\n            )\n", "line_start": 62}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "signature": {"parameters": [{"kind": "POSITIONAL_OR_KEYWORD", "name": "self"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "data"}, {"kind": "VAR_KEYWORD", "name": "kwargs"}]}}, "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.Schema.type": {"name": "type", "path": "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.Schema.type", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "String"}, "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.Schema.rho": {"name": "rho", "path": "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.Schema.rho", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "Float"}, "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.Schema.eps": {"name": "eps", "path": "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.Schema.eps", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "Float"}, "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.Schema.lr": {"name": "lr", "path": "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.Schema.lr", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "Float"}, "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.Schema.weight_decay": {"name": "weight_decay", "path": "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.Schema.weight_decay", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "Float"}}, "attributes": ["ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.Schema._declared_fields", "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.Schema._hooks", "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.Schema.opts", "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.Schema.type", "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.Schema.rho", "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.Schema.eps", "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.Schema.lr", "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.Schema.weight_decay"], "methods": ["ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.Schema.validate_type"], "functions": [], "modules": [], "classes": ["ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.Schema.Meta"], "bases": ["marshmallow_dataclass._base_schema.<locals>.BaseSchema"]}, "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.__eq__": {"name": "__eq__", "path": "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.__eq__", "category": "method", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["special"], "parent_path": "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig", "has_contents": false, "docstring": "", "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "signature": {"parameters": [{"kind": "POSITIONAL_OR_KEYWORD", "name": "self"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "other"}]}}, "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.__init__": {"name": "__init__", "path": "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.__init__", "category": "method", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["special"], "parent_path": "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig", "has_contents": false, "docstring": "", "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "signature": {"parameters": [{"kind": "POSITIONAL_OR_KEYWORD", "name": "self"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "type", "annotation": "str", "default": "'adadelta'"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "rho", "annotation": "float", "default": "0.95"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "eps", "annotation": "float", "default": "1e-08"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "lr", "annotation": "float", "default": "1.0"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "weight_decay", "annotation": "float", "default": "0.0"}], "return_annotation": "None"}}, "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.__repr__": {"name": "__repr__", "path": "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.__repr__", "category": "method", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["special"], "parent_path": "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig", "has_contents": false, "docstring": "", "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "signature": {"parameters": [{"kind": "POSITIONAL_OR_KEYWORD", "name": "self"}]}}, "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.eps": {"name": "eps", "path": "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.eps", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["dataclass-field"], "parent_path": "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig", "has_contents": true, "docstring": "(default: 1e-08)", "docstring_sections": [{"type": "markdown", "value": "(default: 1e-08)"}], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "float"}, "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.lr": {"name": "lr", "path": "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.lr", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["dataclass-field"], "parent_path": "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "float"}, "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.rho": {"name": "rho", "path": "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.rho", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["dataclass-field"], "parent_path": "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig", "has_contents": true, "docstring": "(default: 0.95)", "docstring_sections": [{"type": "markdown", "value": "(default: 0.95)"}], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "float"}, "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.torch_type": {"name": "torch_type", "path": "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.torch_type", "category": "class", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": [], "parent_path": "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig", "has_contents": true, "docstring": "Implements Adadelta algorithm.\n\n.. math::\n   \\begin{aligned}\n        &\\rule{110mm}{0.4pt}                                                                 \\\\\n        &\\textbf{input}      : \\gamma \\text{ (lr)}, \\: \\theta_0 \\text{ (params)},\n            \\: f(\\theta) \\text{ (objective)}, \\: \\rho \\text{ (decay)},\n            \\: \\lambda \\text{ (weight decay)}                                                \\\\\n        &\\textbf{initialize} :  v_0  \\leftarrow 0 \\: \\text{ (square avg)},\n            \\: u_0 \\leftarrow 0 \\: \\text{ (accumulate variables)}                     \\\\[-1.ex]\n        &\\rule{110mm}{0.4pt}                                                                 \\\\\n        &\\textbf{for} \\: t=1 \\: \\textbf{to} \\: \\ldots \\: \\textbf{do}                         \\\\\n        &\\hspace{5mm}g_t           \\leftarrow   \\nabla_{\\theta} f_t (\\theta_{t-1})           \\\\\n        &\\hspace{5mm}if \\: \\lambda \\neq 0                                                    \\\\\n        &\\hspace{10mm} g_t \\leftarrow g_t + \\lambda  \\theta_{t-1}                            \\\\\n        &\\hspace{5mm} v_t      \\leftarrow v_{t-1} \\rho + g^2_t (1 - \\rho)                    \\\\\n        &\\hspace{5mm}\\Delta x_t    \\leftarrow   \\frac{\\sqrt{u_{t-1} +\n            \\epsilon }}{ \\sqrt{v_t + \\epsilon}  }g_t \\hspace{21mm}                           \\\\\n        &\\hspace{5mm} u_t  \\leftarrow   u_{t-1}  \\rho +\n             \\Delta x^2_t  (1 - \\rho)                                                        \\\\\n        &\\hspace{5mm}\\theta_t      \\leftarrow   \\theta_{t-1} - \\gamma  \\Delta x_t            \\\\\n        &\\rule{110mm}{0.4pt}                                                          \\\\[-1.ex]\n        &\\bf{return} \\:  \\theta_t                                                     \\\\[-1.ex]\n        &\\rule{110mm}{0.4pt}                                                          \\\\[-1.ex]\n   \\end{aligned}\n\nFor further details regarding the algorithm we refer to `ADADELTA: An Adaptive Learning Rate Method`_.\n\nArgs:\n    params (iterable): iterable of parameters to optimize or dicts defining\n        parameter groups\n    rho (float, optional): coefficient used for computing a running average\n        of squared gradients (default: 0.9)\n    eps (float, optional): term added to the denominator to improve\n        numerical stability (default: 1e-6)\n    lr (float, optional): coefficient that scale delta before it is applied\n        to the parameters (default: 1.0)\n    weight_decay (float, optional): weight decay (L2 penalty) (default: 0)\n\n.. _ADADELTA\\: An Adaptive Learning Rate Method:\n    https://arxiv.org/abs/1212.5701", "docstring_sections": [{"type": "markdown", "value": "Implements Adadelta algorithm.\n\n.. math::\n   \\begin{aligned}\n        &\\rule{110mm}{0.4pt}                                                                 \\\\\n        &\\textbf{input}      : \\gamma \\text{ (lr)}, \\: \\theta_0 \\text{ (params)},\n            \\: f(\\theta) \\text{ (objective)}, \\: \\rho \\text{ (decay)},\n            \\: \\lambda \\text{ (weight decay)}                                                \\\\\n        &\\textbf{initialize} :  v_0  \\leftarrow 0 \\: \\text{ (square avg)},\n            \\: u_0 \\leftarrow 0 \\: \\text{ (accumulate variables)}                     \\\\[-1.ex]\n        &\\rule{110mm}{0.4pt}                                                                 \\\\\n        &\\textbf{for} \\: t=1 \\: \\textbf{to} \\: \\ldots \\: \\textbf{do}                         \\\\\n        &\\hspace{5mm}g_t           \\leftarrow   \\nabla_{\\theta} f_t (\\theta_{t-1})           \\\\\n        &\\hspace{5mm}if \\: \\lambda \\neq 0                                                    \\\\\n        &\\hspace{10mm} g_t \\leftarrow g_t + \\lambda  \\theta_{t-1}                            \\\\\n        &\\hspace{5mm} v_t      \\leftarrow v_{t-1} \\rho + g^2_t (1 - \\rho)                    \\\\\n        &\\hspace{5mm}\\Delta x_t    \\leftarrow   \\frac{\\sqrt{u_{t-1} +\n            \\epsilon }}{ \\sqrt{v_t + \\epsilon}  }g_t \\hspace{21mm}                           \\\\\n        &\\hspace{5mm} u_t  \\leftarrow   u_{t-1}  \\rho +\n             \\Delta x^2_t  (1 - \\rho)                                                        \\\\\n        &\\hspace{5mm}\\theta_t      \\leftarrow   \\theta_{t-1} - \\gamma  \\Delta x_t            \\\\\n        &\\rule{110mm}{0.4pt}                                                          \\\\[-1.ex]\n        &\\bf{return} \\:  \\theta_t                                                     \\\\[-1.ex]\n        &\\rule{110mm}{0.4pt}                                                          \\\\[-1.ex]\n   \\end{aligned}\n\nFor further details regarding the algorithm we refer to `ADADELTA: An Adaptive Learning Rate Method`_.\n\nArgs:\n    params (iterable): iterable of parameters to optimize or dicts defining\n        parameter groups\n    rho (float, optional): coefficient used for computing a running average\n        of squared gradients (default: 0.9)\n    eps (float, optional): term added to the denominator to improve\n        numerical stability (default: 1e-6)\n    lr (float, optional): coefficient that scale delta before it is applied\n        to the parameters (default: 1.0)\n    weight_decay (float, optional): weight decay (L2 penalty) (default: 0)\n\n.. _ADADELTA\\: An Adaptive Learning Rate Method:\n    https://arxiv.org/abs/1212.5701"}], "source": {"code": "class Adadelta(Optimizer):\n    r\"\"\"Implements Adadelta algorithm.\n\n    .. math::\n       \\begin{aligned}\n            &\\rule{110mm}{0.4pt}                                                                 \\\\\n            &\\textbf{input}      : \\gamma \\text{ (lr)}, \\: \\theta_0 \\text{ (params)},\n                \\: f(\\theta) \\text{ (objective)}, \\: \\rho \\text{ (decay)},\n                \\: \\lambda \\text{ (weight decay)}                                                \\\\\n            &\\textbf{initialize} :  v_0  \\leftarrow 0 \\: \\text{ (square avg)},\n                \\: u_0 \\leftarrow 0 \\: \\text{ (accumulate variables)}                     \\\\[-1.ex]\n            &\\rule{110mm}{0.4pt}                                                                 \\\\\n            &\\textbf{for} \\: t=1 \\: \\textbf{to} \\: \\ldots \\: \\textbf{do}                         \\\\\n            &\\hspace{5mm}g_t           \\leftarrow   \\nabla_{\\theta} f_t (\\theta_{t-1})           \\\\\n            &\\hspace{5mm}if \\: \\lambda \\neq 0                                                    \\\\\n            &\\hspace{10mm} g_t \\leftarrow g_t + \\lambda  \\theta_{t-1}                            \\\\\n            &\\hspace{5mm} v_t      \\leftarrow v_{t-1} \\rho + g^2_t (1 - \\rho)                    \\\\\n            &\\hspace{5mm}\\Delta x_t    \\leftarrow   \\frac{\\sqrt{u_{t-1} +\n                \\epsilon }}{ \\sqrt{v_t + \\epsilon}  }g_t \\hspace{21mm}                           \\\\\n            &\\hspace{5mm} u_t  \\leftarrow   u_{t-1}  \\rho +\n                 \\Delta x^2_t  (1 - \\rho)                                                        \\\\\n            &\\hspace{5mm}\\theta_t      \\leftarrow   \\theta_{t-1} - \\gamma  \\Delta x_t            \\\\\n            &\\rule{110mm}{0.4pt}                                                          \\\\[-1.ex]\n            &\\bf{return} \\:  \\theta_t                                                     \\\\[-1.ex]\n            &\\rule{110mm}{0.4pt}                                                          \\\\[-1.ex]\n       \\end{aligned}\n\n    For further details regarding the algorithm we refer to `ADADELTA: An Adaptive Learning Rate Method`_.\n\n    Args:\n        params (iterable): iterable of parameters to optimize or dicts defining\n            parameter groups\n        rho (float, optional): coefficient used for computing a running average\n            of squared gradients (default: 0.9)\n        eps (float, optional): term added to the denominator to improve\n            numerical stability (default: 1e-6)\n        lr (float, optional): coefficient that scale delta before it is applied\n            to the parameters (default: 1.0)\n        weight_decay (float, optional): weight decay (L2 penalty) (default: 0)\n\n    .. _ADADELTA\\: An Adaptive Learning Rate Method:\n        https://arxiv.org/abs/1212.5701\n    \"\"\"\n\n    def __init__(self, params, lr=1.0, rho=0.9, eps=1e-6, weight_decay=0):\n        if not 0.0 <= lr:\n            raise ValueError(\"Invalid learning rate: {}\".format(lr))\n        if not 0.0 <= rho <= 1.0:\n            raise ValueError(\"Invalid rho value: {}\".format(rho))\n        if not 0.0 <= eps:\n            raise ValueError(\"Invalid epsilon value: {}\".format(eps))\n        if not 0.0 <= weight_decay:\n            raise ValueError(\"Invalid weight_decay value: {}\".format(weight_decay))\n\n        defaults = dict(lr=lr, rho=rho, eps=eps, weight_decay=weight_decay)\n        super(Adadelta, self).__init__(params, defaults)\n\n    @torch.no_grad()\n    def step(self, closure=None):\n        \"\"\"Performs a single optimization step.\n\n        Args:\n            closure (callable, optional): A closure that reevaluates the model\n                and returns the loss.\n        \"\"\"\n        loss = None\n        if closure is not None:\n            with torch.enable_grad():\n                loss = closure()\n\n        for group in self.param_groups:\n            params_with_grad = []\n            grads = []\n            square_avgs = []\n            acc_deltas = []\n            lr, rho, eps, weight_decay = group['lr'], group['rho'], group['eps'], group['weight_decay']\n\n            for p in group['params']:\n                if p.grad is None:\n                    continue\n                params_with_grad.append(p)\n                if p.grad.is_sparse:\n                    raise RuntimeError('Adadelta does not support sparse gradients')\n                grads.append(p.grad)\n\n                state = self.state[p]\n\n                # Lazy state initialization\n                if len(state) == 0:\n                    state['step'] = 0\n                    state['square_avg'] = torch.zeros_like(p, memory_format=torch.preserve_format)\n                    state['acc_delta'] = torch.zeros_like(p, memory_format=torch.preserve_format)\n\n                square_avgs.append(state['square_avg'])\n                acc_deltas.append(state['acc_delta'])\n\n                state['step'] += 1\n\n            F.adadelta(params_with_grad,\n                       grads,\n                       square_avgs,\n                       acc_deltas,\n                       lr=lr,\n                       rho=rho,\n                       eps=eps,\n                       weight_decay=weight_decay)\n\n        return loss\n", "line_start": 7}, "children": {"ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.torch_type.__init__": {"name": "__init__", "path": "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.torch_type.__init__", "category": "method", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["special"], "parent_path": "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.torch_type", "has_contents": false, "docstring": "", "docstring_sections": [], "source": {"code": "    def __init__(self, params, lr=1.0, rho=0.9, eps=1e-6, weight_decay=0):\n        if not 0.0 <= lr:\n            raise ValueError(\"Invalid learning rate: {}\".format(lr))\n        if not 0.0 <= rho <= 1.0:\n            raise ValueError(\"Invalid rho value: {}\".format(rho))\n        if not 0.0 <= eps:\n            raise ValueError(\"Invalid epsilon value: {}\".format(eps))\n        if not 0.0 <= weight_decay:\n            raise ValueError(\"Invalid weight_decay value: {}\".format(weight_decay))\n\n        defaults = dict(lr=lr, rho=rho, eps=eps, weight_decay=weight_decay)\n        super(Adadelta, self).__init__(params, defaults)\n", "line_start": 51}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "signature": {"parameters": [{"kind": "POSITIONAL_OR_KEYWORD", "name": "self"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "params"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "lr", "default": "1.0"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "rho", "default": "0.9"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "eps", "default": "1e-06"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "weight_decay", "default": "0"}]}}, "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.torch_type.step": {"name": "step", "path": "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.torch_type.step", "category": "method", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": [], "parent_path": "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.torch_type", "has_contents": true, "docstring": "Performs a single optimization step.\n\nArgs:\n    closure (callable, optional): A closure that reevaluates the model\n        and returns the loss.", "docstring_sections": [{"type": "markdown", "value": "Performs a single optimization step.\n\nArgs:\n    closure (callable, optional): A closure that reevaluates the model\n        and returns the loss."}], "source": {"code": "    @torch.no_grad()\n    def step(self, closure=None):\n        \"\"\"Performs a single optimization step.\n\n        Args:\n            closure (callable, optional): A closure that reevaluates the model\n                and returns the loss.\n        \"\"\"\n        loss = None\n        if closure is not None:\n            with torch.enable_grad():\n                loss = closure()\n\n        for group in self.param_groups:\n            params_with_grad = []\n            grads = []\n            square_avgs = []\n            acc_deltas = []\n            lr, rho, eps, weight_decay = group['lr'], group['rho'], group['eps'], group['weight_decay']\n\n            for p in group['params']:\n                if p.grad is None:\n                    continue\n                params_with_grad.append(p)\n                if p.grad.is_sparse:\n                    raise RuntimeError('Adadelta does not support sparse gradients')\n                grads.append(p.grad)\n\n                state = self.state[p]\n\n                # Lazy state initialization\n                if len(state) == 0:\n                    state['step'] = 0\n                    state['square_avg'] = torch.zeros_like(p, memory_format=torch.preserve_format)\n                    state['acc_delta'] = torch.zeros_like(p, memory_format=torch.preserve_format)\n\n                square_avgs.append(state['square_avg'])\n                acc_deltas.append(state['acc_delta'])\n\n                state['step'] += 1\n\n            F.adadelta(params_with_grad,\n                       grads,\n                       square_avgs,\n                       acc_deltas,\n                       lr=lr,\n                       rho=rho,\n                       eps=eps,\n                       weight_decay=weight_decay)\n\n        return loss\n", "line_start": 64}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "signature": {"parameters": [{"kind": "POSITIONAL_OR_KEYWORD", "name": "self"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "closure", "default": "None"}]}}}, "attributes": [], "methods": ["ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.torch_type.__init__", "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.torch_type.step"], "functions": [], "modules": [], "classes": [], "bases": ["torch.optim.optimizer.Optimizer"]}, "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.type": {"name": "type", "path": "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.type", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": [], "parent_path": "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig", "has_contents": true, "docstring": "Must be 'adadelta' - corresponds to name in `ludwig.modules.optimization_modules.optimizer_registry`\n(default: 'adadelta')", "docstring_sections": [{"type": "markdown", "value": "Must be 'adadelta' - corresponds to name in `ludwig.modules.optimization_modules.optimizer_registry`\n(default: 'adadelta')"}], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "str"}, "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.weight_decay": {"name": "weight_decay", "path": "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.weight_decay", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["dataclass-field"], "parent_path": "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "float"}}, "attributes": ["ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.type", "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.rho", "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.eps", "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.lr", "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.weight_decay"], "methods": ["ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.__eq__", "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.__init__", "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.__repr__"], "functions": [], "modules": [], "classes": ["ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.Schema", "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.torch_type"], "bases": ["ludwig.modules.optimization_modules.BaseOptimizerConfig"]}]}, "ConcatCombinerConfig": {"loading_errors": [], "parsing_errors": {}, "objects": [{"name": "ConcatCombinerConfig", "path": "ludwig.combiners.combiners.ConcatCombinerConfig", "category": "class", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["dataclass"], "parent_path": "ludwig.combiners.combiners", "has_contents": true, "docstring": "Parameters for concat combiner.", "docstring_sections": [{"type": "markdown", "value": "Parameters for concat combiner."}], "source": {"code": "class ConcatCombinerConfig(BaseCombinerConfig):\n    \"\"\"Parameters for concat combiner.\"\"\"\n\n    fc_layers: Optional[List[Dict[str, Any]]] = schema.DictList()\n    \"\"\"TODO: Document parameters. (default: None).\"\"\"\n\n    num_fc_layers: int = schema.NonNegativeInteger(default=0)\n    \"\"\"TODO: Document parameters. (default: 0).\"\"\"\n\n    output_size: int = schema.PositiveInteger(default=256)\n    \"\"\"Output size of a fully connected layer (default: 256).\"\"\"\n\n    use_bias: bool = True\n    \"\"\"Whether the layer uses a bias vector (default: True).\"\"\"\n\n    weights_initializer: Union[str, Dict] = schema.InitializerOrDict(default=\"xavier_uniform\")\n    \"\"\"TODO: Document parameters. (default: 'xavier_uniform').\"\"\"\n\n    bias_initializer: Union[str, Dict] = schema.InitializerOrDict(default=\"zeros\")\n    \"\"\"TODO: Document parameters. (default: 'zeros').\"\"\"\n\n    norm: Optional[str] = schema.StringOptions([\"batch\", \"layer\"])\n    \"\"\"TODO: Document parameters. (default: norm).\"\"\"\n\n    norm_params: Optional[dict] = schema.Dict()\n    \"\"\"TODO: Document parameters. (default: None).\"\"\"\n\n    activation: str = \"relu\"\n    \"\"\"TODO: Document parameters. (default: 'relu').\"\"\"\n\n    dropout: float = schema.FloatRange(default=0.0, min=0, max=1)\n    \"\"\"TODO: Document parameters. (default: 0.0).\"\"\"\n\n    flatten_inputs: bool = False\n    \"\"\"Whether to flatten input tensors to a vector (default: False).\"\"\"\n\n    residual: bool = False\n    \"\"\"Whether to add a residual connection to each fully connected layer block. All fully connected layers must have\n       the same size (default: False).\"\"\"\n", "line_start": 103}, "children": {"ludwig.combiners.combiners.ConcatCombinerConfig.Schema": {"name": "Schema", "path": "ludwig.combiners.combiners.ConcatCombinerConfig.Schema", "category": "class", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["marshmallow-model"], "parent_path": "ludwig.combiners.combiners.ConcatCombinerConfig", "has_contents": true, "docstring": "", "docstring_sections": [], "source": {}, "children": {"ludwig.combiners.combiners.ConcatCombinerConfig.Schema.Meta": {"name": "Meta", "path": "ludwig.combiners.combiners.ConcatCombinerConfig.Schema.Meta", "category": "class", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": [], "parent_path": "ludwig.combiners.combiners.ConcatCombinerConfig.Schema", "has_contents": true, "docstring": "Sub-class specifying meta information for Marshmallow.\n\nCurrently only sets `unknown` flag to `EXCLUDE`. This is done to mirror Ludwig behavior: unknown properties are\nexcluded from `load` calls so that the marshmallow_dataclass package can be used but\n`get_custom_schema_from_marshmallow_class` will manually set a marshmallow schema's `additionalProperties` attr.\nto True so that JSON objects with extra properties do not raise errors; as a result properties are picked and\nfilled in as necessary.", "docstring_sections": [{"type": "markdown", "value": "Sub-class specifying meta information for Marshmallow.\n\nCurrently only sets `unknown` flag to `EXCLUDE`. This is done to mirror Ludwig behavior: unknown properties are\nexcluded from `load` calls so that the marshmallow_dataclass package can be used but\n`get_custom_schema_from_marshmallow_class` will manually set a marshmallow schema's `additionalProperties` attr.\nto True so that JSON objects with extra properties do not raise errors; as a result properties are picked and\nfilled in as necessary."}], "source": {"code": "    class Meta:\n        \"\"\"Sub-class specifying meta information for Marshmallow.\n\n        Currently only sets `unknown` flag to `EXCLUDE`. This is done to mirror Ludwig behavior: unknown properties are\n        excluded from `load` calls so that the marshmallow_dataclass package can be used but\n        `get_custom_schema_from_marshmallow_class` will manually set a marshmallow schema's `additionalProperties` attr.\n        to True so that JSON objects with extra properties do not raise errors; as a result properties are picked and\n        filled in as necessary.\n        \"\"\"\n\n        unknown = EXCLUDE\n        \"Flag that sets marshmallow `load` calls to ignore unknown properties passed as a parameter.\"\n", "line_start": 49}, "children": {"ludwig.combiners.combiners.ConcatCombinerConfig.Schema.Meta.unknown": {"name": "unknown", "path": "ludwig.combiners.combiners.ConcatCombinerConfig.Schema.Meta.unknown", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": [], "parent_path": "ludwig.combiners.combiners.ConcatCombinerConfig.Schema.Meta", "has_contents": true, "docstring": "Flag that sets marshmallow `load` calls to ignore unknown properties passed as a parameter.", "docstring_sections": [{"type": "markdown", "value": "Flag that sets marshmallow `load` calls to ignore unknown properties passed as a parameter."}], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": ""}}, "attributes": ["ludwig.combiners.combiners.ConcatCombinerConfig.Schema.Meta.unknown"], "methods": [], "functions": [], "modules": [], "classes": [], "bases": ["object"]}, "ludwig.combiners.combiners.ConcatCombinerConfig.Schema._declared_fields": {"name": "_declared_fields", "path": "ludwig.combiners.combiners.ConcatCombinerConfig.Schema._declared_fields", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["private"], "parent_path": "ludwig.combiners.combiners.ConcatCombinerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": ""}, "ludwig.combiners.combiners.ConcatCombinerConfig.Schema._hooks": {"name": "_hooks", "path": "ludwig.combiners.combiners.ConcatCombinerConfig.Schema._hooks", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["private"], "parent_path": "ludwig.combiners.combiners.ConcatCombinerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": ""}, "ludwig.combiners.combiners.ConcatCombinerConfig.Schema.opts": {"name": "opts", "path": "ludwig.combiners.combiners.ConcatCombinerConfig.Schema.opts", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": [], "parent_path": "ludwig.combiners.combiners.ConcatCombinerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": ""}, "ludwig.combiners.combiners.ConcatCombinerConfig.Schema.fc_layers": {"name": "fc_layers", "path": "ludwig.combiners.combiners.ConcatCombinerConfig.Schema.fc_layers", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.combiners.combiners.ConcatCombinerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "List"}, "ludwig.combiners.combiners.ConcatCombinerConfig.Schema.num_fc_layers": {"name": "num_fc_layers", "path": "ludwig.combiners.combiners.ConcatCombinerConfig.Schema.num_fc_layers", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.combiners.combiners.ConcatCombinerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "Integer"}, "ludwig.combiners.combiners.ConcatCombinerConfig.Schema.output_size": {"name": "output_size", "path": "ludwig.combiners.combiners.ConcatCombinerConfig.Schema.output_size", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.combiners.combiners.ConcatCombinerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "Integer"}, "ludwig.combiners.combiners.ConcatCombinerConfig.Schema.use_bias": {"name": "use_bias", "path": "ludwig.combiners.combiners.ConcatCombinerConfig.Schema.use_bias", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.combiners.combiners.ConcatCombinerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "Boolean"}, "ludwig.combiners.combiners.ConcatCombinerConfig.Schema.weights_initializer": {"name": "weights_initializer", "path": "ludwig.combiners.combiners.ConcatCombinerConfig.Schema.weights_initializer", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.combiners.combiners.ConcatCombinerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "InitializerOptionsOrCustomDictField"}, "ludwig.combiners.combiners.ConcatCombinerConfig.Schema.bias_initializer": {"name": "bias_initializer", "path": "ludwig.combiners.combiners.ConcatCombinerConfig.Schema.bias_initializer", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.combiners.combiners.ConcatCombinerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "InitializerOptionsOrCustomDictField"}, "ludwig.combiners.combiners.ConcatCombinerConfig.Schema.norm": {"name": "norm", "path": "ludwig.combiners.combiners.ConcatCombinerConfig.Schema.norm", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.combiners.combiners.ConcatCombinerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "String"}, "ludwig.combiners.combiners.ConcatCombinerConfig.Schema.norm_params": {"name": "norm_params", "path": "ludwig.combiners.combiners.ConcatCombinerConfig.Schema.norm_params", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.combiners.combiners.ConcatCombinerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "Dict"}, "ludwig.combiners.combiners.ConcatCombinerConfig.Schema.activation": {"name": "activation", "path": "ludwig.combiners.combiners.ConcatCombinerConfig.Schema.activation", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.combiners.combiners.ConcatCombinerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "String"}, "ludwig.combiners.combiners.ConcatCombinerConfig.Schema.dropout": {"name": "dropout", "path": "ludwig.combiners.combiners.ConcatCombinerConfig.Schema.dropout", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.combiners.combiners.ConcatCombinerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "Float"}, "ludwig.combiners.combiners.ConcatCombinerConfig.Schema.flatten_inputs": {"name": "flatten_inputs", "path": "ludwig.combiners.combiners.ConcatCombinerConfig.Schema.flatten_inputs", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.combiners.combiners.ConcatCombinerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "Boolean"}, "ludwig.combiners.combiners.ConcatCombinerConfig.Schema.residual": {"name": "residual", "path": "ludwig.combiners.combiners.ConcatCombinerConfig.Schema.residual", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.combiners.combiners.ConcatCombinerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "Boolean"}}, "attributes": ["ludwig.combiners.combiners.ConcatCombinerConfig.Schema._declared_fields", "ludwig.combiners.combiners.ConcatCombinerConfig.Schema._hooks", "ludwig.combiners.combiners.ConcatCombinerConfig.Schema.opts", "ludwig.combiners.combiners.ConcatCombinerConfig.Schema.fc_layers", "ludwig.combiners.combiners.ConcatCombinerConfig.Schema.num_fc_layers", "ludwig.combiners.combiners.ConcatCombinerConfig.Schema.output_size", "ludwig.combiners.combiners.ConcatCombinerConfig.Schema.use_bias", "ludwig.combiners.combiners.ConcatCombinerConfig.Schema.weights_initializer", "ludwig.combiners.combiners.ConcatCombinerConfig.Schema.bias_initializer", "ludwig.combiners.combiners.ConcatCombinerConfig.Schema.norm", "ludwig.combiners.combiners.ConcatCombinerConfig.Schema.norm_params", "ludwig.combiners.combiners.ConcatCombinerConfig.Schema.activation", "ludwig.combiners.combiners.ConcatCombinerConfig.Schema.dropout", "ludwig.combiners.combiners.ConcatCombinerConfig.Schema.flatten_inputs", "ludwig.combiners.combiners.ConcatCombinerConfig.Schema.residual"], "methods": [], "functions": [], "modules": [], "classes": ["ludwig.combiners.combiners.ConcatCombinerConfig.Schema.Meta"], "bases": ["marshmallow_dataclass._base_schema.<locals>.BaseSchema"]}, "ludwig.combiners.combiners.ConcatCombinerConfig.__eq__": {"name": "__eq__", "path": "ludwig.combiners.combiners.ConcatCombinerConfig.__eq__", "category": "method", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["special"], "parent_path": "ludwig.combiners.combiners.ConcatCombinerConfig", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "signature": {"parameters": [{"kind": "POSITIONAL_OR_KEYWORD", "name": "self"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "other"}]}}, "ludwig.combiners.combiners.ConcatCombinerConfig.__init__": {"name": "__init__", "path": "ludwig.combiners.combiners.ConcatCombinerConfig.__init__", "category": "method", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["special"], "parent_path": "ludwig.combiners.combiners.ConcatCombinerConfig", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "signature": {"parameters": [{"kind": "POSITIONAL_OR_KEYWORD", "name": "self"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "fc_layers", "annotation": "Optional[List[Dict[str, Any]]]", "default": "<factory>"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "num_fc_layers", "annotation": "int", "default": "0"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "output_size", "annotation": "int", "default": "256"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "use_bias", "annotation": "bool", "default": "True"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "weights_initializer", "annotation": "Union[str, Dict]", "default": "'xavier_uniform'"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "bias_initializer", "annotation": "Union[str, Dict]", "default": "'zeros'"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "norm", "annotation": "Optional[str]", "default": "None"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "norm_params", "annotation": "Optional[dict]", "default": "<factory>"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "activation", "annotation": "str", "default": "'relu'"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "dropout", "annotation": "float", "default": "0.0"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "flatten_inputs", "annotation": "bool", "default": "False"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "residual", "annotation": "bool", "default": "False"}], "return_annotation": "None"}}, "ludwig.combiners.combiners.ConcatCombinerConfig.__repr__": {"name": "__repr__", "path": "ludwig.combiners.combiners.ConcatCombinerConfig.__repr__", "category": "method", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["special"], "parent_path": "ludwig.combiners.combiners.ConcatCombinerConfig", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "signature": {"parameters": [{"kind": "POSITIONAL_OR_KEYWORD", "name": "self"}]}}, "ludwig.combiners.combiners.ConcatCombinerConfig.activation": {"name": "activation", "path": "ludwig.combiners.combiners.ConcatCombinerConfig.activation", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["dataclass-field"], "parent_path": "ludwig.combiners.combiners.ConcatCombinerConfig", "has_contents": true, "docstring": "TODO: Document parameters. (default: 'relu').", "docstring_sections": [{"type": "markdown", "value": "TODO: Document parameters. (default: 'relu')."}], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "str"}, "ludwig.combiners.combiners.ConcatCombinerConfig.bias_initializer": {"name": "bias_initializer", "path": "ludwig.combiners.combiners.ConcatCombinerConfig.bias_initializer", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["dataclass-field"], "parent_path": "ludwig.combiners.combiners.ConcatCombinerConfig", "has_contents": true, "docstring": "TODO: Document parameters. (default: 'zeros').", "docstring_sections": [{"type": "markdown", "value": "TODO: Document parameters. (default: 'zeros')."}], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "Union[str, Dict]"}, "ludwig.combiners.combiners.ConcatCombinerConfig.dropout": {"name": "dropout", "path": "ludwig.combiners.combiners.ConcatCombinerConfig.dropout", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["dataclass-field"], "parent_path": "ludwig.combiners.combiners.ConcatCombinerConfig", "has_contents": true, "docstring": "TODO: Document parameters. (default: 0.0).", "docstring_sections": [{"type": "markdown", "value": "TODO: Document parameters. (default: 0.0)."}], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "float"}, "ludwig.combiners.combiners.ConcatCombinerConfig.flatten_inputs": {"name": "flatten_inputs", "path": "ludwig.combiners.combiners.ConcatCombinerConfig.flatten_inputs", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["dataclass-field"], "parent_path": "ludwig.combiners.combiners.ConcatCombinerConfig", "has_contents": true, "docstring": "Whether to flatten input tensors to a vector (default: False).", "docstring_sections": [{"type": "markdown", "value": "Whether to flatten input tensors to a vector (default: False)."}], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "bool"}, "ludwig.combiners.combiners.ConcatCombinerConfig.norm": {"name": "norm", "path": "ludwig.combiners.combiners.ConcatCombinerConfig.norm", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["dataclass-field"], "parent_path": "ludwig.combiners.combiners.ConcatCombinerConfig", "has_contents": true, "docstring": "TODO: Document parameters. (default: norm).", "docstring_sections": [{"type": "markdown", "value": "TODO: Document parameters. (default: norm)."}], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "Optional[str]"}, "ludwig.combiners.combiners.ConcatCombinerConfig.num_fc_layers": {"name": "num_fc_layers", "path": "ludwig.combiners.combiners.ConcatCombinerConfig.num_fc_layers", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["dataclass-field"], "parent_path": "ludwig.combiners.combiners.ConcatCombinerConfig", "has_contents": true, "docstring": "TODO: Document parameters. (default: 0).", "docstring_sections": [{"type": "markdown", "value": "TODO: Document parameters. (default: 0)."}], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "int"}, "ludwig.combiners.combiners.ConcatCombinerConfig.output_size": {"name": "output_size", "path": "ludwig.combiners.combiners.ConcatCombinerConfig.output_size", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["dataclass-field"], "parent_path": "ludwig.combiners.combiners.ConcatCombinerConfig", "has_contents": true, "docstring": "Output size of a fully connected layer (default: 256).", "docstring_sections": [{"type": "markdown", "value": "Output size of a fully connected layer (default: 256)."}], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "int"}, "ludwig.combiners.combiners.ConcatCombinerConfig.residual": {"name": "residual", "path": "ludwig.combiners.combiners.ConcatCombinerConfig.residual", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["dataclass-field"], "parent_path": "ludwig.combiners.combiners.ConcatCombinerConfig", "has_contents": true, "docstring": "Whether to add a residual connection to each fully connected layer block. All fully connected layers must have\nthe same size (default: False).", "docstring_sections": [{"type": "markdown", "value": "Whether to add a residual connection to each fully connected layer block. All fully connected layers must have\nthe same size (default: False)."}], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "bool"}, "ludwig.combiners.combiners.ConcatCombinerConfig.use_bias": {"name": "use_bias", "path": "ludwig.combiners.combiners.ConcatCombinerConfig.use_bias", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["dataclass-field"], "parent_path": "ludwig.combiners.combiners.ConcatCombinerConfig", "has_contents": true, "docstring": "Whether the layer uses a bias vector (default: True).", "docstring_sections": [{"type": "markdown", "value": "Whether the layer uses a bias vector (default: True)."}], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "bool"}, "ludwig.combiners.combiners.ConcatCombinerConfig.weights_initializer": {"name": "weights_initializer", "path": "ludwig.combiners.combiners.ConcatCombinerConfig.weights_initializer", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["dataclass-field"], "parent_path": "ludwig.combiners.combiners.ConcatCombinerConfig", "has_contents": true, "docstring": "TODO: Document parameters. (default: 'xavier_uniform').", "docstring_sections": [{"type": "markdown", "value": "TODO: Document parameters. (default: 'xavier_uniform')."}], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "Union[str, Dict]"}, "ludwig.combiners.combiners.ConcatCombinerConfig.fc_layers": {"name": "fc_layers", "path": "ludwig.combiners.combiners.ConcatCombinerConfig.fc_layers", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["dataclass-field"], "parent_path": "ludwig.combiners.combiners.ConcatCombinerConfig", "has_contents": true, "docstring": "TODO: Document parameters. (default: None).", "docstring_sections": [{"type": "markdown", "value": "TODO: Document parameters. (default: None)."}], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "Optional[List[Dict[str, Any]]]"}, "ludwig.combiners.combiners.ConcatCombinerConfig.norm_params": {"name": "norm_params", "path": "ludwig.combiners.combiners.ConcatCombinerConfig.norm_params", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["dataclass-field"], "parent_path": "ludwig.combiners.combiners.ConcatCombinerConfig", "has_contents": true, "docstring": "TODO: Document parameters. (default: None).", "docstring_sections": [{"type": "markdown", "value": "TODO: Document parameters. (default: None)."}], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "Optional[dict]"}}, "attributes": ["ludwig.combiners.combiners.ConcatCombinerConfig.fc_layers", "ludwig.combiners.combiners.ConcatCombinerConfig.num_fc_layers", "ludwig.combiners.combiners.ConcatCombinerConfig.output_size", "ludwig.combiners.combiners.ConcatCombinerConfig.use_bias", "ludwig.combiners.combiners.ConcatCombinerConfig.weights_initializer", "ludwig.combiners.combiners.ConcatCombinerConfig.bias_initializer", "ludwig.combiners.combiners.ConcatCombinerConfig.norm", "ludwig.combiners.combiners.ConcatCombinerConfig.norm_params", "ludwig.combiners.combiners.ConcatCombinerConfig.activation", "ludwig.combiners.combiners.ConcatCombinerConfig.dropout", "ludwig.combiners.combiners.ConcatCombinerConfig.flatten_inputs", "ludwig.combiners.combiners.ConcatCombinerConfig.residual"], "methods": ["ludwig.combiners.combiners.ConcatCombinerConfig.__eq__", "ludwig.combiners.combiners.ConcatCombinerConfig.__init__", "ludwig.combiners.combiners.ConcatCombinerConfig.__repr__"], "functions": [], "modules": [], "classes": ["ludwig.combiners.combiners.ConcatCombinerConfig.Schema"], "bases": ["ludwig.combiners.combiners.BaseCombinerConfig"]}]}, "TabTransformerCombinerConfig": {"loading_errors": [], "parsing_errors": {}, "objects": [{"name": "TabTransformerCombinerConfig", "path": "ludwig.combiners.combiners.TabTransformerCombinerConfig", "category": "class", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["dataclass"], "parent_path": "ludwig.combiners.combiners", "has_contents": true, "docstring": "Parameters for tab transformer combiner.", "docstring_sections": [{"type": "markdown", "value": "Parameters for tab transformer combiner."}], "source": {"code": "class TabTransformerCombinerConfig(BaseCombinerConfig, CommonTransformerConfig):\n    \"\"\"Parameters for tab transformer combiner.\"\"\"\n\n    embed_input_feature_name: Optional[Union[str, int]] = schema.Embed()\n    \"\"\"TODO: Document parameters. (default: None).\"\"\"\n\n    reduce_output: str = schema.ReductionOptions(default=\"concat\")\n    \"\"\"TODO: Document parameters. (default: 'concat').\"\"\"\n", "line_start": 740}, "children": {"ludwig.combiners.combiners.TabTransformerCombinerConfig.Schema": {"name": "Schema", "path": "ludwig.combiners.combiners.TabTransformerCombinerConfig.Schema", "category": "class", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["marshmallow-model"], "parent_path": "ludwig.combiners.combiners.TabTransformerCombinerConfig", "has_contents": true, "docstring": "", "docstring_sections": [], "source": {}, "children": {"ludwig.combiners.combiners.TabTransformerCombinerConfig.Schema.Meta": {"name": "Meta", "path": "ludwig.combiners.combiners.TabTransformerCombinerConfig.Schema.Meta", "category": "class", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": [], "parent_path": "ludwig.combiners.combiners.TabTransformerCombinerConfig.Schema", "has_contents": true, "docstring": "Sub-class specifying meta information for Marshmallow.\n\nCurrently only sets `unknown` flag to `EXCLUDE`. This is done to mirror Ludwig behavior: unknown properties are\nexcluded from `load` calls so that the marshmallow_dataclass package can be used but\n`get_custom_schema_from_marshmallow_class` will manually set a marshmallow schema's `additionalProperties` attr.\nto True so that JSON objects with extra properties do not raise errors; as a result properties are picked and\nfilled in as necessary.", "docstring_sections": [{"type": "markdown", "value": "Sub-class specifying meta information for Marshmallow.\n\nCurrently only sets `unknown` flag to `EXCLUDE`. This is done to mirror Ludwig behavior: unknown properties are\nexcluded from `load` calls so that the marshmallow_dataclass package can be used but\n`get_custom_schema_from_marshmallow_class` will manually set a marshmallow schema's `additionalProperties` attr.\nto True so that JSON objects with extra properties do not raise errors; as a result properties are picked and\nfilled in as necessary."}], "source": {"code": "    class Meta:\n        \"\"\"Sub-class specifying meta information for Marshmallow.\n\n        Currently only sets `unknown` flag to `EXCLUDE`. This is done to mirror Ludwig behavior: unknown properties are\n        excluded from `load` calls so that the marshmallow_dataclass package can be used but\n        `get_custom_schema_from_marshmallow_class` will manually set a marshmallow schema's `additionalProperties` attr.\n        to True so that JSON objects with extra properties do not raise errors; as a result properties are picked and\n        filled in as necessary.\n        \"\"\"\n\n        unknown = EXCLUDE\n        \"Flag that sets marshmallow `load` calls to ignore unknown properties passed as a parameter.\"\n", "line_start": 49}, "children": {"ludwig.combiners.combiners.TabTransformerCombinerConfig.Schema.Meta.unknown": {"name": "unknown", "path": "ludwig.combiners.combiners.TabTransformerCombinerConfig.Schema.Meta.unknown", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": [], "parent_path": "ludwig.combiners.combiners.TabTransformerCombinerConfig.Schema.Meta", "has_contents": true, "docstring": "Flag that sets marshmallow `load` calls to ignore unknown properties passed as a parameter.", "docstring_sections": [{"type": "markdown", "value": "Flag that sets marshmallow `load` calls to ignore unknown properties passed as a parameter."}], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": ""}}, "attributes": ["ludwig.combiners.combiners.TabTransformerCombinerConfig.Schema.Meta.unknown"], "methods": [], "functions": [], "modules": [], "classes": [], "bases": ["object"]}, "ludwig.combiners.combiners.TabTransformerCombinerConfig.Schema._declared_fields": {"name": "_declared_fields", "path": "ludwig.combiners.combiners.TabTransformerCombinerConfig.Schema._declared_fields", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["private"], "parent_path": "ludwig.combiners.combiners.TabTransformerCombinerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": ""}, "ludwig.combiners.combiners.TabTransformerCombinerConfig.Schema._hooks": {"name": "_hooks", "path": "ludwig.combiners.combiners.TabTransformerCombinerConfig.Schema._hooks", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["private"], "parent_path": "ludwig.combiners.combiners.TabTransformerCombinerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": ""}, "ludwig.combiners.combiners.TabTransformerCombinerConfig.Schema.opts": {"name": "opts", "path": "ludwig.combiners.combiners.TabTransformerCombinerConfig.Schema.opts", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": [], "parent_path": "ludwig.combiners.combiners.TabTransformerCombinerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": ""}, "ludwig.combiners.combiners.TabTransformerCombinerConfig.Schema.num_layers": {"name": "num_layers", "path": "ludwig.combiners.combiners.TabTransformerCombinerConfig.Schema.num_layers", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.combiners.combiners.TabTransformerCombinerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "Integer"}, "ludwig.combiners.combiners.TabTransformerCombinerConfig.Schema.hidden_size": {"name": "hidden_size", "path": "ludwig.combiners.combiners.TabTransformerCombinerConfig.Schema.hidden_size", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.combiners.combiners.TabTransformerCombinerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "Integer"}, "ludwig.combiners.combiners.TabTransformerCombinerConfig.Schema.num_heads": {"name": "num_heads", "path": "ludwig.combiners.combiners.TabTransformerCombinerConfig.Schema.num_heads", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.combiners.combiners.TabTransformerCombinerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "Integer"}, "ludwig.combiners.combiners.TabTransformerCombinerConfig.Schema.transformer_output_size": {"name": "transformer_output_size", "path": "ludwig.combiners.combiners.TabTransformerCombinerConfig.Schema.transformer_output_size", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.combiners.combiners.TabTransformerCombinerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "Integer"}, "ludwig.combiners.combiners.TabTransformerCombinerConfig.Schema.dropout": {"name": "dropout", "path": "ludwig.combiners.combiners.TabTransformerCombinerConfig.Schema.dropout", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.combiners.combiners.TabTransformerCombinerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "Float"}, "ludwig.combiners.combiners.TabTransformerCombinerConfig.Schema.fc_layers": {"name": "fc_layers", "path": "ludwig.combiners.combiners.TabTransformerCombinerConfig.Schema.fc_layers", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.combiners.combiners.TabTransformerCombinerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "List"}, "ludwig.combiners.combiners.TabTransformerCombinerConfig.Schema.num_fc_layers": {"name": "num_fc_layers", "path": "ludwig.combiners.combiners.TabTransformerCombinerConfig.Schema.num_fc_layers", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.combiners.combiners.TabTransformerCombinerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "Integer"}, "ludwig.combiners.combiners.TabTransformerCombinerConfig.Schema.output_size": {"name": "output_size", "path": "ludwig.combiners.combiners.TabTransformerCombinerConfig.Schema.output_size", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.combiners.combiners.TabTransformerCombinerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "Integer"}, "ludwig.combiners.combiners.TabTransformerCombinerConfig.Schema.use_bias": {"name": "use_bias", "path": "ludwig.combiners.combiners.TabTransformerCombinerConfig.Schema.use_bias", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.combiners.combiners.TabTransformerCombinerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "Boolean"}, "ludwig.combiners.combiners.TabTransformerCombinerConfig.Schema.weights_initializer": {"name": "weights_initializer", "path": "ludwig.combiners.combiners.TabTransformerCombinerConfig.Schema.weights_initializer", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.combiners.combiners.TabTransformerCombinerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "InitializerOptionsOrCustomDictField"}, "ludwig.combiners.combiners.TabTransformerCombinerConfig.Schema.bias_initializer": {"name": "bias_initializer", "path": "ludwig.combiners.combiners.TabTransformerCombinerConfig.Schema.bias_initializer", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.combiners.combiners.TabTransformerCombinerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "InitializerOptionsOrCustomDictField"}, "ludwig.combiners.combiners.TabTransformerCombinerConfig.Schema.norm": {"name": "norm", "path": "ludwig.combiners.combiners.TabTransformerCombinerConfig.Schema.norm", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.combiners.combiners.TabTransformerCombinerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "String"}, "ludwig.combiners.combiners.TabTransformerCombinerConfig.Schema.norm_params": {"name": "norm_params", "path": "ludwig.combiners.combiners.TabTransformerCombinerConfig.Schema.norm_params", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.combiners.combiners.TabTransformerCombinerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "Dict"}, "ludwig.combiners.combiners.TabTransformerCombinerConfig.Schema.fc_activation": {"name": "fc_activation", "path": "ludwig.combiners.combiners.TabTransformerCombinerConfig.Schema.fc_activation", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.combiners.combiners.TabTransformerCombinerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "String"}, "ludwig.combiners.combiners.TabTransformerCombinerConfig.Schema.fc_dropout": {"name": "fc_dropout", "path": "ludwig.combiners.combiners.TabTransformerCombinerConfig.Schema.fc_dropout", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.combiners.combiners.TabTransformerCombinerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "Float"}, "ludwig.combiners.combiners.TabTransformerCombinerConfig.Schema.fc_residual": {"name": "fc_residual", "path": "ludwig.combiners.combiners.TabTransformerCombinerConfig.Schema.fc_residual", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.combiners.combiners.TabTransformerCombinerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "Boolean"}, "ludwig.combiners.combiners.TabTransformerCombinerConfig.Schema.embed_input_feature_name": {"name": "embed_input_feature_name", "path": "ludwig.combiners.combiners.TabTransformerCombinerConfig.Schema.embed_input_feature_name", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.combiners.combiners.TabTransformerCombinerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "EmbedInputFeatureNameField"}, "ludwig.combiners.combiners.TabTransformerCombinerConfig.Schema.reduce_output": {"name": "reduce_output", "path": "ludwig.combiners.combiners.TabTransformerCombinerConfig.Schema.reduce_output", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.combiners.combiners.TabTransformerCombinerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "String"}}, "attributes": ["ludwig.combiners.combiners.TabTransformerCombinerConfig.Schema._declared_fields", "ludwig.combiners.combiners.TabTransformerCombinerConfig.Schema._hooks", "ludwig.combiners.combiners.TabTransformerCombinerConfig.Schema.opts", "ludwig.combiners.combiners.TabTransformerCombinerConfig.Schema.num_layers", "ludwig.combiners.combiners.TabTransformerCombinerConfig.Schema.hidden_size", "ludwig.combiners.combiners.TabTransformerCombinerConfig.Schema.num_heads", "ludwig.combiners.combiners.TabTransformerCombinerConfig.Schema.transformer_output_size", "ludwig.combiners.combiners.TabTransformerCombinerConfig.Schema.dropout", "ludwig.combiners.combiners.TabTransformerCombinerConfig.Schema.fc_layers", "ludwig.combiners.combiners.TabTransformerCombinerConfig.Schema.num_fc_layers", "ludwig.combiners.combiners.TabTransformerCombinerConfig.Schema.output_size", "ludwig.combiners.combiners.TabTransformerCombinerConfig.Schema.use_bias", "ludwig.combiners.combiners.TabTransformerCombinerConfig.Schema.weights_initializer", "ludwig.combiners.combiners.TabTransformerCombinerConfig.Schema.bias_initializer", "ludwig.combiners.combiners.TabTransformerCombinerConfig.Schema.norm", "ludwig.combiners.combiners.TabTransformerCombinerConfig.Schema.norm_params", "ludwig.combiners.combiners.TabTransformerCombinerConfig.Schema.fc_activation", "ludwig.combiners.combiners.TabTransformerCombinerConfig.Schema.fc_dropout", "ludwig.combiners.combiners.TabTransformerCombinerConfig.Schema.fc_residual", "ludwig.combiners.combiners.TabTransformerCombinerConfig.Schema.embed_input_feature_name", "ludwig.combiners.combiners.TabTransformerCombinerConfig.Schema.reduce_output"], "methods": [], "functions": [], "modules": [], "classes": ["ludwig.combiners.combiners.TabTransformerCombinerConfig.Schema.Meta"], "bases": ["marshmallow_dataclass._base_schema.<locals>.BaseSchema"]}, "ludwig.combiners.combiners.TabTransformerCombinerConfig.__eq__": {"name": "__eq__", "path": "ludwig.combiners.combiners.TabTransformerCombinerConfig.__eq__", "category": "method", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["special"], "parent_path": "ludwig.combiners.combiners.TabTransformerCombinerConfig", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "signature": {"parameters": [{"kind": "POSITIONAL_OR_KEYWORD", "name": "self"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "other"}]}}, "ludwig.combiners.combiners.TabTransformerCombinerConfig.__init__": {"name": "__init__", "path": "ludwig.combiners.combiners.TabTransformerCombinerConfig.__init__", "category": "method", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["special"], "parent_path": "ludwig.combiners.combiners.TabTransformerCombinerConfig", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "signature": {"parameters": [{"kind": "POSITIONAL_OR_KEYWORD", "name": "self"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "num_layers", "annotation": "int", "default": "1"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "hidden_size", "annotation": "int", "default": "256"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "num_heads", "annotation": "int", "default": "8"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "transformer_output_size", "annotation": "int", "default": "256"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "dropout", "annotation": "float", "default": "0.1"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "fc_layers", "annotation": "Optional[List[Dict[str, Any]]]", "default": "<factory>"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "num_fc_layers", "annotation": "int", "default": "0"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "output_size", "annotation": "int", "default": "256"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "use_bias", "annotation": "bool", "default": "True"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "weights_initializer", "annotation": "Union[str, Dict]", "default": "'xavier_uniform'"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "bias_initializer", "annotation": "Union[str, Dict]", "default": "'zeros'"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "norm", "annotation": "Optional[str]", "default": "None"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "norm_params", "annotation": "Optional[dict]", "default": "<factory>"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "fc_activation", "annotation": "str", "default": "'relu'"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "fc_dropout", "annotation": "float", "default": "0.0"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "fc_residual", "annotation": "bool", "default": "False"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "embed_input_feature_name", "annotation": "Union[str, int]", "default": "None"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "reduce_output", "annotation": "str", "default": "'concat'"}], "return_annotation": "None"}}, "ludwig.combiners.combiners.TabTransformerCombinerConfig.__repr__": {"name": "__repr__", "path": "ludwig.combiners.combiners.TabTransformerCombinerConfig.__repr__", "category": "method", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["special"], "parent_path": "ludwig.combiners.combiners.TabTransformerCombinerConfig", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "signature": {"parameters": [{"kind": "POSITIONAL_OR_KEYWORD", "name": "self"}]}}, "ludwig.combiners.combiners.TabTransformerCombinerConfig.embed_input_feature_name": {"name": "embed_input_feature_name", "path": "ludwig.combiners.combiners.TabTransformerCombinerConfig.embed_input_feature_name", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["dataclass-field"], "parent_path": "ludwig.combiners.combiners.TabTransformerCombinerConfig", "has_contents": true, "docstring": "TODO: Document parameters. (default: None).", "docstring_sections": [{"type": "markdown", "value": "TODO: Document parameters. (default: None)."}], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "Union[str, int]"}, "ludwig.combiners.combiners.TabTransformerCombinerConfig.reduce_output": {"name": "reduce_output", "path": "ludwig.combiners.combiners.TabTransformerCombinerConfig.reduce_output", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["dataclass-field"], "parent_path": "ludwig.combiners.combiners.TabTransformerCombinerConfig", "has_contents": true, "docstring": "TODO: Document parameters. (default: 'concat').", "docstring_sections": [{"type": "markdown", "value": "TODO: Document parameters. (default: 'concat')."}], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "str"}}, "attributes": ["ludwig.combiners.combiners.TabTransformerCombinerConfig.embed_input_feature_name", "ludwig.combiners.combiners.TabTransformerCombinerConfig.reduce_output"], "methods": ["ludwig.combiners.combiners.TabTransformerCombinerConfig.__eq__", "ludwig.combiners.combiners.TabTransformerCombinerConfig.__init__", "ludwig.combiners.combiners.TabTransformerCombinerConfig.__repr__"], "functions": [], "modules": [], "classes": ["ludwig.combiners.combiners.TabTransformerCombinerConfig.Schema"], "bases": ["ludwig.combiners.combiners.BaseCombinerConfig", "ludwig.combiners.combiners.CommonTransformerConfig"]}]}, "AdamaxOptimizerConfig": {"loading_errors": [], "parsing_errors": {}, "objects": [{"name": "AdamaxOptimizerConfig", "path": "ludwig.modules.optimization_modules.AdamaxOptimizerConfig", "category": "class", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["dataclass"], "parent_path": "ludwig.modules.optimization_modules", "has_contents": true, "docstring": "Parameters for adamax optimization.", "docstring_sections": [{"type": "markdown", "value": "Parameters for adamax optimization."}], "source": {"code": "class AdamaxOptimizerConfig(BaseOptimizerConfig):\n    \"\"\"Parameters for adamax optimization.\"\"\"\n\n    torch_type: ClassVar[torch.optim.Optimizer] = torch.optim.Adamax\n    \"Points to `torch.optim.Adamax`.\"\n\n    type: str = \"adamax\"\n    \"\"\"Must be 'adamax' - corresponds to name in `ludwig.modules.optimization_modules.optimizer_registry`\n       (default: 'adamax')\"\"\"\n\n    # Defaults taken from https://pytorch.org/docs/stable/generated/torch.optim.Adamax.html#torch.optim.Adamax :\n    lr: float = FloatRange(default=2e-3, min=0.0, max=1.0)\n    betas: Tuple[float, float] = FloatRangeTupleDataclassField(default=(0.9, 0.999))\n    eps: float = NonNegativeFloat(default=1e-08)\n    weight_decay: float = NonNegativeFloat(default=0.0)\n", "line_start": 181}, "children": {"ludwig.modules.optimization_modules.AdamaxOptimizerConfig.Schema": {"name": "Schema", "path": "ludwig.modules.optimization_modules.AdamaxOptimizerConfig.Schema", "category": "class", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["marshmallow-model"], "parent_path": "ludwig.modules.optimization_modules.AdamaxOptimizerConfig", "has_contents": true, "docstring": "", "docstring_sections": [], "source": {}, "children": {"ludwig.modules.optimization_modules.AdamaxOptimizerConfig.Schema.Meta": {"name": "Meta", "path": "ludwig.modules.optimization_modules.AdamaxOptimizerConfig.Schema.Meta", "category": "class", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": [], "parent_path": "ludwig.modules.optimization_modules.AdamaxOptimizerConfig.Schema", "has_contents": true, "docstring": "Sub-class specifying meta information for Marshmallow.\n\nCurrently only sets `unknown` flag to `EXCLUDE`. This is done to mirror Ludwig behavior: unknown properties are\nexcluded from `load` calls so that the marshmallow_dataclass package can be used but\n`get_custom_schema_from_marshmallow_class` will manually set a marshmallow schema's `additionalProperties` attr.\nto True so that JSON objects with extra properties do not raise errors; as a result properties are picked and\nfilled in as necessary.", "docstring_sections": [{"type": "markdown", "value": "Sub-class specifying meta information for Marshmallow.\n\nCurrently only sets `unknown` flag to `EXCLUDE`. This is done to mirror Ludwig behavior: unknown properties are\nexcluded from `load` calls so that the marshmallow_dataclass package can be used but\n`get_custom_schema_from_marshmallow_class` will manually set a marshmallow schema's `additionalProperties` attr.\nto True so that JSON objects with extra properties do not raise errors; as a result properties are picked and\nfilled in as necessary."}], "source": {"code": "    class Meta:\n        \"\"\"Sub-class specifying meta information for Marshmallow.\n\n        Currently only sets `unknown` flag to `EXCLUDE`. This is done to mirror Ludwig behavior: unknown properties are\n        excluded from `load` calls so that the marshmallow_dataclass package can be used but\n        `get_custom_schema_from_marshmallow_class` will manually set a marshmallow schema's `additionalProperties` attr.\n        to True so that JSON objects with extra properties do not raise errors; as a result properties are picked and\n        filled in as necessary.\n        \"\"\"\n\n        unknown = EXCLUDE\n        \"Flag that sets marshmallow `load` calls to ignore unknown properties passed as a parameter.\"\n", "line_start": 49}, "children": {"ludwig.modules.optimization_modules.AdamaxOptimizerConfig.Schema.Meta.unknown": {"name": "unknown", "path": "ludwig.modules.optimization_modules.AdamaxOptimizerConfig.Schema.Meta.unknown", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": [], "parent_path": "ludwig.modules.optimization_modules.AdamaxOptimizerConfig.Schema.Meta", "has_contents": true, "docstring": "Flag that sets marshmallow `load` calls to ignore unknown properties passed as a parameter.", "docstring_sections": [{"type": "markdown", "value": "Flag that sets marshmallow `load` calls to ignore unknown properties passed as a parameter."}], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": ""}}, "attributes": ["ludwig.modules.optimization_modules.AdamaxOptimizerConfig.Schema.Meta.unknown"], "methods": [], "functions": [], "modules": [], "classes": [], "bases": ["object"]}, "ludwig.modules.optimization_modules.AdamaxOptimizerConfig.Schema._declared_fields": {"name": "_declared_fields", "path": "ludwig.modules.optimization_modules.AdamaxOptimizerConfig.Schema._declared_fields", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["private"], "parent_path": "ludwig.modules.optimization_modules.AdamaxOptimizerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": ""}, "ludwig.modules.optimization_modules.AdamaxOptimizerConfig.Schema._hooks": {"name": "_hooks", "path": "ludwig.modules.optimization_modules.AdamaxOptimizerConfig.Schema._hooks", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["private"], "parent_path": "ludwig.modules.optimization_modules.AdamaxOptimizerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": ""}, "ludwig.modules.optimization_modules.AdamaxOptimizerConfig.Schema.opts": {"name": "opts", "path": "ludwig.modules.optimization_modules.AdamaxOptimizerConfig.Schema.opts", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": [], "parent_path": "ludwig.modules.optimization_modules.AdamaxOptimizerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": ""}, "ludwig.modules.optimization_modules.AdamaxOptimizerConfig.Schema.validate_type": {"name": "validate_type", "path": "ludwig.modules.optimization_modules.AdamaxOptimizerConfig.Schema.validate_type", "category": "method", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": [], "parent_path": "ludwig.modules.optimization_modules.AdamaxOptimizerConfig.Schema", "has_contents": true, "docstring": "Workaround to enforce immutable `type` in defined optimizer classes.\n\n:param data: Any-typed object that should be a string correctly identifying the optimizer type.", "docstring_sections": [{"type": "markdown", "value": "Workaround to enforce immutable `type` in defined optimizer classes."}, {"type": "parameters", "value": [{"description": "Any-typed object that should be a string correctly identifying the optimizer type.", "annotation": "", "name": "data", "kind": "POSITIONAL_OR_KEYWORD", "default": "", "is_optional": false, "is_required": true, "is_args": false, "is_kwargs": false}]}], "source": {"code": "    @validates(\"type\")\n    def validate_type(self, data, **kwargs):\n        \"\"\"Workaround to enforce immutable `type` in defined optimizer classes.\n\n        :param data: Any-typed object that should be a string correctly identifying the optimizer type.\n        \"\"\"\n        if not isinstance(data, str):\n            raise ValidationError(\n                f\"{self.__class__.__name__} expects type of field `type` to be `str`, instead received '{data}'\"\n            )\n        default = self.declared_fields[\"type\"].dump_default\n        if default is not missing and data != default:\n            # Handle aliases:\n            if optimizer_registry[default] == optimizer_registry[data]:\n                return\n            raise ValidationError(\n                f\"{self.__class__.__name__} expects value of field `type` to be '{default}', instead received '{data}'\"\n            )\n", "line_start": 62}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "signature": {"parameters": [{"kind": "POSITIONAL_OR_KEYWORD", "name": "self"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "data"}, {"kind": "VAR_KEYWORD", "name": "kwargs"}]}}, "ludwig.modules.optimization_modules.AdamaxOptimizerConfig.Schema.type": {"name": "type", "path": "ludwig.modules.optimization_modules.AdamaxOptimizerConfig.Schema.type", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.modules.optimization_modules.AdamaxOptimizerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "String"}, "ludwig.modules.optimization_modules.AdamaxOptimizerConfig.Schema.lr": {"name": "lr", "path": "ludwig.modules.optimization_modules.AdamaxOptimizerConfig.Schema.lr", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.modules.optimization_modules.AdamaxOptimizerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "Float"}, "ludwig.modules.optimization_modules.AdamaxOptimizerConfig.Schema.betas": {"name": "betas", "path": "ludwig.modules.optimization_modules.AdamaxOptimizerConfig.Schema.betas", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.modules.optimization_modules.AdamaxOptimizerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "FloatTupleMarshmallowField"}, "ludwig.modules.optimization_modules.AdamaxOptimizerConfig.Schema.eps": {"name": "eps", "path": "ludwig.modules.optimization_modules.AdamaxOptimizerConfig.Schema.eps", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.modules.optimization_modules.AdamaxOptimizerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "Float"}, "ludwig.modules.optimization_modules.AdamaxOptimizerConfig.Schema.weight_decay": {"name": "weight_decay", "path": "ludwig.modules.optimization_modules.AdamaxOptimizerConfig.Schema.weight_decay", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.modules.optimization_modules.AdamaxOptimizerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "Float"}}, "attributes": ["ludwig.modules.optimization_modules.AdamaxOptimizerConfig.Schema._declared_fields", "ludwig.modules.optimization_modules.AdamaxOptimizerConfig.Schema._hooks", "ludwig.modules.optimization_modules.AdamaxOptimizerConfig.Schema.opts", "ludwig.modules.optimization_modules.AdamaxOptimizerConfig.Schema.type", "ludwig.modules.optimization_modules.AdamaxOptimizerConfig.Schema.lr", "ludwig.modules.optimization_modules.AdamaxOptimizerConfig.Schema.betas", "ludwig.modules.optimization_modules.AdamaxOptimizerConfig.Schema.eps", "ludwig.modules.optimization_modules.AdamaxOptimizerConfig.Schema.weight_decay"], "methods": ["ludwig.modules.optimization_modules.AdamaxOptimizerConfig.Schema.validate_type"], "functions": [], "modules": [], "classes": ["ludwig.modules.optimization_modules.AdamaxOptimizerConfig.Schema.Meta"], "bases": ["marshmallow_dataclass._base_schema.<locals>.BaseSchema"]}, "ludwig.modules.optimization_modules.AdamaxOptimizerConfig.__eq__": {"name": "__eq__", "path": "ludwig.modules.optimization_modules.AdamaxOptimizerConfig.__eq__", "category": "method", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["special"], "parent_path": "ludwig.modules.optimization_modules.AdamaxOptimizerConfig", "has_contents": false, "docstring": "", "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "signature": {"parameters": [{"kind": "POSITIONAL_OR_KEYWORD", "name": "self"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "other"}]}}, "ludwig.modules.optimization_modules.AdamaxOptimizerConfig.__init__": {"name": "__init__", "path": "ludwig.modules.optimization_modules.AdamaxOptimizerConfig.__init__", "category": "method", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["special"], "parent_path": "ludwig.modules.optimization_modules.AdamaxOptimizerConfig", "has_contents": false, "docstring": "", "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "signature": {"parameters": [{"kind": "POSITIONAL_OR_KEYWORD", "name": "self"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "type", "annotation": "str", "default": "'adamax'"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "lr", "annotation": "float", "default": "0.002"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "betas", "annotation": "Tuple[float, float]", "default": "(0.9, 0.999)"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "eps", "annotation": "float", "default": "1e-08"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "weight_decay", "annotation": "float", "default": "0.0"}], "return_annotation": "None"}}, "ludwig.modules.optimization_modules.AdamaxOptimizerConfig.__repr__": {"name": "__repr__", "path": "ludwig.modules.optimization_modules.AdamaxOptimizerConfig.__repr__", "category": "method", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["special"], "parent_path": "ludwig.modules.optimization_modules.AdamaxOptimizerConfig", "has_contents": false, "docstring": "", "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "signature": {"parameters": [{"kind": "POSITIONAL_OR_KEYWORD", "name": "self"}]}}, "ludwig.modules.optimization_modules.AdamaxOptimizerConfig.betas": {"name": "betas", "path": "ludwig.modules.optimization_modules.AdamaxOptimizerConfig.betas", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["dataclass-field"], "parent_path": "ludwig.modules.optimization_modules.AdamaxOptimizerConfig", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "Tuple[float, float]"}, "ludwig.modules.optimization_modules.AdamaxOptimizerConfig.eps": {"name": "eps", "path": "ludwig.modules.optimization_modules.AdamaxOptimizerConfig.eps", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["dataclass-field"], "parent_path": "ludwig.modules.optimization_modules.AdamaxOptimizerConfig", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "float"}, "ludwig.modules.optimization_modules.AdamaxOptimizerConfig.lr": {"name": "lr", "path": "ludwig.modules.optimization_modules.AdamaxOptimizerConfig.lr", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["dataclass-field"], "parent_path": "ludwig.modules.optimization_modules.AdamaxOptimizerConfig", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "float"}, "ludwig.modules.optimization_modules.AdamaxOptimizerConfig.torch_type": {"name": "torch_type", "path": "ludwig.modules.optimization_modules.AdamaxOptimizerConfig.torch_type", "category": "class", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": [], "parent_path": "ludwig.modules.optimization_modules.AdamaxOptimizerConfig", "has_contents": true, "docstring": "Implements Adamax algorithm (a variant of Adam based on infinity norm).\n\n.. math::\n   \\begin{aligned}\n        &\\rule{110mm}{0.4pt}                                                                 \\\\\n        &\\textbf{input}      : \\gamma \\text{ (lr)}, \\beta_1, \\beta_2\n            \\text{ (betas)},\\theta_0 \\text{ (params)},f(\\theta) \\text{ (objective)},\n            \\: \\lambda \\text{ (weight decay)},                                                \\\\\n        &\\hspace{13mm}    \\epsilon \\text{ (epsilon)}                                          \\\\\n        &\\textbf{initialize} :  m_0 \\leftarrow 0 \\text{ ( first moment)},\n            u_0 \\leftarrow 0 \\text{ ( infinity norm)}                                 \\\\[-1.ex]\n        &\\rule{110mm}{0.4pt}                                                                 \\\\\n        &\\textbf{for} \\: t=1 \\: \\textbf{to} \\: \\ldots \\: \\textbf{do}                         \\\\\n        &\\hspace{5mm}g_t           \\leftarrow   \\nabla_{\\theta} f_t (\\theta_{t-1})           \\\\\n        &\\hspace{5mm}if \\: \\lambda \\neq 0                                                    \\\\\n        &\\hspace{10mm} g_t \\leftarrow g_t + \\lambda  \\theta_{t-1}                            \\\\\n        &\\hspace{5mm}m_t      \\leftarrow   \\beta_1 m_{t-1} + (1 - \\beta_1) g_t               \\\\\n        &\\hspace{5mm}u_t      \\leftarrow   \\mathrm{max}(\\beta_2 u_{t-1}, |g_{t}|+\\epsilon)   \\\\\n        &\\hspace{5mm}\\theta_t \\leftarrow \\theta_{t-1} - \\frac{\\gamma m_t}{(1-\\beta^t_1) u_t} \\\\\n        &\\rule{110mm}{0.4pt}                                                          \\\\[-1.ex]\n        &\\bf{return} \\:  \\theta_t                                                     \\\\[-1.ex]\n        &\\rule{110mm}{0.4pt}                                                          \\\\[-1.ex]\n   \\end{aligned}\n\nFor further details regarding the algorithm we refer to `Adam: A Method for Stochastic Optimization`_.\n\nArgs:\n    params (iterable): iterable of parameters to optimize or dicts defining\n        parameter groups\n    lr (float, optional): learning rate (default: 2e-3)\n    betas (Tuple[float, float], optional): coefficients used for computing\n        running averages of gradient and its square\n    eps (float, optional): term added to the denominator to improve\n        numerical stability (default: 1e-8)\n    weight_decay (float, optional): weight decay (L2 penalty) (default: 0)\n\n.. _Adam\\: A Method for Stochastic Optimization:\n    https://arxiv.org/abs/1412.6980", "docstring_sections": [{"type": "markdown", "value": "Implements Adamax algorithm (a variant of Adam based on infinity norm).\n\n.. math::\n   \\begin{aligned}\n        &\\rule{110mm}{0.4pt}                                                                 \\\\\n        &\\textbf{input}      : \\gamma \\text{ (lr)}, \\beta_1, \\beta_2\n            \\text{ (betas)},\\theta_0 \\text{ (params)},f(\\theta) \\text{ (objective)},\n            \\: \\lambda \\text{ (weight decay)},                                                \\\\\n        &\\hspace{13mm}    \\epsilon \\text{ (epsilon)}                                          \\\\\n        &\\textbf{initialize} :  m_0 \\leftarrow 0 \\text{ ( first moment)},\n            u_0 \\leftarrow 0 \\text{ ( infinity norm)}                                 \\\\[-1.ex]\n        &\\rule{110mm}{0.4pt}                                                                 \\\\\n        &\\textbf{for} \\: t=1 \\: \\textbf{to} \\: \\ldots \\: \\textbf{do}                         \\\\\n        &\\hspace{5mm}g_t           \\leftarrow   \\nabla_{\\theta} f_t (\\theta_{t-1})           \\\\\n        &\\hspace{5mm}if \\: \\lambda \\neq 0                                                    \\\\\n        &\\hspace{10mm} g_t \\leftarrow g_t + \\lambda  \\theta_{t-1}                            \\\\\n        &\\hspace{5mm}m_t      \\leftarrow   \\beta_1 m_{t-1} + (1 - \\beta_1) g_t               \\\\\n        &\\hspace{5mm}u_t      \\leftarrow   \\mathrm{max}(\\beta_2 u_{t-1}, |g_{t}|+\\epsilon)   \\\\\n        &\\hspace{5mm}\\theta_t \\leftarrow \\theta_{t-1} - \\frac{\\gamma m_t}{(1-\\beta^t_1) u_t} \\\\\n        &\\rule{110mm}{0.4pt}                                                          \\\\[-1.ex]\n        &\\bf{return} \\:  \\theta_t                                                     \\\\[-1.ex]\n        &\\rule{110mm}{0.4pt}                                                          \\\\[-1.ex]\n   \\end{aligned}\n\nFor further details regarding the algorithm we refer to `Adam: A Method for Stochastic Optimization`_.\n\nArgs:\n    params (iterable): iterable of parameters to optimize or dicts defining\n        parameter groups\n    lr (float, optional): learning rate (default: 2e-3)\n    betas (Tuple[float, float], optional): coefficients used for computing\n        running averages of gradient and its square\n    eps (float, optional): term added to the denominator to improve\n        numerical stability (default: 1e-8)\n    weight_decay (float, optional): weight decay (L2 penalty) (default: 0)\n\n.. _Adam\\: A Method for Stochastic Optimization:\n    https://arxiv.org/abs/1412.6980"}], "source": {"code": "class Adamax(Optimizer):\n    r\"\"\"Implements Adamax algorithm (a variant of Adam based on infinity norm).\n\n    .. math::\n       \\begin{aligned}\n            &\\rule{110mm}{0.4pt}                                                                 \\\\\n            &\\textbf{input}      : \\gamma \\text{ (lr)}, \\beta_1, \\beta_2\n                \\text{ (betas)},\\theta_0 \\text{ (params)},f(\\theta) \\text{ (objective)},\n                \\: \\lambda \\text{ (weight decay)},                                                \\\\\n            &\\hspace{13mm}    \\epsilon \\text{ (epsilon)}                                          \\\\\n            &\\textbf{initialize} :  m_0 \\leftarrow 0 \\text{ ( first moment)},\n                u_0 \\leftarrow 0 \\text{ ( infinity norm)}                                 \\\\[-1.ex]\n            &\\rule{110mm}{0.4pt}                                                                 \\\\\n            &\\textbf{for} \\: t=1 \\: \\textbf{to} \\: \\ldots \\: \\textbf{do}                         \\\\\n            &\\hspace{5mm}g_t           \\leftarrow   \\nabla_{\\theta} f_t (\\theta_{t-1})           \\\\\n            &\\hspace{5mm}if \\: \\lambda \\neq 0                                                    \\\\\n            &\\hspace{10mm} g_t \\leftarrow g_t + \\lambda  \\theta_{t-1}                            \\\\\n            &\\hspace{5mm}m_t      \\leftarrow   \\beta_1 m_{t-1} + (1 - \\beta_1) g_t               \\\\\n            &\\hspace{5mm}u_t      \\leftarrow   \\mathrm{max}(\\beta_2 u_{t-1}, |g_{t}|+\\epsilon)   \\\\\n            &\\hspace{5mm}\\theta_t \\leftarrow \\theta_{t-1} - \\frac{\\gamma m_t}{(1-\\beta^t_1) u_t} \\\\\n            &\\rule{110mm}{0.4pt}                                                          \\\\[-1.ex]\n            &\\bf{return} \\:  \\theta_t                                                     \\\\[-1.ex]\n            &\\rule{110mm}{0.4pt}                                                          \\\\[-1.ex]\n       \\end{aligned}\n\n    For further details regarding the algorithm we refer to `Adam: A Method for Stochastic Optimization`_.\n\n    Args:\n        params (iterable): iterable of parameters to optimize or dicts defining\n            parameter groups\n        lr (float, optional): learning rate (default: 2e-3)\n        betas (Tuple[float, float], optional): coefficients used for computing\n            running averages of gradient and its square\n        eps (float, optional): term added to the denominator to improve\n            numerical stability (default: 1e-8)\n        weight_decay (float, optional): weight decay (L2 penalty) (default: 0)\n\n    .. _Adam\\: A Method for Stochastic Optimization:\n        https://arxiv.org/abs/1412.6980\n    \"\"\"\n\n    def __init__(self, params, lr=2e-3, betas=(0.9, 0.999), eps=1e-8,\n                 weight_decay=0):\n        if not 0.0 <= lr:\n            raise ValueError(\"Invalid learning rate: {}\".format(lr))\n        if not 0.0 <= eps:\n            raise ValueError(\"Invalid epsilon value: {}\".format(eps))\n        if not 0.0 <= betas[0] < 1.0:\n            raise ValueError(\"Invalid beta parameter at index 0: {}\".format(betas[0]))\n        if not 0.0 <= betas[1] < 1.0:\n            raise ValueError(\"Invalid beta parameter at index 1: {}\".format(betas[1]))\n        if not 0.0 <= weight_decay:\n            raise ValueError(\"Invalid weight_decay value: {}\".format(weight_decay))\n\n        defaults = dict(lr=lr, betas=betas, eps=eps, weight_decay=weight_decay)\n        super(Adamax, self).__init__(params, defaults)\n\n    @torch.no_grad()\n    def step(self, closure=None):\n        \"\"\"Performs a single optimization step.\n\n        Args:\n            closure (callable, optional): A closure that reevaluates the model\n                and returns the loss.\n        \"\"\"\n        loss = None\n        if closure is not None:\n            with torch.enable_grad():\n                loss = closure()\n\n        for group in self.param_groups:\n            params_with_grad = []\n            grads = []\n            exp_avgs = []\n            exp_infs = []\n            state_steps = []\n\n            beta1, beta2 = group['betas']\n            eps = group['eps']\n            lr = group['lr']\n            weight_decay = group['weight_decay']\n\n            for p in group['params']:\n                if p.grad is None:\n                    continue\n                params_with_grad.append(p)\n                if p.grad.is_sparse:\n                    raise RuntimeError('Adamax does not support sparse gradients')\n                grads.append(p.grad)\n\n                state = self.state[p]\n\n                # State initialization\n                if len(state) == 0:\n                    state['step'] = 0\n                    state['exp_avg'] = torch.zeros_like(p, memory_format=torch.preserve_format)\n                    state['exp_inf'] = torch.zeros_like(p, memory_format=torch.preserve_format)\n\n                exp_avgs.append(state['exp_avg'])\n                exp_infs.append(state['exp_inf'])\n\n                state['step'] += 1\n                state_steps.append(state['step'])\n\n            F.adamax(params_with_grad,\n                     grads,\n                     exp_avgs,\n                     exp_infs,\n                     state_steps,\n                     eps=eps,\n                     beta1=beta1,\n                     beta2=beta2,\n                     lr=lr,\n                     weight_decay=weight_decay)\n\n        return loss\n", "line_start": 6}, "children": {"ludwig.modules.optimization_modules.AdamaxOptimizerConfig.torch_type.__init__": {"name": "__init__", "path": "ludwig.modules.optimization_modules.AdamaxOptimizerConfig.torch_type.__init__", "category": "method", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["special"], "parent_path": "ludwig.modules.optimization_modules.AdamaxOptimizerConfig.torch_type", "has_contents": false, "docstring": "", "docstring_sections": [], "source": {"code": "    def __init__(self, params, lr=2e-3, betas=(0.9, 0.999), eps=1e-8,\n                 weight_decay=0):\n        if not 0.0 <= lr:\n            raise ValueError(\"Invalid learning rate: {}\".format(lr))\n        if not 0.0 <= eps:\n            raise ValueError(\"Invalid epsilon value: {}\".format(eps))\n        if not 0.0 <= betas[0] < 1.0:\n            raise ValueError(\"Invalid beta parameter at index 0: {}\".format(betas[0]))\n        if not 0.0 <= betas[1] < 1.0:\n            raise ValueError(\"Invalid beta parameter at index 1: {}\".format(betas[1]))\n        if not 0.0 <= weight_decay:\n            raise ValueError(\"Invalid weight_decay value: {}\".format(weight_decay))\n\n        defaults = dict(lr=lr, betas=betas, eps=eps, weight_decay=weight_decay)\n        super(Adamax, self).__init__(params, defaults)\n", "line_start": 47}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "signature": {"parameters": [{"kind": "POSITIONAL_OR_KEYWORD", "name": "self"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "params"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "lr", "default": "0.002"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "betas", "default": "(0.9, 0.999)"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "eps", "default": "1e-08"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "weight_decay", "default": "0"}]}}, "ludwig.modules.optimization_modules.AdamaxOptimizerConfig.torch_type.step": {"name": "step", "path": "ludwig.modules.optimization_modules.AdamaxOptimizerConfig.torch_type.step", "category": "method", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": [], "parent_path": "ludwig.modules.optimization_modules.AdamaxOptimizerConfig.torch_type", "has_contents": true, "docstring": "Performs a single optimization step.\n\nArgs:\n    closure (callable, optional): A closure that reevaluates the model\n        and returns the loss.", "docstring_sections": [{"type": "markdown", "value": "Performs a single optimization step.\n\nArgs:\n    closure (callable, optional): A closure that reevaluates the model\n        and returns the loss."}], "source": {"code": "    @torch.no_grad()\n    def step(self, closure=None):\n        \"\"\"Performs a single optimization step.\n\n        Args:\n            closure (callable, optional): A closure that reevaluates the model\n                and returns the loss.\n        \"\"\"\n        loss = None\n        if closure is not None:\n            with torch.enable_grad():\n                loss = closure()\n\n        for group in self.param_groups:\n            params_with_grad = []\n            grads = []\n            exp_avgs = []\n            exp_infs = []\n            state_steps = []\n\n            beta1, beta2 = group['betas']\n            eps = group['eps']\n            lr = group['lr']\n            weight_decay = group['weight_decay']\n\n            for p in group['params']:\n                if p.grad is None:\n                    continue\n                params_with_grad.append(p)\n                if p.grad.is_sparse:\n                    raise RuntimeError('Adamax does not support sparse gradients')\n                grads.append(p.grad)\n\n                state = self.state[p]\n\n                # State initialization\n                if len(state) == 0:\n                    state['step'] = 0\n                    state['exp_avg'] = torch.zeros_like(p, memory_format=torch.preserve_format)\n                    state['exp_inf'] = torch.zeros_like(p, memory_format=torch.preserve_format)\n\n                exp_avgs.append(state['exp_avg'])\n                exp_infs.append(state['exp_inf'])\n\n                state['step'] += 1\n                state_steps.append(state['step'])\n\n            F.adamax(params_with_grad,\n                     grads,\n                     exp_avgs,\n                     exp_infs,\n                     state_steps,\n                     eps=eps,\n                     beta1=beta1,\n                     beta2=beta2,\n                     lr=lr,\n                     weight_decay=weight_decay)\n\n        return loss\n", "line_start": 63}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "signature": {"parameters": [{"kind": "POSITIONAL_OR_KEYWORD", "name": "self"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "closure", "default": "None"}]}}}, "attributes": [], "methods": ["ludwig.modules.optimization_modules.AdamaxOptimizerConfig.torch_type.__init__", "ludwig.modules.optimization_modules.AdamaxOptimizerConfig.torch_type.step"], "functions": [], "modules": [], "classes": [], "bases": ["torch.optim.optimizer.Optimizer"]}, "ludwig.modules.optimization_modules.AdamaxOptimizerConfig.type": {"name": "type", "path": "ludwig.modules.optimization_modules.AdamaxOptimizerConfig.type", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": [], "parent_path": "ludwig.modules.optimization_modules.AdamaxOptimizerConfig", "has_contents": true, "docstring": "Must be 'adamax' - corresponds to name in `ludwig.modules.optimization_modules.optimizer_registry`\n(default: 'adamax')", "docstring_sections": [{"type": "markdown", "value": "Must be 'adamax' - corresponds to name in `ludwig.modules.optimization_modules.optimizer_registry`\n(default: 'adamax')"}], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "str"}, "ludwig.modules.optimization_modules.AdamaxOptimizerConfig.weight_decay": {"name": "weight_decay", "path": "ludwig.modules.optimization_modules.AdamaxOptimizerConfig.weight_decay", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["dataclass-field"], "parent_path": "ludwig.modules.optimization_modules.AdamaxOptimizerConfig", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "float"}}, "attributes": ["ludwig.modules.optimization_modules.AdamaxOptimizerConfig.type", "ludwig.modules.optimization_modules.AdamaxOptimizerConfig.lr", "ludwig.modules.optimization_modules.AdamaxOptimizerConfig.betas", "ludwig.modules.optimization_modules.AdamaxOptimizerConfig.eps", "ludwig.modules.optimization_modules.AdamaxOptimizerConfig.weight_decay"], "methods": ["ludwig.modules.optimization_modules.AdamaxOptimizerConfig.__eq__", "ludwig.modules.optimization_modules.AdamaxOptimizerConfig.__init__", "ludwig.modules.optimization_modules.AdamaxOptimizerConfig.__repr__"], "functions": [], "modules": [], "classes": ["ludwig.modules.optimization_modules.AdamaxOptimizerConfig.Schema", "ludwig.modules.optimization_modules.AdamaxOptimizerConfig.torch_type"], "bases": ["ludwig.modules.optimization_modules.BaseOptimizerConfig"]}]}, "NadamOptimizerConfig": {"loading_errors": [], "parsing_errors": {}, "objects": [{"name": "NadamOptimizerConfig", "path": "ludwig.modules.optimization_modules.NadamOptimizerConfig", "category": "class", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["dataclass"], "parent_path": "ludwig.modules.optimization_modules", "has_contents": true, "docstring": "NadamOptimizerConfig(type: str = 'nadam', lr: float = 0.002, betas: Tuple[float, float] = (0.9, 0.999), eps: float = 1e-08, weight_decay: float = 0.0, momentum_decay: float = 0.004)", "docstring_sections": [{"type": "markdown", "value": "NadamOptimizerConfig(type: str = 'nadam', lr: float = 0.002, betas: Tuple[float, float] = (0.9, 0.999), eps: float = 1e-08, weight_decay: float = 0.0, momentum_decay: float = 0.004)"}], "source": {"code": "class NadamOptimizerConfig(BaseOptimizerConfig):\n    # torch_type: ClassVar[torch.optim.Optimizer] = torch.optim.Nadam\n    type: str = \"nadam\"\n    # Defaults taken from https://pytorch.org/docs/stable/generated/torch.optim.NAdam.html#torch.optim.NAdam :\n    lr: float = FloatRange(default=2e-3, min=0.0, max=1.0)\n    betas: Tuple[float, float] = FloatRangeTupleDataclassField(default=(0.9, 0.999))\n    eps: float = NonNegativeFloat(default=1e-08)\n    weight_decay: float = NonNegativeFloat(default=0.0)\n    momentum_decay: float = NonNegativeFloat(default=4e-3)\n", "line_start": 212}, "children": {"ludwig.modules.optimization_modules.NadamOptimizerConfig.Schema": {"name": "Schema", "path": "ludwig.modules.optimization_modules.NadamOptimizerConfig.Schema", "category": "class", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["marshmallow-model"], "parent_path": "ludwig.modules.optimization_modules.NadamOptimizerConfig", "has_contents": true, "docstring": "", "docstring_sections": [], "source": {}, "children": {"ludwig.modules.optimization_modules.NadamOptimizerConfig.Schema.Meta": {"name": "Meta", "path": "ludwig.modules.optimization_modules.NadamOptimizerConfig.Schema.Meta", "category": "class", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": [], "parent_path": "ludwig.modules.optimization_modules.NadamOptimizerConfig.Schema", "has_contents": true, "docstring": "Sub-class specifying meta information for Marshmallow.\n\nCurrently only sets `unknown` flag to `EXCLUDE`. This is done to mirror Ludwig behavior: unknown properties are\nexcluded from `load` calls so that the marshmallow_dataclass package can be used but\n`get_custom_schema_from_marshmallow_class` will manually set a marshmallow schema's `additionalProperties` attr.\nto True so that JSON objects with extra properties do not raise errors; as a result properties are picked and\nfilled in as necessary.", "docstring_sections": [{"type": "markdown", "value": "Sub-class specifying meta information for Marshmallow.\n\nCurrently only sets `unknown` flag to `EXCLUDE`. This is done to mirror Ludwig behavior: unknown properties are\nexcluded from `load` calls so that the marshmallow_dataclass package can be used but\n`get_custom_schema_from_marshmallow_class` will manually set a marshmallow schema's `additionalProperties` attr.\nto True so that JSON objects with extra properties do not raise errors; as a result properties are picked and\nfilled in as necessary."}], "source": {"code": "    class Meta:\n        \"\"\"Sub-class specifying meta information for Marshmallow.\n\n        Currently only sets `unknown` flag to `EXCLUDE`. This is done to mirror Ludwig behavior: unknown properties are\n        excluded from `load` calls so that the marshmallow_dataclass package can be used but\n        `get_custom_schema_from_marshmallow_class` will manually set a marshmallow schema's `additionalProperties` attr.\n        to True so that JSON objects with extra properties do not raise errors; as a result properties are picked and\n        filled in as necessary.\n        \"\"\"\n\n        unknown = EXCLUDE\n        \"Flag that sets marshmallow `load` calls to ignore unknown properties passed as a parameter.\"\n", "line_start": 49}, "children": {"ludwig.modules.optimization_modules.NadamOptimizerConfig.Schema.Meta.unknown": {"name": "unknown", "path": "ludwig.modules.optimization_modules.NadamOptimizerConfig.Schema.Meta.unknown", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": [], "parent_path": "ludwig.modules.optimization_modules.NadamOptimizerConfig.Schema.Meta", "has_contents": true, "docstring": "Flag that sets marshmallow `load` calls to ignore unknown properties passed as a parameter.", "docstring_sections": [{"type": "markdown", "value": "Flag that sets marshmallow `load` calls to ignore unknown properties passed as a parameter."}], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": ""}}, "attributes": ["ludwig.modules.optimization_modules.NadamOptimizerConfig.Schema.Meta.unknown"], "methods": [], "functions": [], "modules": [], "classes": [], "bases": ["object"]}, "ludwig.modules.optimization_modules.NadamOptimizerConfig.Schema._declared_fields": {"name": "_declared_fields", "path": "ludwig.modules.optimization_modules.NadamOptimizerConfig.Schema._declared_fields", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["private"], "parent_path": "ludwig.modules.optimization_modules.NadamOptimizerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": ""}, "ludwig.modules.optimization_modules.NadamOptimizerConfig.Schema._hooks": {"name": "_hooks", "path": "ludwig.modules.optimization_modules.NadamOptimizerConfig.Schema._hooks", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["private"], "parent_path": "ludwig.modules.optimization_modules.NadamOptimizerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": ""}, "ludwig.modules.optimization_modules.NadamOptimizerConfig.Schema.opts": {"name": "opts", "path": "ludwig.modules.optimization_modules.NadamOptimizerConfig.Schema.opts", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": [], "parent_path": "ludwig.modules.optimization_modules.NadamOptimizerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": ""}, "ludwig.modules.optimization_modules.NadamOptimizerConfig.Schema.validate_type": {"name": "validate_type", "path": "ludwig.modules.optimization_modules.NadamOptimizerConfig.Schema.validate_type", "category": "method", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": [], "parent_path": "ludwig.modules.optimization_modules.NadamOptimizerConfig.Schema", "has_contents": true, "docstring": "Workaround to enforce immutable `type` in defined optimizer classes.\n\n:param data: Any-typed object that should be a string correctly identifying the optimizer type.", "docstring_sections": [{"type": "markdown", "value": "Workaround to enforce immutable `type` in defined optimizer classes."}, {"type": "parameters", "value": [{"description": "Any-typed object that should be a string correctly identifying the optimizer type.", "annotation": "", "name": "data", "kind": "POSITIONAL_OR_KEYWORD", "default": "", "is_optional": false, "is_required": true, "is_args": false, "is_kwargs": false}]}], "source": {"code": "    @validates(\"type\")\n    def validate_type(self, data, **kwargs):\n        \"\"\"Workaround to enforce immutable `type` in defined optimizer classes.\n\n        :param data: Any-typed object that should be a string correctly identifying the optimizer type.\n        \"\"\"\n        if not isinstance(data, str):\n            raise ValidationError(\n                f\"{self.__class__.__name__} expects type of field `type` to be `str`, instead received '{data}'\"\n            )\n        default = self.declared_fields[\"type\"].dump_default\n        if default is not missing and data != default:\n            # Handle aliases:\n            if optimizer_registry[default] == optimizer_registry[data]:\n                return\n            raise ValidationError(\n                f\"{self.__class__.__name__} expects value of field `type` to be '{default}', instead received '{data}'\"\n            )\n", "line_start": 62}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "signature": {"parameters": [{"kind": "POSITIONAL_OR_KEYWORD", "name": "self"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "data"}, {"kind": "VAR_KEYWORD", "name": "kwargs"}]}}, "ludwig.modules.optimization_modules.NadamOptimizerConfig.Schema.type": {"name": "type", "path": "ludwig.modules.optimization_modules.NadamOptimizerConfig.Schema.type", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.modules.optimization_modules.NadamOptimizerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "String"}, "ludwig.modules.optimization_modules.NadamOptimizerConfig.Schema.lr": {"name": "lr", "path": "ludwig.modules.optimization_modules.NadamOptimizerConfig.Schema.lr", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.modules.optimization_modules.NadamOptimizerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "Float"}, "ludwig.modules.optimization_modules.NadamOptimizerConfig.Schema.betas": {"name": "betas", "path": "ludwig.modules.optimization_modules.NadamOptimizerConfig.Schema.betas", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.modules.optimization_modules.NadamOptimizerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "FloatTupleMarshmallowField"}, "ludwig.modules.optimization_modules.NadamOptimizerConfig.Schema.eps": {"name": "eps", "path": "ludwig.modules.optimization_modules.NadamOptimizerConfig.Schema.eps", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.modules.optimization_modules.NadamOptimizerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "Float"}, "ludwig.modules.optimization_modules.NadamOptimizerConfig.Schema.weight_decay": {"name": "weight_decay", "path": "ludwig.modules.optimization_modules.NadamOptimizerConfig.Schema.weight_decay", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.modules.optimization_modules.NadamOptimizerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "Float"}, "ludwig.modules.optimization_modules.NadamOptimizerConfig.Schema.momentum_decay": {"name": "momentum_decay", "path": "ludwig.modules.optimization_modules.NadamOptimizerConfig.Schema.momentum_decay", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.modules.optimization_modules.NadamOptimizerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "Float"}}, "attributes": ["ludwig.modules.optimization_modules.NadamOptimizerConfig.Schema._declared_fields", "ludwig.modules.optimization_modules.NadamOptimizerConfig.Schema._hooks", "ludwig.modules.optimization_modules.NadamOptimizerConfig.Schema.opts", "ludwig.modules.optimization_modules.NadamOptimizerConfig.Schema.type", "ludwig.modules.optimization_modules.NadamOptimizerConfig.Schema.lr", "ludwig.modules.optimization_modules.NadamOptimizerConfig.Schema.betas", "ludwig.modules.optimization_modules.NadamOptimizerConfig.Schema.eps", "ludwig.modules.optimization_modules.NadamOptimizerConfig.Schema.weight_decay", "ludwig.modules.optimization_modules.NadamOptimizerConfig.Schema.momentum_decay"], "methods": ["ludwig.modules.optimization_modules.NadamOptimizerConfig.Schema.validate_type"], "functions": [], "modules": [], "classes": ["ludwig.modules.optimization_modules.NadamOptimizerConfig.Schema.Meta"], "bases": ["marshmallow_dataclass._base_schema.<locals>.BaseSchema"]}, "ludwig.modules.optimization_modules.NadamOptimizerConfig.__eq__": {"name": "__eq__", "path": "ludwig.modules.optimization_modules.NadamOptimizerConfig.__eq__", "category": "method", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["special"], "parent_path": "ludwig.modules.optimization_modules.NadamOptimizerConfig", "has_contents": false, "docstring": "", "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "signature": {"parameters": [{"kind": "POSITIONAL_OR_KEYWORD", "name": "self"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "other"}]}}, "ludwig.modules.optimization_modules.NadamOptimizerConfig.__init__": {"name": "__init__", "path": "ludwig.modules.optimization_modules.NadamOptimizerConfig.__init__", "category": "method", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["special"], "parent_path": "ludwig.modules.optimization_modules.NadamOptimizerConfig", "has_contents": false, "docstring": "", "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "signature": {"parameters": [{"kind": "POSITIONAL_OR_KEYWORD", "name": "self"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "type", "annotation": "str", "default": "'nadam'"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "lr", "annotation": "float", "default": "0.002"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "betas", "annotation": "Tuple[float, float]", "default": "(0.9, 0.999)"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "eps", "annotation": "float", "default": "1e-08"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "weight_decay", "annotation": "float", "default": "0.0"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "momentum_decay", "annotation": "float", "default": "0.004"}], "return_annotation": "None"}}, "ludwig.modules.optimization_modules.NadamOptimizerConfig.__repr__": {"name": "__repr__", "path": "ludwig.modules.optimization_modules.NadamOptimizerConfig.__repr__", "category": "method", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["special"], "parent_path": "ludwig.modules.optimization_modules.NadamOptimizerConfig", "has_contents": false, "docstring": "", "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "signature": {"parameters": [{"kind": "POSITIONAL_OR_KEYWORD", "name": "self"}]}}, "ludwig.modules.optimization_modules.NadamOptimizerConfig.betas": {"name": "betas", "path": "ludwig.modules.optimization_modules.NadamOptimizerConfig.betas", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["dataclass-field"], "parent_path": "ludwig.modules.optimization_modules.NadamOptimizerConfig", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "Tuple[float, float]"}, "ludwig.modules.optimization_modules.NadamOptimizerConfig.eps": {"name": "eps", "path": "ludwig.modules.optimization_modules.NadamOptimizerConfig.eps", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["dataclass-field"], "parent_path": "ludwig.modules.optimization_modules.NadamOptimizerConfig", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "float"}, "ludwig.modules.optimization_modules.NadamOptimizerConfig.lr": {"name": "lr", "path": "ludwig.modules.optimization_modules.NadamOptimizerConfig.lr", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["dataclass-field"], "parent_path": "ludwig.modules.optimization_modules.NadamOptimizerConfig", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "float"}, "ludwig.modules.optimization_modules.NadamOptimizerConfig.momentum_decay": {"name": "momentum_decay", "path": "ludwig.modules.optimization_modules.NadamOptimizerConfig.momentum_decay", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["dataclass-field"], "parent_path": "ludwig.modules.optimization_modules.NadamOptimizerConfig", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "float"}, "ludwig.modules.optimization_modules.NadamOptimizerConfig.type": {"name": "type", "path": "ludwig.modules.optimization_modules.NadamOptimizerConfig.type", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": [], "parent_path": "ludwig.modules.optimization_modules.NadamOptimizerConfig", "has_contents": true, "docstring": "Name corresponding to an optimizer `ludwig.modules.optimization_modules.optimizer_registry`.\nTechnically mutable, but attempting to load a derived optimizer with `type` set to a mismatched value will\nresult in a `ValidationError`.", "docstring_sections": [{"type": "markdown", "value": "Name corresponding to an optimizer `ludwig.modules.optimization_modules.optimizer_registry`.\nTechnically mutable, but attempting to load a derived optimizer with `type` set to a mismatched value will\nresult in a `ValidationError`."}], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "str"}, "ludwig.modules.optimization_modules.NadamOptimizerConfig.weight_decay": {"name": "weight_decay", "path": "ludwig.modules.optimization_modules.NadamOptimizerConfig.weight_decay", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["dataclass-field"], "parent_path": "ludwig.modules.optimization_modules.NadamOptimizerConfig", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "float"}}, "attributes": ["ludwig.modules.optimization_modules.NadamOptimizerConfig.type", "ludwig.modules.optimization_modules.NadamOptimizerConfig.lr", "ludwig.modules.optimization_modules.NadamOptimizerConfig.betas", "ludwig.modules.optimization_modules.NadamOptimizerConfig.eps", "ludwig.modules.optimization_modules.NadamOptimizerConfig.weight_decay", "ludwig.modules.optimization_modules.NadamOptimizerConfig.momentum_decay"], "methods": ["ludwig.modules.optimization_modules.NadamOptimizerConfig.__eq__", "ludwig.modules.optimization_modules.NadamOptimizerConfig.__init__", "ludwig.modules.optimization_modules.NadamOptimizerConfig.__repr__"], "functions": [], "modules": [], "classes": ["ludwig.modules.optimization_modules.NadamOptimizerConfig.Schema"], "bases": ["ludwig.modules.optimization_modules.BaseOptimizerConfig"]}]}, "ClipperConfig": {"loading_errors": [], "parsing_errors": {}, "objects": [{"name": "ClipperConfig", "path": "ludwig.modules.optimization_modules.ClipperConfig", "category": "class", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["dataclass"], "parent_path": "ludwig.modules.optimization_modules", "has_contents": true, "docstring": "Dataclass that holds gradient clipping parameters.", "docstring_sections": [{"type": "markdown", "value": "Dataclass that holds gradient clipping parameters."}], "source": {"code": "class ClipperConfig(BaseMarshmallowConfig):\n    \"\"\"Dataclass that holds gradient clipping parameters.\"\"\"\n\n    clipglobalnorm: Optional[float] = 0.5\n    \"(default: 0.5)\"\n    clipnorm: Optional[float] = None\n    \"(default: None)\"\n    clipvalue: Optional[float] = None\n    \"(default: None)\"\n\n    def clip_grads(self, variables: Iterable[torch.Tensor]):\n        if self.clipglobalnorm:\n            torch.nn.utils.clip_grad_norm_(variables, self.clipglobalnorm)\n        if self.clipnorm:\n            torch.nn.utils.clip_grad_norm_(variables, self.clipglobalnorm)\n        if self.clipvalue:\n            torch.nn.utils.clip_grad_value_(variables, self.clipvalue)\n", "line_start": 333}, "children": {"ludwig.modules.optimization_modules.ClipperConfig.Schema": {"name": "Schema", "path": "ludwig.modules.optimization_modules.ClipperConfig.Schema", "category": "class", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["marshmallow-model"], "parent_path": "ludwig.modules.optimization_modules.ClipperConfig", "has_contents": true, "docstring": "", "docstring_sections": [], "source": {}, "children": {"ludwig.modules.optimization_modules.ClipperConfig.Schema.Meta": {"name": "Meta", "path": "ludwig.modules.optimization_modules.ClipperConfig.Schema.Meta", "category": "class", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": [], "parent_path": "ludwig.modules.optimization_modules.ClipperConfig.Schema", "has_contents": true, "docstring": "Sub-class specifying meta information for Marshmallow.\n\nCurrently only sets `unknown` flag to `EXCLUDE`. This is done to mirror Ludwig behavior: unknown properties are\nexcluded from `load` calls so that the marshmallow_dataclass package can be used but\n`get_custom_schema_from_marshmallow_class` will manually set a marshmallow schema's `additionalProperties` attr.\nto True so that JSON objects with extra properties do not raise errors; as a result properties are picked and\nfilled in as necessary.", "docstring_sections": [{"type": "markdown", "value": "Sub-class specifying meta information for Marshmallow.\n\nCurrently only sets `unknown` flag to `EXCLUDE`. This is done to mirror Ludwig behavior: unknown properties are\nexcluded from `load` calls so that the marshmallow_dataclass package can be used but\n`get_custom_schema_from_marshmallow_class` will manually set a marshmallow schema's `additionalProperties` attr.\nto True so that JSON objects with extra properties do not raise errors; as a result properties are picked and\nfilled in as necessary."}], "source": {"code": "    class Meta:\n        \"\"\"Sub-class specifying meta information for Marshmallow.\n\n        Currently only sets `unknown` flag to `EXCLUDE`. This is done to mirror Ludwig behavior: unknown properties are\n        excluded from `load` calls so that the marshmallow_dataclass package can be used but\n        `get_custom_schema_from_marshmallow_class` will manually set a marshmallow schema's `additionalProperties` attr.\n        to True so that JSON objects with extra properties do not raise errors; as a result properties are picked and\n        filled in as necessary.\n        \"\"\"\n\n        unknown = EXCLUDE\n        \"Flag that sets marshmallow `load` calls to ignore unknown properties passed as a parameter.\"\n", "line_start": 49}, "children": {"ludwig.modules.optimization_modules.ClipperConfig.Schema.Meta.unknown": {"name": "unknown", "path": "ludwig.modules.optimization_modules.ClipperConfig.Schema.Meta.unknown", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": [], "parent_path": "ludwig.modules.optimization_modules.ClipperConfig.Schema.Meta", "has_contents": true, "docstring": "Flag that sets marshmallow `load` calls to ignore unknown properties passed as a parameter.", "docstring_sections": [{"type": "markdown", "value": "Flag that sets marshmallow `load` calls to ignore unknown properties passed as a parameter."}], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": ""}}, "attributes": ["ludwig.modules.optimization_modules.ClipperConfig.Schema.Meta.unknown"], "methods": [], "functions": [], "modules": [], "classes": [], "bases": ["object"]}, "ludwig.modules.optimization_modules.ClipperConfig.Schema._declared_fields": {"name": "_declared_fields", "path": "ludwig.modules.optimization_modules.ClipperConfig.Schema._declared_fields", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["private"], "parent_path": "ludwig.modules.optimization_modules.ClipperConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": ""}, "ludwig.modules.optimization_modules.ClipperConfig.Schema._hooks": {"name": "_hooks", "path": "ludwig.modules.optimization_modules.ClipperConfig.Schema._hooks", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["private"], "parent_path": "ludwig.modules.optimization_modules.ClipperConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": ""}, "ludwig.modules.optimization_modules.ClipperConfig.Schema.opts": {"name": "opts", "path": "ludwig.modules.optimization_modules.ClipperConfig.Schema.opts", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": [], "parent_path": "ludwig.modules.optimization_modules.ClipperConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": ""}, "ludwig.modules.optimization_modules.ClipperConfig.Schema.clipglobalnorm": {"name": "clipglobalnorm", "path": "ludwig.modules.optimization_modules.ClipperConfig.Schema.clipglobalnorm", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.modules.optimization_modules.ClipperConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "Float"}, "ludwig.modules.optimization_modules.ClipperConfig.Schema.clipnorm": {"name": "clipnorm", "path": "ludwig.modules.optimization_modules.ClipperConfig.Schema.clipnorm", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.modules.optimization_modules.ClipperConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "Float"}, "ludwig.modules.optimization_modules.ClipperConfig.Schema.clipvalue": {"name": "clipvalue", "path": "ludwig.modules.optimization_modules.ClipperConfig.Schema.clipvalue", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.modules.optimization_modules.ClipperConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "Float"}}, "attributes": ["ludwig.modules.optimization_modules.ClipperConfig.Schema._declared_fields", "ludwig.modules.optimization_modules.ClipperConfig.Schema._hooks", "ludwig.modules.optimization_modules.ClipperConfig.Schema.opts", "ludwig.modules.optimization_modules.ClipperConfig.Schema.clipglobalnorm", "ludwig.modules.optimization_modules.ClipperConfig.Schema.clipnorm", "ludwig.modules.optimization_modules.ClipperConfig.Schema.clipvalue"], "methods": [], "functions": [], "modules": [], "classes": ["ludwig.modules.optimization_modules.ClipperConfig.Schema.Meta"], "bases": ["marshmallow_dataclass._base_schema.<locals>.BaseSchema"]}, "ludwig.modules.optimization_modules.ClipperConfig.__eq__": {"name": "__eq__", "path": "ludwig.modules.optimization_modules.ClipperConfig.__eq__", "category": "method", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["special"], "parent_path": "ludwig.modules.optimization_modules.ClipperConfig", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "signature": {"parameters": [{"kind": "POSITIONAL_OR_KEYWORD", "name": "self"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "other"}]}}, "ludwig.modules.optimization_modules.ClipperConfig.__init__": {"name": "__init__", "path": "ludwig.modules.optimization_modules.ClipperConfig.__init__", "category": "method", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["special"], "parent_path": "ludwig.modules.optimization_modules.ClipperConfig", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "signature": {"parameters": [{"kind": "POSITIONAL_OR_KEYWORD", "name": "self"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "clipglobalnorm", "annotation": "Optional[float]", "default": "0.5"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "clipnorm", "annotation": "Optional[float]", "default": "None"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "clipvalue", "annotation": "Optional[float]", "default": "None"}], "return_annotation": "None"}}, "ludwig.modules.optimization_modules.ClipperConfig.__repr__": {"name": "__repr__", "path": "ludwig.modules.optimization_modules.ClipperConfig.__repr__", "category": "method", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["special"], "parent_path": "ludwig.modules.optimization_modules.ClipperConfig", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "signature": {"parameters": [{"kind": "POSITIONAL_OR_KEYWORD", "name": "self"}]}}, "ludwig.modules.optimization_modules.ClipperConfig.clip_grads": {"name": "clip_grads", "path": "ludwig.modules.optimization_modules.ClipperConfig.clip_grads", "category": "method", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": [], "parent_path": "ludwig.modules.optimization_modules.ClipperConfig", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {"code": "    def clip_grads(self, variables: Iterable[torch.Tensor]):\n        if self.clipglobalnorm:\n            torch.nn.utils.clip_grad_norm_(variables, self.clipglobalnorm)\n        if self.clipnorm:\n            torch.nn.utils.clip_grad_norm_(variables, self.clipglobalnorm)\n        if self.clipvalue:\n            torch.nn.utils.clip_grad_value_(variables, self.clipvalue)\n", "line_start": 343}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "signature": {"parameters": [{"kind": "POSITIONAL_OR_KEYWORD", "name": "self"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "variables", "annotation": "Iterable[torch.Tensor]"}]}}, "ludwig.modules.optimization_modules.ClipperConfig.clipglobalnorm": {"name": "clipglobalnorm", "path": "ludwig.modules.optimization_modules.ClipperConfig.clipglobalnorm", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["dataclass-field"], "parent_path": "ludwig.modules.optimization_modules.ClipperConfig", "has_contents": true, "docstring": "(default: 0.5)", "docstring_sections": [{"type": "markdown", "value": "(default: 0.5)"}], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "Optional[float]"}, "ludwig.modules.optimization_modules.ClipperConfig.clipnorm": {"name": "clipnorm", "path": "ludwig.modules.optimization_modules.ClipperConfig.clipnorm", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["dataclass-field"], "parent_path": "ludwig.modules.optimization_modules.ClipperConfig", "has_contents": true, "docstring": "(default: None)", "docstring_sections": [{"type": "markdown", "value": "(default: None)"}], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "Optional[float]"}, "ludwig.modules.optimization_modules.ClipperConfig.clipvalue": {"name": "clipvalue", "path": "ludwig.modules.optimization_modules.ClipperConfig.clipvalue", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["dataclass-field"], "parent_path": "ludwig.modules.optimization_modules.ClipperConfig", "has_contents": true, "docstring": "(default: None)", "docstring_sections": [{"type": "markdown", "value": "(default: None)"}], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "Optional[float]"}}, "attributes": ["ludwig.modules.optimization_modules.ClipperConfig.clipglobalnorm", "ludwig.modules.optimization_modules.ClipperConfig.clipnorm", "ludwig.modules.optimization_modules.ClipperConfig.clipvalue"], "methods": ["ludwig.modules.optimization_modules.ClipperConfig.__eq__", "ludwig.modules.optimization_modules.ClipperConfig.__init__", "ludwig.modules.optimization_modules.ClipperConfig.__repr__", "ludwig.modules.optimization_modules.ClipperConfig.clip_grads"], "functions": [], "modules": [], "classes": ["ludwig.modules.optimization_modules.ClipperConfig.Schema"], "bases": ["ludwig.utils.marshmallow_schema_utils.BaseMarshmallowConfig"]}]}, "ComparatorCombinerConfig": {"loading_errors": [], "parsing_errors": {}, "objects": [{"name": "ComparatorCombinerConfig", "path": "ludwig.combiners.combiners.ComparatorCombinerConfig", "category": "class", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["dataclass"], "parent_path": "ludwig.combiners.combiners", "has_contents": true, "docstring": "Parameters for comparator combiner.", "docstring_sections": [{"type": "markdown", "value": "Parameters for comparator combiner."}], "source": {"code": "class ComparatorCombinerConfig(BaseCombinerConfig):\n    \"\"\"Parameters for comparator combiner.\"\"\"\n\n    entity_1: List[str]\n    \"\"\"TODO: Document parameters.\"\"\"\n\n    entity_2: List[str]\n    \"\"\"TODO: Document parameters.\"\"\"\n\n    fc_layers: Optional[List[Dict[str, Any]]] = schema.DictList()\n    \"\"\"TODO: Document parameters. (default: None).\"\"\"\n\n    num_fc_layers: int = schema.NonNegativeInteger(default=1)\n    \"\"\"TODO: Document parameters. (default: 1).\"\"\"\n\n    output_size: int = schema.PositiveInteger(default=256)\n    \"\"\"Output size of a fully connected layer (default: 256).\"\"\"\n\n    use_bias: bool = True\n    \"\"\"Whether the layer uses a bias vector (default: True).\"\"\"\n\n    weights_initializer: Union[str, Dict] = schema.InitializerOrDict(default=\"xavier_uniform\")\n    \"\"\"TODO: Document parameters. (default: 'xavier_uniform').\"\"\"\n\n    bias_initializer: Union[str, Dict] = schema.InitializerOrDict(default=\"zeros\")\n    \"\"\"TODO: Document parameters. (default: 'zeros').\"\"\"\n\n    norm: Optional[str] = schema.StringOptions([\"batch\", \"layer\"])\n    \"\"\"TODO: Document parameters. (default: None).\"\"\"\n\n    norm_params: Optional[dict] = schema.Dict()\n    \"\"\"TODO: Document parameters. (default: None).\"\"\"\n\n    activation: str = \"relu\"\n    \"\"\"TODO: Document parameters. (default: 'relu').\"\"\"\n\n    dropout: float = schema.FloatRange(default=0.0, min=0, max=1)\n    \"\"\"Dropout rate for the transformer block (default: 0.0).\"\"\"\n", "line_start": 955}, "children": {"ludwig.combiners.combiners.ComparatorCombinerConfig.Schema": {"name": "Schema", "path": "ludwig.combiners.combiners.ComparatorCombinerConfig.Schema", "category": "class", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["marshmallow-model"], "parent_path": "ludwig.combiners.combiners.ComparatorCombinerConfig", "has_contents": true, "docstring": "", "docstring_sections": [], "source": {}, "children": {"ludwig.combiners.combiners.ComparatorCombinerConfig.Schema.Meta": {"name": "Meta", "path": "ludwig.combiners.combiners.ComparatorCombinerConfig.Schema.Meta", "category": "class", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": [], "parent_path": "ludwig.combiners.combiners.ComparatorCombinerConfig.Schema", "has_contents": true, "docstring": "Sub-class specifying meta information for Marshmallow.\n\nCurrently only sets `unknown` flag to `EXCLUDE`. This is done to mirror Ludwig behavior: unknown properties are\nexcluded from `load` calls so that the marshmallow_dataclass package can be used but\n`get_custom_schema_from_marshmallow_class` will manually set a marshmallow schema's `additionalProperties` attr.\nto True so that JSON objects with extra properties do not raise errors; as a result properties are picked and\nfilled in as necessary.", "docstring_sections": [{"type": "markdown", "value": "Sub-class specifying meta information for Marshmallow.\n\nCurrently only sets `unknown` flag to `EXCLUDE`. This is done to mirror Ludwig behavior: unknown properties are\nexcluded from `load` calls so that the marshmallow_dataclass package can be used but\n`get_custom_schema_from_marshmallow_class` will manually set a marshmallow schema's `additionalProperties` attr.\nto True so that JSON objects with extra properties do not raise errors; as a result properties are picked and\nfilled in as necessary."}], "source": {"code": "    class Meta:\n        \"\"\"Sub-class specifying meta information for Marshmallow.\n\n        Currently only sets `unknown` flag to `EXCLUDE`. This is done to mirror Ludwig behavior: unknown properties are\n        excluded from `load` calls so that the marshmallow_dataclass package can be used but\n        `get_custom_schema_from_marshmallow_class` will manually set a marshmallow schema's `additionalProperties` attr.\n        to True so that JSON objects with extra properties do not raise errors; as a result properties are picked and\n        filled in as necessary.\n        \"\"\"\n\n        unknown = EXCLUDE\n        \"Flag that sets marshmallow `load` calls to ignore unknown properties passed as a parameter.\"\n", "line_start": 49}, "children": {"ludwig.combiners.combiners.ComparatorCombinerConfig.Schema.Meta.unknown": {"name": "unknown", "path": "ludwig.combiners.combiners.ComparatorCombinerConfig.Schema.Meta.unknown", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": [], "parent_path": "ludwig.combiners.combiners.ComparatorCombinerConfig.Schema.Meta", "has_contents": true, "docstring": "Flag that sets marshmallow `load` calls to ignore unknown properties passed as a parameter.", "docstring_sections": [{"type": "markdown", "value": "Flag that sets marshmallow `load` calls to ignore unknown properties passed as a parameter."}], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": ""}}, "attributes": ["ludwig.combiners.combiners.ComparatorCombinerConfig.Schema.Meta.unknown"], "methods": [], "functions": [], "modules": [], "classes": [], "bases": ["object"]}, "ludwig.combiners.combiners.ComparatorCombinerConfig.Schema._declared_fields": {"name": "_declared_fields", "path": "ludwig.combiners.combiners.ComparatorCombinerConfig.Schema._declared_fields", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["private"], "parent_path": "ludwig.combiners.combiners.ComparatorCombinerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": ""}, "ludwig.combiners.combiners.ComparatorCombinerConfig.Schema._hooks": {"name": "_hooks", "path": "ludwig.combiners.combiners.ComparatorCombinerConfig.Schema._hooks", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["private"], "parent_path": "ludwig.combiners.combiners.ComparatorCombinerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": ""}, "ludwig.combiners.combiners.ComparatorCombinerConfig.Schema.opts": {"name": "opts", "path": "ludwig.combiners.combiners.ComparatorCombinerConfig.Schema.opts", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": [], "parent_path": "ludwig.combiners.combiners.ComparatorCombinerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": ""}, "ludwig.combiners.combiners.ComparatorCombinerConfig.Schema.entity_1": {"name": "entity_1", "path": "ludwig.combiners.combiners.ComparatorCombinerConfig.Schema.entity_1", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["marshmallow-field", "required"], "parent_path": "ludwig.combiners.combiners.ComparatorCombinerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "List"}, "ludwig.combiners.combiners.ComparatorCombinerConfig.Schema.entity_2": {"name": "entity_2", "path": "ludwig.combiners.combiners.ComparatorCombinerConfig.Schema.entity_2", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["marshmallow-field", "required"], "parent_path": "ludwig.combiners.combiners.ComparatorCombinerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "List"}, "ludwig.combiners.combiners.ComparatorCombinerConfig.Schema.fc_layers": {"name": "fc_layers", "path": "ludwig.combiners.combiners.ComparatorCombinerConfig.Schema.fc_layers", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.combiners.combiners.ComparatorCombinerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "List"}, "ludwig.combiners.combiners.ComparatorCombinerConfig.Schema.num_fc_layers": {"name": "num_fc_layers", "path": "ludwig.combiners.combiners.ComparatorCombinerConfig.Schema.num_fc_layers", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.combiners.combiners.ComparatorCombinerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "Integer"}, "ludwig.combiners.combiners.ComparatorCombinerConfig.Schema.output_size": {"name": "output_size", "path": "ludwig.combiners.combiners.ComparatorCombinerConfig.Schema.output_size", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.combiners.combiners.ComparatorCombinerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "Integer"}, "ludwig.combiners.combiners.ComparatorCombinerConfig.Schema.use_bias": {"name": "use_bias", "path": "ludwig.combiners.combiners.ComparatorCombinerConfig.Schema.use_bias", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.combiners.combiners.ComparatorCombinerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "Boolean"}, "ludwig.combiners.combiners.ComparatorCombinerConfig.Schema.weights_initializer": {"name": "weights_initializer", "path": "ludwig.combiners.combiners.ComparatorCombinerConfig.Schema.weights_initializer", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.combiners.combiners.ComparatorCombinerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "InitializerOptionsOrCustomDictField"}, "ludwig.combiners.combiners.ComparatorCombinerConfig.Schema.bias_initializer": {"name": "bias_initializer", "path": "ludwig.combiners.combiners.ComparatorCombinerConfig.Schema.bias_initializer", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.combiners.combiners.ComparatorCombinerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "InitializerOptionsOrCustomDictField"}, "ludwig.combiners.combiners.ComparatorCombinerConfig.Schema.norm": {"name": "norm", "path": "ludwig.combiners.combiners.ComparatorCombinerConfig.Schema.norm", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.combiners.combiners.ComparatorCombinerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "String"}, "ludwig.combiners.combiners.ComparatorCombinerConfig.Schema.norm_params": {"name": "norm_params", "path": "ludwig.combiners.combiners.ComparatorCombinerConfig.Schema.norm_params", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.combiners.combiners.ComparatorCombinerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "Dict"}, "ludwig.combiners.combiners.ComparatorCombinerConfig.Schema.activation": {"name": "activation", "path": "ludwig.combiners.combiners.ComparatorCombinerConfig.Schema.activation", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.combiners.combiners.ComparatorCombinerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "String"}, "ludwig.combiners.combiners.ComparatorCombinerConfig.Schema.dropout": {"name": "dropout", "path": "ludwig.combiners.combiners.ComparatorCombinerConfig.Schema.dropout", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.combiners.combiners.ComparatorCombinerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "Float"}}, "attributes": ["ludwig.combiners.combiners.ComparatorCombinerConfig.Schema._declared_fields", "ludwig.combiners.combiners.ComparatorCombinerConfig.Schema._hooks", "ludwig.combiners.combiners.ComparatorCombinerConfig.Schema.opts", "ludwig.combiners.combiners.ComparatorCombinerConfig.Schema.entity_1", "ludwig.combiners.combiners.ComparatorCombinerConfig.Schema.entity_2", "ludwig.combiners.combiners.ComparatorCombinerConfig.Schema.fc_layers", "ludwig.combiners.combiners.ComparatorCombinerConfig.Schema.num_fc_layers", "ludwig.combiners.combiners.ComparatorCombinerConfig.Schema.output_size", "ludwig.combiners.combiners.ComparatorCombinerConfig.Schema.use_bias", "ludwig.combiners.combiners.ComparatorCombinerConfig.Schema.weights_initializer", "ludwig.combiners.combiners.ComparatorCombinerConfig.Schema.bias_initializer", "ludwig.combiners.combiners.ComparatorCombinerConfig.Schema.norm", "ludwig.combiners.combiners.ComparatorCombinerConfig.Schema.norm_params", "ludwig.combiners.combiners.ComparatorCombinerConfig.Schema.activation", "ludwig.combiners.combiners.ComparatorCombinerConfig.Schema.dropout"], "methods": [], "functions": [], "modules": [], "classes": ["ludwig.combiners.combiners.ComparatorCombinerConfig.Schema.Meta"], "bases": ["marshmallow_dataclass._base_schema.<locals>.BaseSchema"]}, "ludwig.combiners.combiners.ComparatorCombinerConfig.__eq__": {"name": "__eq__", "path": "ludwig.combiners.combiners.ComparatorCombinerConfig.__eq__", "category": "method", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["special"], "parent_path": "ludwig.combiners.combiners.ComparatorCombinerConfig", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "signature": {"parameters": [{"kind": "POSITIONAL_OR_KEYWORD", "name": "self"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "other"}]}}, "ludwig.combiners.combiners.ComparatorCombinerConfig.__init__": {"name": "__init__", "path": "ludwig.combiners.combiners.ComparatorCombinerConfig.__init__", "category": "method", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["special"], "parent_path": "ludwig.combiners.combiners.ComparatorCombinerConfig", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "signature": {"parameters": [{"kind": "POSITIONAL_OR_KEYWORD", "name": "self"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "entity_1", "annotation": "List[str]"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "entity_2", "annotation": "List[str]"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "fc_layers", "annotation": "Optional[List[Dict[str, Any]]]", "default": "<factory>"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "num_fc_layers", "annotation": "int", "default": "1"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "output_size", "annotation": "int", "default": "256"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "use_bias", "annotation": "bool", "default": "True"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "weights_initializer", "annotation": "Union[str, Dict]", "default": "'xavier_uniform'"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "bias_initializer", "annotation": "Union[str, Dict]", "default": "'zeros'"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "norm", "annotation": "Optional[str]", "default": "None"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "norm_params", "annotation": "Optional[dict]", "default": "<factory>"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "activation", "annotation": "str", "default": "'relu'"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "dropout", "annotation": "float", "default": "0.0"}], "return_annotation": "None"}}, "ludwig.combiners.combiners.ComparatorCombinerConfig.__repr__": {"name": "__repr__", "path": "ludwig.combiners.combiners.ComparatorCombinerConfig.__repr__", "category": "method", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["special"], "parent_path": "ludwig.combiners.combiners.ComparatorCombinerConfig", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "signature": {"parameters": [{"kind": "POSITIONAL_OR_KEYWORD", "name": "self"}]}}, "ludwig.combiners.combiners.ComparatorCombinerConfig.activation": {"name": "activation", "path": "ludwig.combiners.combiners.ComparatorCombinerConfig.activation", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["dataclass-field"], "parent_path": "ludwig.combiners.combiners.ComparatorCombinerConfig", "has_contents": true, "docstring": "TODO: Document parameters. (default: 'relu').", "docstring_sections": [{"type": "markdown", "value": "TODO: Document parameters. (default: 'relu')."}], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "str"}, "ludwig.combiners.combiners.ComparatorCombinerConfig.bias_initializer": {"name": "bias_initializer", "path": "ludwig.combiners.combiners.ComparatorCombinerConfig.bias_initializer", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["dataclass-field"], "parent_path": "ludwig.combiners.combiners.ComparatorCombinerConfig", "has_contents": true, "docstring": "TODO: Document parameters. (default: 'zeros').", "docstring_sections": [{"type": "markdown", "value": "TODO: Document parameters. (default: 'zeros')."}], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "Union[str, Dict]"}, "ludwig.combiners.combiners.ComparatorCombinerConfig.dropout": {"name": "dropout", "path": "ludwig.combiners.combiners.ComparatorCombinerConfig.dropout", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["dataclass-field"], "parent_path": "ludwig.combiners.combiners.ComparatorCombinerConfig", "has_contents": true, "docstring": "Dropout rate for the transformer block (default: 0.0).", "docstring_sections": [{"type": "markdown", "value": "Dropout rate for the transformer block (default: 0.0)."}], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "float"}, "ludwig.combiners.combiners.ComparatorCombinerConfig.norm": {"name": "norm", "path": "ludwig.combiners.combiners.ComparatorCombinerConfig.norm", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["dataclass-field"], "parent_path": "ludwig.combiners.combiners.ComparatorCombinerConfig", "has_contents": true, "docstring": "TODO: Document parameters. (default: None).", "docstring_sections": [{"type": "markdown", "value": "TODO: Document parameters. (default: None)."}], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "Optional[str]"}, "ludwig.combiners.combiners.ComparatorCombinerConfig.num_fc_layers": {"name": "num_fc_layers", "path": "ludwig.combiners.combiners.ComparatorCombinerConfig.num_fc_layers", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["dataclass-field"], "parent_path": "ludwig.combiners.combiners.ComparatorCombinerConfig", "has_contents": true, "docstring": "TODO: Document parameters. (default: 1).", "docstring_sections": [{"type": "markdown", "value": "TODO: Document parameters. (default: 1)."}], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "int"}, "ludwig.combiners.combiners.ComparatorCombinerConfig.output_size": {"name": "output_size", "path": "ludwig.combiners.combiners.ComparatorCombinerConfig.output_size", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["dataclass-field"], "parent_path": "ludwig.combiners.combiners.ComparatorCombinerConfig", "has_contents": true, "docstring": "Output size of a fully connected layer (default: 256).", "docstring_sections": [{"type": "markdown", "value": "Output size of a fully connected layer (default: 256)."}], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "int"}, "ludwig.combiners.combiners.ComparatorCombinerConfig.use_bias": {"name": "use_bias", "path": "ludwig.combiners.combiners.ComparatorCombinerConfig.use_bias", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["dataclass-field"], "parent_path": "ludwig.combiners.combiners.ComparatorCombinerConfig", "has_contents": true, "docstring": "Whether the layer uses a bias vector (default: True).", "docstring_sections": [{"type": "markdown", "value": "Whether the layer uses a bias vector (default: True)."}], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "bool"}, "ludwig.combiners.combiners.ComparatorCombinerConfig.weights_initializer": {"name": "weights_initializer", "path": "ludwig.combiners.combiners.ComparatorCombinerConfig.weights_initializer", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["dataclass-field"], "parent_path": "ludwig.combiners.combiners.ComparatorCombinerConfig", "has_contents": true, "docstring": "TODO: Document parameters. (default: 'xavier_uniform').", "docstring_sections": [{"type": "markdown", "value": "TODO: Document parameters. (default: 'xavier_uniform')."}], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "Union[str, Dict]"}, "ludwig.combiners.combiners.ComparatorCombinerConfig.entity_1": {"name": "entity_1", "path": "ludwig.combiners.combiners.ComparatorCombinerConfig.entity_1", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["dataclass-field"], "parent_path": "ludwig.combiners.combiners.ComparatorCombinerConfig", "has_contents": true, "docstring": "TODO: Document parameters.", "docstring_sections": [{"type": "markdown", "value": "TODO: Document parameters."}], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "List[str]"}, "ludwig.combiners.combiners.ComparatorCombinerConfig.entity_2": {"name": "entity_2", "path": "ludwig.combiners.combiners.ComparatorCombinerConfig.entity_2", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["dataclass-field"], "parent_path": "ludwig.combiners.combiners.ComparatorCombinerConfig", "has_contents": true, "docstring": "TODO: Document parameters.", "docstring_sections": [{"type": "markdown", "value": "TODO: Document parameters."}], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "List[str]"}, "ludwig.combiners.combiners.ComparatorCombinerConfig.fc_layers": {"name": "fc_layers", "path": "ludwig.combiners.combiners.ComparatorCombinerConfig.fc_layers", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["dataclass-field"], "parent_path": "ludwig.combiners.combiners.ComparatorCombinerConfig", "has_contents": true, "docstring": "TODO: Document parameters. (default: None).", "docstring_sections": [{"type": "markdown", "value": "TODO: Document parameters. (default: None)."}], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "Optional[List[Dict[str, Any]]]"}, "ludwig.combiners.combiners.ComparatorCombinerConfig.norm_params": {"name": "norm_params", "path": "ludwig.combiners.combiners.ComparatorCombinerConfig.norm_params", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["dataclass-field"], "parent_path": "ludwig.combiners.combiners.ComparatorCombinerConfig", "has_contents": true, "docstring": "TODO: Document parameters. (default: None).", "docstring_sections": [{"type": "markdown", "value": "TODO: Document parameters. (default: None)."}], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "Optional[dict]"}}, "attributes": ["ludwig.combiners.combiners.ComparatorCombinerConfig.entity_1", "ludwig.combiners.combiners.ComparatorCombinerConfig.entity_2", "ludwig.combiners.combiners.ComparatorCombinerConfig.fc_layers", "ludwig.combiners.combiners.ComparatorCombinerConfig.num_fc_layers", "ludwig.combiners.combiners.ComparatorCombinerConfig.output_size", "ludwig.combiners.combiners.ComparatorCombinerConfig.use_bias", "ludwig.combiners.combiners.ComparatorCombinerConfig.weights_initializer", "ludwig.combiners.combiners.ComparatorCombinerConfig.bias_initializer", "ludwig.combiners.combiners.ComparatorCombinerConfig.norm", "ludwig.combiners.combiners.ComparatorCombinerConfig.norm_params", "ludwig.combiners.combiners.ComparatorCombinerConfig.activation", "ludwig.combiners.combiners.ComparatorCombinerConfig.dropout"], "methods": ["ludwig.combiners.combiners.ComparatorCombinerConfig.__eq__", "ludwig.combiners.combiners.ComparatorCombinerConfig.__init__", "ludwig.combiners.combiners.ComparatorCombinerConfig.__repr__"], "functions": [], "modules": [], "classes": ["ludwig.combiners.combiners.ComparatorCombinerConfig.Schema"], "bases": ["ludwig.combiners.combiners.BaseCombinerConfig"]}]}, "TransformerCombinerConfig": {"loading_errors": [], "parsing_errors": {}, "objects": [{"name": "TransformerCombinerConfig", "path": "ludwig.combiners.combiners.TransformerCombinerConfig", "category": "class", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["dataclass"], "parent_path": "ludwig.combiners.combiners", "has_contents": true, "docstring": "Parameters for transformer combiner.", "docstring_sections": [{"type": "markdown", "value": "Parameters for transformer combiner."}], "source": {"code": "class TransformerCombinerConfig(BaseCombinerConfig, CommonTransformerConfig):\n    \"\"\"Parameters for transformer combiner.\"\"\"\n\n    reduce_output: Optional[str] = schema.ReductionOptions(default=\"mean\")\n    \"\"\"TODO: Document parameters. (default: 'mean').\"\"\"\n", "line_start": 632}, "children": {"ludwig.combiners.combiners.TransformerCombinerConfig.Schema": {"name": "Schema", "path": "ludwig.combiners.combiners.TransformerCombinerConfig.Schema", "category": "class", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["marshmallow-model"], "parent_path": "ludwig.combiners.combiners.TransformerCombinerConfig", "has_contents": true, "docstring": "", "docstring_sections": [], "source": {}, "children": {"ludwig.combiners.combiners.TransformerCombinerConfig.Schema.Meta": {"name": "Meta", "path": "ludwig.combiners.combiners.TransformerCombinerConfig.Schema.Meta", "category": "class", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": [], "parent_path": "ludwig.combiners.combiners.TransformerCombinerConfig.Schema", "has_contents": true, "docstring": "Sub-class specifying meta information for Marshmallow.\n\nCurrently only sets `unknown` flag to `EXCLUDE`. This is done to mirror Ludwig behavior: unknown properties are\nexcluded from `load` calls so that the marshmallow_dataclass package can be used but\n`get_custom_schema_from_marshmallow_class` will manually set a marshmallow schema's `additionalProperties` attr.\nto True so that JSON objects with extra properties do not raise errors; as a result properties are picked and\nfilled in as necessary.", "docstring_sections": [{"type": "markdown", "value": "Sub-class specifying meta information for Marshmallow.\n\nCurrently only sets `unknown` flag to `EXCLUDE`. This is done to mirror Ludwig behavior: unknown properties are\nexcluded from `load` calls so that the marshmallow_dataclass package can be used but\n`get_custom_schema_from_marshmallow_class` will manually set a marshmallow schema's `additionalProperties` attr.\nto True so that JSON objects with extra properties do not raise errors; as a result properties are picked and\nfilled in as necessary."}], "source": {"code": "    class Meta:\n        \"\"\"Sub-class specifying meta information for Marshmallow.\n\n        Currently only sets `unknown` flag to `EXCLUDE`. This is done to mirror Ludwig behavior: unknown properties are\n        excluded from `load` calls so that the marshmallow_dataclass package can be used but\n        `get_custom_schema_from_marshmallow_class` will manually set a marshmallow schema's `additionalProperties` attr.\n        to True so that JSON objects with extra properties do not raise errors; as a result properties are picked and\n        filled in as necessary.\n        \"\"\"\n\n        unknown = EXCLUDE\n        \"Flag that sets marshmallow `load` calls to ignore unknown properties passed as a parameter.\"\n", "line_start": 49}, "children": {"ludwig.combiners.combiners.TransformerCombinerConfig.Schema.Meta.unknown": {"name": "unknown", "path": "ludwig.combiners.combiners.TransformerCombinerConfig.Schema.Meta.unknown", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": [], "parent_path": "ludwig.combiners.combiners.TransformerCombinerConfig.Schema.Meta", "has_contents": true, "docstring": "Flag that sets marshmallow `load` calls to ignore unknown properties passed as a parameter.", "docstring_sections": [{"type": "markdown", "value": "Flag that sets marshmallow `load` calls to ignore unknown properties passed as a parameter."}], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": ""}}, "attributes": ["ludwig.combiners.combiners.TransformerCombinerConfig.Schema.Meta.unknown"], "methods": [], "functions": [], "modules": [], "classes": [], "bases": ["object"]}, "ludwig.combiners.combiners.TransformerCombinerConfig.Schema._declared_fields": {"name": "_declared_fields", "path": "ludwig.combiners.combiners.TransformerCombinerConfig.Schema._declared_fields", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["private"], "parent_path": "ludwig.combiners.combiners.TransformerCombinerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": ""}, "ludwig.combiners.combiners.TransformerCombinerConfig.Schema._hooks": {"name": "_hooks", "path": "ludwig.combiners.combiners.TransformerCombinerConfig.Schema._hooks", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["private"], "parent_path": "ludwig.combiners.combiners.TransformerCombinerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": ""}, "ludwig.combiners.combiners.TransformerCombinerConfig.Schema.opts": {"name": "opts", "path": "ludwig.combiners.combiners.TransformerCombinerConfig.Schema.opts", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": [], "parent_path": "ludwig.combiners.combiners.TransformerCombinerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": ""}, "ludwig.combiners.combiners.TransformerCombinerConfig.Schema.num_layers": {"name": "num_layers", "path": "ludwig.combiners.combiners.TransformerCombinerConfig.Schema.num_layers", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.combiners.combiners.TransformerCombinerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "Integer"}, "ludwig.combiners.combiners.TransformerCombinerConfig.Schema.hidden_size": {"name": "hidden_size", "path": "ludwig.combiners.combiners.TransformerCombinerConfig.Schema.hidden_size", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.combiners.combiners.TransformerCombinerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "Integer"}, "ludwig.combiners.combiners.TransformerCombinerConfig.Schema.num_heads": {"name": "num_heads", "path": "ludwig.combiners.combiners.TransformerCombinerConfig.Schema.num_heads", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.combiners.combiners.TransformerCombinerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "Integer"}, "ludwig.combiners.combiners.TransformerCombinerConfig.Schema.transformer_output_size": {"name": "transformer_output_size", "path": "ludwig.combiners.combiners.TransformerCombinerConfig.Schema.transformer_output_size", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.combiners.combiners.TransformerCombinerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "Integer"}, "ludwig.combiners.combiners.TransformerCombinerConfig.Schema.dropout": {"name": "dropout", "path": "ludwig.combiners.combiners.TransformerCombinerConfig.Schema.dropout", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.combiners.combiners.TransformerCombinerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "Float"}, "ludwig.combiners.combiners.TransformerCombinerConfig.Schema.fc_layers": {"name": "fc_layers", "path": "ludwig.combiners.combiners.TransformerCombinerConfig.Schema.fc_layers", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.combiners.combiners.TransformerCombinerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "List"}, "ludwig.combiners.combiners.TransformerCombinerConfig.Schema.num_fc_layers": {"name": "num_fc_layers", "path": "ludwig.combiners.combiners.TransformerCombinerConfig.Schema.num_fc_layers", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.combiners.combiners.TransformerCombinerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "Integer"}, "ludwig.combiners.combiners.TransformerCombinerConfig.Schema.output_size": {"name": "output_size", "path": "ludwig.combiners.combiners.TransformerCombinerConfig.Schema.output_size", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.combiners.combiners.TransformerCombinerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "Integer"}, "ludwig.combiners.combiners.TransformerCombinerConfig.Schema.use_bias": {"name": "use_bias", "path": "ludwig.combiners.combiners.TransformerCombinerConfig.Schema.use_bias", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.combiners.combiners.TransformerCombinerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "Boolean"}, "ludwig.combiners.combiners.TransformerCombinerConfig.Schema.weights_initializer": {"name": "weights_initializer", "path": "ludwig.combiners.combiners.TransformerCombinerConfig.Schema.weights_initializer", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.combiners.combiners.TransformerCombinerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "InitializerOptionsOrCustomDictField"}, "ludwig.combiners.combiners.TransformerCombinerConfig.Schema.bias_initializer": {"name": "bias_initializer", "path": "ludwig.combiners.combiners.TransformerCombinerConfig.Schema.bias_initializer", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.combiners.combiners.TransformerCombinerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "InitializerOptionsOrCustomDictField"}, "ludwig.combiners.combiners.TransformerCombinerConfig.Schema.norm": {"name": "norm", "path": "ludwig.combiners.combiners.TransformerCombinerConfig.Schema.norm", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.combiners.combiners.TransformerCombinerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "String"}, "ludwig.combiners.combiners.TransformerCombinerConfig.Schema.norm_params": {"name": "norm_params", "path": "ludwig.combiners.combiners.TransformerCombinerConfig.Schema.norm_params", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.combiners.combiners.TransformerCombinerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "Dict"}, "ludwig.combiners.combiners.TransformerCombinerConfig.Schema.fc_activation": {"name": "fc_activation", "path": "ludwig.combiners.combiners.TransformerCombinerConfig.Schema.fc_activation", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.combiners.combiners.TransformerCombinerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "String"}, "ludwig.combiners.combiners.TransformerCombinerConfig.Schema.fc_dropout": {"name": "fc_dropout", "path": "ludwig.combiners.combiners.TransformerCombinerConfig.Schema.fc_dropout", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.combiners.combiners.TransformerCombinerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "Float"}, "ludwig.combiners.combiners.TransformerCombinerConfig.Schema.fc_residual": {"name": "fc_residual", "path": "ludwig.combiners.combiners.TransformerCombinerConfig.Schema.fc_residual", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.combiners.combiners.TransformerCombinerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "Boolean"}, "ludwig.combiners.combiners.TransformerCombinerConfig.Schema.reduce_output": {"name": "reduce_output", "path": "ludwig.combiners.combiners.TransformerCombinerConfig.Schema.reduce_output", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.combiners.combiners.TransformerCombinerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "String"}}, "attributes": ["ludwig.combiners.combiners.TransformerCombinerConfig.Schema._declared_fields", "ludwig.combiners.combiners.TransformerCombinerConfig.Schema._hooks", "ludwig.combiners.combiners.TransformerCombinerConfig.Schema.opts", "ludwig.combiners.combiners.TransformerCombinerConfig.Schema.num_layers", "ludwig.combiners.combiners.TransformerCombinerConfig.Schema.hidden_size", "ludwig.combiners.combiners.TransformerCombinerConfig.Schema.num_heads", "ludwig.combiners.combiners.TransformerCombinerConfig.Schema.transformer_output_size", "ludwig.combiners.combiners.TransformerCombinerConfig.Schema.dropout", "ludwig.combiners.combiners.TransformerCombinerConfig.Schema.fc_layers", "ludwig.combiners.combiners.TransformerCombinerConfig.Schema.num_fc_layers", "ludwig.combiners.combiners.TransformerCombinerConfig.Schema.output_size", "ludwig.combiners.combiners.TransformerCombinerConfig.Schema.use_bias", "ludwig.combiners.combiners.TransformerCombinerConfig.Schema.weights_initializer", "ludwig.combiners.combiners.TransformerCombinerConfig.Schema.bias_initializer", "ludwig.combiners.combiners.TransformerCombinerConfig.Schema.norm", "ludwig.combiners.combiners.TransformerCombinerConfig.Schema.norm_params", "ludwig.combiners.combiners.TransformerCombinerConfig.Schema.fc_activation", "ludwig.combiners.combiners.TransformerCombinerConfig.Schema.fc_dropout", "ludwig.combiners.combiners.TransformerCombinerConfig.Schema.fc_residual", "ludwig.combiners.combiners.TransformerCombinerConfig.Schema.reduce_output"], "methods": [], "functions": [], "modules": [], "classes": ["ludwig.combiners.combiners.TransformerCombinerConfig.Schema.Meta"], "bases": ["marshmallow_dataclass._base_schema.<locals>.BaseSchema"]}, "ludwig.combiners.combiners.TransformerCombinerConfig.__eq__": {"name": "__eq__", "path": "ludwig.combiners.combiners.TransformerCombinerConfig.__eq__", "category": "method", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["special"], "parent_path": "ludwig.combiners.combiners.TransformerCombinerConfig", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "signature": {"parameters": [{"kind": "POSITIONAL_OR_KEYWORD", "name": "self"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "other"}]}}, "ludwig.combiners.combiners.TransformerCombinerConfig.__init__": {"name": "__init__", "path": "ludwig.combiners.combiners.TransformerCombinerConfig.__init__", "category": "method", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["special"], "parent_path": "ludwig.combiners.combiners.TransformerCombinerConfig", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "signature": {"parameters": [{"kind": "POSITIONAL_OR_KEYWORD", "name": "self"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "num_layers", "annotation": "int", "default": "1"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "hidden_size", "annotation": "int", "default": "256"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "num_heads", "annotation": "int", "default": "8"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "transformer_output_size", "annotation": "int", "default": "256"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "dropout", "annotation": "float", "default": "0.1"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "fc_layers", "annotation": "Optional[List[Dict[str, Any]]]", "default": "<factory>"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "num_fc_layers", "annotation": "int", "default": "0"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "output_size", "annotation": "int", "default": "256"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "use_bias", "annotation": "bool", "default": "True"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "weights_initializer", "annotation": "Union[str, Dict]", "default": "'xavier_uniform'"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "bias_initializer", "annotation": "Union[str, Dict]", "default": "'zeros'"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "norm", "annotation": "Optional[str]", "default": "None"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "norm_params", "annotation": "Optional[dict]", "default": "<factory>"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "fc_activation", "annotation": "str", "default": "'relu'"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "fc_dropout", "annotation": "float", "default": "0.0"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "fc_residual", "annotation": "bool", "default": "False"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "reduce_output", "annotation": "Optional[str]", "default": "'mean'"}], "return_annotation": "None"}}, "ludwig.combiners.combiners.TransformerCombinerConfig.__repr__": {"name": "__repr__", "path": "ludwig.combiners.combiners.TransformerCombinerConfig.__repr__", "category": "method", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["special"], "parent_path": "ludwig.combiners.combiners.TransformerCombinerConfig", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "signature": {"parameters": [{"kind": "POSITIONAL_OR_KEYWORD", "name": "self"}]}}, "ludwig.combiners.combiners.TransformerCombinerConfig.reduce_output": {"name": "reduce_output", "path": "ludwig.combiners.combiners.TransformerCombinerConfig.reduce_output", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["dataclass-field"], "parent_path": "ludwig.combiners.combiners.TransformerCombinerConfig", "has_contents": true, "docstring": "TODO: Document parameters. (default: 'mean').", "docstring_sections": [{"type": "markdown", "value": "TODO: Document parameters. (default: 'mean')."}], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "Optional[str]"}}, "attributes": ["ludwig.combiners.combiners.TransformerCombinerConfig.reduce_output"], "methods": ["ludwig.combiners.combiners.TransformerCombinerConfig.__eq__", "ludwig.combiners.combiners.TransformerCombinerConfig.__init__", "ludwig.combiners.combiners.TransformerCombinerConfig.__repr__"], "functions": [], "modules": [], "classes": ["ludwig.combiners.combiners.TransformerCombinerConfig.Schema"], "bases": ["ludwig.combiners.combiners.BaseCombinerConfig", "ludwig.combiners.combiners.CommonTransformerConfig"]}]}, "SequenceConcatCombinerConfig": {"loading_errors": [], "parsing_errors": {}, "objects": [{"name": "SequenceConcatCombinerConfig", "path": "ludwig.combiners.combiners.SequenceConcatCombinerConfig", "category": "class", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["dataclass"], "parent_path": "ludwig.combiners.combiners", "has_contents": true, "docstring": "Parameters for sequence concat combiner.", "docstring_sections": [{"type": "markdown", "value": "Parameters for sequence concat combiner."}], "source": {"code": "class SequenceConcatCombinerConfig(BaseCombinerConfig):\n    \"\"\"Parameters for sequence concat combiner.\"\"\"\n\n    main_sequence_feature: Optional[str] = None\n    \"\"\"TODO: Document parameters. (default: None).\"\"\"\n\n    reduce_output: Optional[str] = schema.ReductionOptions()\n    \"\"\"TODO: Document parameters. (default: None).\"\"\"\n", "line_start": 219}, "children": {"ludwig.combiners.combiners.SequenceConcatCombinerConfig.Schema": {"name": "Schema", "path": "ludwig.combiners.combiners.SequenceConcatCombinerConfig.Schema", "category": "class", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["marshmallow-model"], "parent_path": "ludwig.combiners.combiners.SequenceConcatCombinerConfig", "has_contents": true, "docstring": "", "docstring_sections": [], "source": {}, "children": {"ludwig.combiners.combiners.SequenceConcatCombinerConfig.Schema.Meta": {"name": "Meta", "path": "ludwig.combiners.combiners.SequenceConcatCombinerConfig.Schema.Meta", "category": "class", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": [], "parent_path": "ludwig.combiners.combiners.SequenceConcatCombinerConfig.Schema", "has_contents": true, "docstring": "Sub-class specifying meta information for Marshmallow.\n\nCurrently only sets `unknown` flag to `EXCLUDE`. This is done to mirror Ludwig behavior: unknown properties are\nexcluded from `load` calls so that the marshmallow_dataclass package can be used but\n`get_custom_schema_from_marshmallow_class` will manually set a marshmallow schema's `additionalProperties` attr.\nto True so that JSON objects with extra properties do not raise errors; as a result properties are picked and\nfilled in as necessary.", "docstring_sections": [{"type": "markdown", "value": "Sub-class specifying meta information for Marshmallow.\n\nCurrently only sets `unknown` flag to `EXCLUDE`. This is done to mirror Ludwig behavior: unknown properties are\nexcluded from `load` calls so that the marshmallow_dataclass package can be used but\n`get_custom_schema_from_marshmallow_class` will manually set a marshmallow schema's `additionalProperties` attr.\nto True so that JSON objects with extra properties do not raise errors; as a result properties are picked and\nfilled in as necessary."}], "source": {"code": "    class Meta:\n        \"\"\"Sub-class specifying meta information for Marshmallow.\n\n        Currently only sets `unknown` flag to `EXCLUDE`. This is done to mirror Ludwig behavior: unknown properties are\n        excluded from `load` calls so that the marshmallow_dataclass package can be used but\n        `get_custom_schema_from_marshmallow_class` will manually set a marshmallow schema's `additionalProperties` attr.\n        to True so that JSON objects with extra properties do not raise errors; as a result properties are picked and\n        filled in as necessary.\n        \"\"\"\n\n        unknown = EXCLUDE\n        \"Flag that sets marshmallow `load` calls to ignore unknown properties passed as a parameter.\"\n", "line_start": 49}, "children": {"ludwig.combiners.combiners.SequenceConcatCombinerConfig.Schema.Meta.unknown": {"name": "unknown", "path": "ludwig.combiners.combiners.SequenceConcatCombinerConfig.Schema.Meta.unknown", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": [], "parent_path": "ludwig.combiners.combiners.SequenceConcatCombinerConfig.Schema.Meta", "has_contents": true, "docstring": "Flag that sets marshmallow `load` calls to ignore unknown properties passed as a parameter.", "docstring_sections": [{"type": "markdown", "value": "Flag that sets marshmallow `load` calls to ignore unknown properties passed as a parameter."}], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": ""}}, "attributes": ["ludwig.combiners.combiners.SequenceConcatCombinerConfig.Schema.Meta.unknown"], "methods": [], "functions": [], "modules": [], "classes": [], "bases": ["object"]}, "ludwig.combiners.combiners.SequenceConcatCombinerConfig.Schema._declared_fields": {"name": "_declared_fields", "path": "ludwig.combiners.combiners.SequenceConcatCombinerConfig.Schema._declared_fields", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["private"], "parent_path": "ludwig.combiners.combiners.SequenceConcatCombinerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": ""}, "ludwig.combiners.combiners.SequenceConcatCombinerConfig.Schema._hooks": {"name": "_hooks", "path": "ludwig.combiners.combiners.SequenceConcatCombinerConfig.Schema._hooks", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["private"], "parent_path": "ludwig.combiners.combiners.SequenceConcatCombinerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": ""}, "ludwig.combiners.combiners.SequenceConcatCombinerConfig.Schema.opts": {"name": "opts", "path": "ludwig.combiners.combiners.SequenceConcatCombinerConfig.Schema.opts", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": [], "parent_path": "ludwig.combiners.combiners.SequenceConcatCombinerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": ""}, "ludwig.combiners.combiners.SequenceConcatCombinerConfig.Schema.main_sequence_feature": {"name": "main_sequence_feature", "path": "ludwig.combiners.combiners.SequenceConcatCombinerConfig.Schema.main_sequence_feature", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.combiners.combiners.SequenceConcatCombinerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "String"}, "ludwig.combiners.combiners.SequenceConcatCombinerConfig.Schema.reduce_output": {"name": "reduce_output", "path": "ludwig.combiners.combiners.SequenceConcatCombinerConfig.Schema.reduce_output", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.combiners.combiners.SequenceConcatCombinerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "String"}}, "attributes": ["ludwig.combiners.combiners.SequenceConcatCombinerConfig.Schema._declared_fields", "ludwig.combiners.combiners.SequenceConcatCombinerConfig.Schema._hooks", "ludwig.combiners.combiners.SequenceConcatCombinerConfig.Schema.opts", "ludwig.combiners.combiners.SequenceConcatCombinerConfig.Schema.main_sequence_feature", "ludwig.combiners.combiners.SequenceConcatCombinerConfig.Schema.reduce_output"], "methods": [], "functions": [], "modules": [], "classes": ["ludwig.combiners.combiners.SequenceConcatCombinerConfig.Schema.Meta"], "bases": ["marshmallow_dataclass._base_schema.<locals>.BaseSchema"]}, "ludwig.combiners.combiners.SequenceConcatCombinerConfig.__eq__": {"name": "__eq__", "path": "ludwig.combiners.combiners.SequenceConcatCombinerConfig.__eq__", "category": "method", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["special"], "parent_path": "ludwig.combiners.combiners.SequenceConcatCombinerConfig", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "signature": {"parameters": [{"kind": "POSITIONAL_OR_KEYWORD", "name": "self"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "other"}]}}, "ludwig.combiners.combiners.SequenceConcatCombinerConfig.__init__": {"name": "__init__", "path": "ludwig.combiners.combiners.SequenceConcatCombinerConfig.__init__", "category": "method", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["special"], "parent_path": "ludwig.combiners.combiners.SequenceConcatCombinerConfig", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "signature": {"parameters": [{"kind": "POSITIONAL_OR_KEYWORD", "name": "self"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "main_sequence_feature", "annotation": "Optional[str]", "default": "None"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "reduce_output", "annotation": "Optional[str]", "default": "None"}], "return_annotation": "None"}}, "ludwig.combiners.combiners.SequenceConcatCombinerConfig.__repr__": {"name": "__repr__", "path": "ludwig.combiners.combiners.SequenceConcatCombinerConfig.__repr__", "category": "method", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["special"], "parent_path": "ludwig.combiners.combiners.SequenceConcatCombinerConfig", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "signature": {"parameters": [{"kind": "POSITIONAL_OR_KEYWORD", "name": "self"}]}}, "ludwig.combiners.combiners.SequenceConcatCombinerConfig.main_sequence_feature": {"name": "main_sequence_feature", "path": "ludwig.combiners.combiners.SequenceConcatCombinerConfig.main_sequence_feature", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["dataclass-field"], "parent_path": "ludwig.combiners.combiners.SequenceConcatCombinerConfig", "has_contents": true, "docstring": "TODO: Document parameters. (default: None).", "docstring_sections": [{"type": "markdown", "value": "TODO: Document parameters. (default: None)."}], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "Optional[str]"}, "ludwig.combiners.combiners.SequenceConcatCombinerConfig.reduce_output": {"name": "reduce_output", "path": "ludwig.combiners.combiners.SequenceConcatCombinerConfig.reduce_output", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/combiners/combiners.py", "relative_file_path": "ludwig/combiners/combiners.py", "properties": ["dataclass-field"], "parent_path": "ludwig.combiners.combiners.SequenceConcatCombinerConfig", "has_contents": true, "docstring": "TODO: Document parameters. (default: None).", "docstring_sections": [{"type": "markdown", "value": "TODO: Document parameters. (default: None)."}], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "Optional[str]"}}, "attributes": ["ludwig.combiners.combiners.SequenceConcatCombinerConfig.main_sequence_feature", "ludwig.combiners.combiners.SequenceConcatCombinerConfig.reduce_output"], "methods": ["ludwig.combiners.combiners.SequenceConcatCombinerConfig.__eq__", "ludwig.combiners.combiners.SequenceConcatCombinerConfig.__init__", "ludwig.combiners.combiners.SequenceConcatCombinerConfig.__repr__"], "functions": [], "modules": [], "classes": ["ludwig.combiners.combiners.SequenceConcatCombinerConfig.Schema"], "bases": ["ludwig.combiners.combiners.BaseCombinerConfig"]}]}, "AdagradOptimizerConfig": {"loading_errors": [], "parsing_errors": {}, "objects": [{"name": "AdagradOptimizerConfig", "path": "ludwig.modules.optimization_modules.AdagradOptimizerConfig", "category": "class", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["dataclass"], "parent_path": "ludwig.modules.optimization_modules", "has_contents": true, "docstring": "Parameters for adagrad optimization.", "docstring_sections": [{"type": "markdown", "value": "Parameters for adagrad optimization."}], "source": {"code": "class AdagradOptimizerConfig(BaseOptimizerConfig):\n    \"\"\"Parameters for adagrad optimization.\"\"\"\n\n    # Example docstring\n    torch_type: ClassVar[torch.optim.Optimizer] = torch.optim.Adagrad\n    \"Points to `torch.optim.Adagrad`.\"\n\n    type: str = \"adagrad\"\n    \"\"\"Must be 'adagrad' - corresponds to name in `ludwig.modules.optimization_modules.optimizer_registry`\n       (default: 'adagrad')\"\"\"\n\n    initial_accumulator_value: float = NonNegativeFloat(default=0.1)\n    \"(default: 0.1)\"\n\n    # Defaults taken from https://pytorch.org/docs/stable/generated/torch.optim.Adagrad.html#torch.optim.Adagrad :\n    lr: float = FloatRange(default=1e-2, min=0.0, max=1.0)\n    lr_decay: float = 0\n    weight_decay: float = 0\n    eps: float = 1e-10\n", "line_start": 158}, "children": {"ludwig.modules.optimization_modules.AdagradOptimizerConfig.Schema": {"name": "Schema", "path": "ludwig.modules.optimization_modules.AdagradOptimizerConfig.Schema", "category": "class", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["marshmallow-model"], "parent_path": "ludwig.modules.optimization_modules.AdagradOptimizerConfig", "has_contents": true, "docstring": "", "docstring_sections": [], "source": {}, "children": {"ludwig.modules.optimization_modules.AdagradOptimizerConfig.Schema.Meta": {"name": "Meta", "path": "ludwig.modules.optimization_modules.AdagradOptimizerConfig.Schema.Meta", "category": "class", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": [], "parent_path": "ludwig.modules.optimization_modules.AdagradOptimizerConfig.Schema", "has_contents": true, "docstring": "Sub-class specifying meta information for Marshmallow.\n\nCurrently only sets `unknown` flag to `EXCLUDE`. This is done to mirror Ludwig behavior: unknown properties are\nexcluded from `load` calls so that the marshmallow_dataclass package can be used but\n`get_custom_schema_from_marshmallow_class` will manually set a marshmallow schema's `additionalProperties` attr.\nto True so that JSON objects with extra properties do not raise errors; as a result properties are picked and\nfilled in as necessary.", "docstring_sections": [{"type": "markdown", "value": "Sub-class specifying meta information for Marshmallow.\n\nCurrently only sets `unknown` flag to `EXCLUDE`. This is done to mirror Ludwig behavior: unknown properties are\nexcluded from `load` calls so that the marshmallow_dataclass package can be used but\n`get_custom_schema_from_marshmallow_class` will manually set a marshmallow schema's `additionalProperties` attr.\nto True so that JSON objects with extra properties do not raise errors; as a result properties are picked and\nfilled in as necessary."}], "source": {"code": "    class Meta:\n        \"\"\"Sub-class specifying meta information for Marshmallow.\n\n        Currently only sets `unknown` flag to `EXCLUDE`. This is done to mirror Ludwig behavior: unknown properties are\n        excluded from `load` calls so that the marshmallow_dataclass package can be used but\n        `get_custom_schema_from_marshmallow_class` will manually set a marshmallow schema's `additionalProperties` attr.\n        to True so that JSON objects with extra properties do not raise errors; as a result properties are picked and\n        filled in as necessary.\n        \"\"\"\n\n        unknown = EXCLUDE\n        \"Flag that sets marshmallow `load` calls to ignore unknown properties passed as a parameter.\"\n", "line_start": 49}, "children": {"ludwig.modules.optimization_modules.AdagradOptimizerConfig.Schema.Meta.unknown": {"name": "unknown", "path": "ludwig.modules.optimization_modules.AdagradOptimizerConfig.Schema.Meta.unknown", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": [], "parent_path": "ludwig.modules.optimization_modules.AdagradOptimizerConfig.Schema.Meta", "has_contents": true, "docstring": "Flag that sets marshmallow `load` calls to ignore unknown properties passed as a parameter.", "docstring_sections": [{"type": "markdown", "value": "Flag that sets marshmallow `load` calls to ignore unknown properties passed as a parameter."}], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": ""}}, "attributes": ["ludwig.modules.optimization_modules.AdagradOptimizerConfig.Schema.Meta.unknown"], "methods": [], "functions": [], "modules": [], "classes": [], "bases": ["object"]}, "ludwig.modules.optimization_modules.AdagradOptimizerConfig.Schema._declared_fields": {"name": "_declared_fields", "path": "ludwig.modules.optimization_modules.AdagradOptimizerConfig.Schema._declared_fields", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["private"], "parent_path": "ludwig.modules.optimization_modules.AdagradOptimizerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": ""}, "ludwig.modules.optimization_modules.AdagradOptimizerConfig.Schema._hooks": {"name": "_hooks", "path": "ludwig.modules.optimization_modules.AdagradOptimizerConfig.Schema._hooks", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["private"], "parent_path": "ludwig.modules.optimization_modules.AdagradOptimizerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": ""}, "ludwig.modules.optimization_modules.AdagradOptimizerConfig.Schema.opts": {"name": "opts", "path": "ludwig.modules.optimization_modules.AdagradOptimizerConfig.Schema.opts", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": [], "parent_path": "ludwig.modules.optimization_modules.AdagradOptimizerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": ""}, "ludwig.modules.optimization_modules.AdagradOptimizerConfig.Schema.validate_type": {"name": "validate_type", "path": "ludwig.modules.optimization_modules.AdagradOptimizerConfig.Schema.validate_type", "category": "method", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": [], "parent_path": "ludwig.modules.optimization_modules.AdagradOptimizerConfig.Schema", "has_contents": true, "docstring": "Workaround to enforce immutable `type` in defined optimizer classes.\n\n:param data: Any-typed object that should be a string correctly identifying the optimizer type.", "docstring_sections": [{"type": "markdown", "value": "Workaround to enforce immutable `type` in defined optimizer classes."}, {"type": "parameters", "value": [{"description": "Any-typed object that should be a string correctly identifying the optimizer type.", "annotation": "", "name": "data", "kind": "POSITIONAL_OR_KEYWORD", "default": "", "is_optional": false, "is_required": true, "is_args": false, "is_kwargs": false}]}], "source": {"code": "    @validates(\"type\")\n    def validate_type(self, data, **kwargs):\n        \"\"\"Workaround to enforce immutable `type` in defined optimizer classes.\n\n        :param data: Any-typed object that should be a string correctly identifying the optimizer type.\n        \"\"\"\n        if not isinstance(data, str):\n            raise ValidationError(\n                f\"{self.__class__.__name__} expects type of field `type` to be `str`, instead received '{data}'\"\n            )\n        default = self.declared_fields[\"type\"].dump_default\n        if default is not missing and data != default:\n            # Handle aliases:\n            if optimizer_registry[default] == optimizer_registry[data]:\n                return\n            raise ValidationError(\n                f\"{self.__class__.__name__} expects value of field `type` to be '{default}', instead received '{data}'\"\n            )\n", "line_start": 62}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "signature": {"parameters": [{"kind": "POSITIONAL_OR_KEYWORD", "name": "self"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "data"}, {"kind": "VAR_KEYWORD", "name": "kwargs"}]}}, "ludwig.modules.optimization_modules.AdagradOptimizerConfig.Schema.type": {"name": "type", "path": "ludwig.modules.optimization_modules.AdagradOptimizerConfig.Schema.type", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.modules.optimization_modules.AdagradOptimizerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "String"}, "ludwig.modules.optimization_modules.AdagradOptimizerConfig.Schema.initial_accumulator_value": {"name": "initial_accumulator_value", "path": "ludwig.modules.optimization_modules.AdagradOptimizerConfig.Schema.initial_accumulator_value", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.modules.optimization_modules.AdagradOptimizerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "Float"}, "ludwig.modules.optimization_modules.AdagradOptimizerConfig.Schema.lr": {"name": "lr", "path": "ludwig.modules.optimization_modules.AdagradOptimizerConfig.Schema.lr", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.modules.optimization_modules.AdagradOptimizerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "Float"}, "ludwig.modules.optimization_modules.AdagradOptimizerConfig.Schema.lr_decay": {"name": "lr_decay", "path": "ludwig.modules.optimization_modules.AdagradOptimizerConfig.Schema.lr_decay", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.modules.optimization_modules.AdagradOptimizerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "Float"}, "ludwig.modules.optimization_modules.AdagradOptimizerConfig.Schema.weight_decay": {"name": "weight_decay", "path": "ludwig.modules.optimization_modules.AdagradOptimizerConfig.Schema.weight_decay", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.modules.optimization_modules.AdagradOptimizerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "Float"}, "ludwig.modules.optimization_modules.AdagradOptimizerConfig.Schema.eps": {"name": "eps", "path": "ludwig.modules.optimization_modules.AdagradOptimizerConfig.Schema.eps", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.modules.optimization_modules.AdagradOptimizerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "Float"}}, "attributes": ["ludwig.modules.optimization_modules.AdagradOptimizerConfig.Schema._declared_fields", "ludwig.modules.optimization_modules.AdagradOptimizerConfig.Schema._hooks", "ludwig.modules.optimization_modules.AdagradOptimizerConfig.Schema.opts", "ludwig.modules.optimization_modules.AdagradOptimizerConfig.Schema.type", "ludwig.modules.optimization_modules.AdagradOptimizerConfig.Schema.initial_accumulator_value", "ludwig.modules.optimization_modules.AdagradOptimizerConfig.Schema.lr", "ludwig.modules.optimization_modules.AdagradOptimizerConfig.Schema.lr_decay", "ludwig.modules.optimization_modules.AdagradOptimizerConfig.Schema.weight_decay", "ludwig.modules.optimization_modules.AdagradOptimizerConfig.Schema.eps"], "methods": ["ludwig.modules.optimization_modules.AdagradOptimizerConfig.Schema.validate_type"], "functions": [], "modules": [], "classes": ["ludwig.modules.optimization_modules.AdagradOptimizerConfig.Schema.Meta"], "bases": ["marshmallow_dataclass._base_schema.<locals>.BaseSchema"]}, "ludwig.modules.optimization_modules.AdagradOptimizerConfig.__eq__": {"name": "__eq__", "path": "ludwig.modules.optimization_modules.AdagradOptimizerConfig.__eq__", "category": "method", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["special"], "parent_path": "ludwig.modules.optimization_modules.AdagradOptimizerConfig", "has_contents": false, "docstring": "", "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "signature": {"parameters": [{"kind": "POSITIONAL_OR_KEYWORD", "name": "self"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "other"}]}}, "ludwig.modules.optimization_modules.AdagradOptimizerConfig.__init__": {"name": "__init__", "path": "ludwig.modules.optimization_modules.AdagradOptimizerConfig.__init__", "category": "method", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["special"], "parent_path": "ludwig.modules.optimization_modules.AdagradOptimizerConfig", "has_contents": false, "docstring": "", "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "signature": {"parameters": [{"kind": "POSITIONAL_OR_KEYWORD", "name": "self"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "type", "annotation": "str", "default": "'adagrad'"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "initial_accumulator_value", "annotation": "float", "default": "0.1"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "lr", "annotation": "float", "default": "0.01"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "lr_decay", "annotation": "float", "default": "0"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "weight_decay", "annotation": "float", "default": "0"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "eps", "annotation": "float", "default": "1e-10"}], "return_annotation": "None"}}, "ludwig.modules.optimization_modules.AdagradOptimizerConfig.__repr__": {"name": "__repr__", "path": "ludwig.modules.optimization_modules.AdagradOptimizerConfig.__repr__", "category": "method", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["special"], "parent_path": "ludwig.modules.optimization_modules.AdagradOptimizerConfig", "has_contents": false, "docstring": "", "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "signature": {"parameters": [{"kind": "POSITIONAL_OR_KEYWORD", "name": "self"}]}}, "ludwig.modules.optimization_modules.AdagradOptimizerConfig.eps": {"name": "eps", "path": "ludwig.modules.optimization_modules.AdagradOptimizerConfig.eps", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["dataclass-field"], "parent_path": "ludwig.modules.optimization_modules.AdagradOptimizerConfig", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "float"}, "ludwig.modules.optimization_modules.AdagradOptimizerConfig.initial_accumulator_value": {"name": "initial_accumulator_value", "path": "ludwig.modules.optimization_modules.AdagradOptimizerConfig.initial_accumulator_value", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["dataclass-field"], "parent_path": "ludwig.modules.optimization_modules.AdagradOptimizerConfig", "has_contents": true, "docstring": "(default: 0.1)", "docstring_sections": [{"type": "markdown", "value": "(default: 0.1)"}], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "float"}, "ludwig.modules.optimization_modules.AdagradOptimizerConfig.lr": {"name": "lr", "path": "ludwig.modules.optimization_modules.AdagradOptimizerConfig.lr", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["dataclass-field"], "parent_path": "ludwig.modules.optimization_modules.AdagradOptimizerConfig", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "float"}, "ludwig.modules.optimization_modules.AdagradOptimizerConfig.lr_decay": {"name": "lr_decay", "path": "ludwig.modules.optimization_modules.AdagradOptimizerConfig.lr_decay", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["dataclass-field"], "parent_path": "ludwig.modules.optimization_modules.AdagradOptimizerConfig", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "float"}, "ludwig.modules.optimization_modules.AdagradOptimizerConfig.torch_type": {"name": "torch_type", "path": "ludwig.modules.optimization_modules.AdagradOptimizerConfig.torch_type", "category": "class", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": [], "parent_path": "ludwig.modules.optimization_modules.AdagradOptimizerConfig", "has_contents": true, "docstring": "Implements Adagrad algorithm.\n\n.. math::\n   \\begin{aligned}\n        &\\rule{110mm}{0.4pt}                                                                 \\\\\n        &\\textbf{input}      : \\gamma \\text{ (lr)}, \\: \\theta_0 \\text{ (params)}, \\: f(\\theta)\n            \\text{ (objective)}, \\: \\lambda \\text{ (weight decay)},                          \\\\\n        &\\hspace{12mm}    \\tau \\text{ (initial accumulator value)}, \\: \\eta\\text{ (lr decay)}\\\\\n        &\\textbf{initialize} :  state\\_sum_0 \\leftarrow 0                             \\\\[-1.ex]\n        &\\rule{110mm}{0.4pt}                                                                 \\\\\n        &\\textbf{for} \\: t=1 \\: \\textbf{to} \\: \\ldots \\: \\textbf{do}                         \\\\\n        &\\hspace{5mm}g_t           \\leftarrow   \\nabla_{\\theta} f_t (\\theta_{t-1})           \\\\\n        &\\hspace{5mm} \\tilde{\\gamma}    \\leftarrow \\gamma / (1 +(t-1) \\eta)                  \\\\\n        &\\hspace{5mm} \\textbf{if} \\: \\lambda \\neq 0                                          \\\\\n        &\\hspace{10mm} g_t \\leftarrow g_t + \\lambda \\theta_{t-1}                             \\\\\n        &\\hspace{5mm}state\\_sum_t  \\leftarrow  state\\_sum_{t-1} + g^2_t                      \\\\\n        &\\hspace{5mm}\\theta_t \\leftarrow\n            \\theta_{t-1}- \\tilde{\\gamma} \\frac{g_t}{\\sqrt{state\\_sum_t}+\\epsilon}            \\\\\n        &\\rule{110mm}{0.4pt}                                                          \\\\[-1.ex]\n        &\\bf{return} \\:  \\theta_t                                                     \\\\[-1.ex]\n        &\\rule{110mm}{0.4pt}                                                          \\\\[-1.ex]\n   \\end{aligned}\n\nFor further details regarding the algorithm we refer to `Adaptive Subgradient Methods for Online Learning\nand Stochastic Optimization`_.\n\nArgs:\n    params (iterable): iterable of parameters to optimize or dicts defining\n        parameter groups\n    lr (float, optional): learning rate (default: 1e-2)\n    lr_decay (float, optional): learning rate decay (default: 0)\n    weight_decay (float, optional): weight decay (L2 penalty) (default: 0)\n    eps (float, optional): term added to the denominator to improve\n        numerical stability (default: 1e-10)\n\n.. _Adaptive Subgradient Methods for Online Learning and Stochastic\n    Optimization: http://jmlr.org/papers/v12/duchi11a.html", "docstring_sections": [{"type": "markdown", "value": "Implements Adagrad algorithm.\n\n.. math::\n   \\begin{aligned}\n        &\\rule{110mm}{0.4pt}                                                                 \\\\\n        &\\textbf{input}      : \\gamma \\text{ (lr)}, \\: \\theta_0 \\text{ (params)}, \\: f(\\theta)\n            \\text{ (objective)}, \\: \\lambda \\text{ (weight decay)},                          \\\\\n        &\\hspace{12mm}    \\tau \\text{ (initial accumulator value)}, \\: \\eta\\text{ (lr decay)}\\\\\n        &\\textbf{initialize} :  state\\_sum_0 \\leftarrow 0                             \\\\[-1.ex]\n        &\\rule{110mm}{0.4pt}                                                                 \\\\\n        &\\textbf{for} \\: t=1 \\: \\textbf{to} \\: \\ldots \\: \\textbf{do}                         \\\\\n        &\\hspace{5mm}g_t           \\leftarrow   \\nabla_{\\theta} f_t (\\theta_{t-1})           \\\\\n        &\\hspace{5mm} \\tilde{\\gamma}    \\leftarrow \\gamma / (1 +(t-1) \\eta)                  \\\\\n        &\\hspace{5mm} \\textbf{if} \\: \\lambda \\neq 0                                          \\\\\n        &\\hspace{10mm} g_t \\leftarrow g_t + \\lambda \\theta_{t-1}                             \\\\\n        &\\hspace{5mm}state\\_sum_t  \\leftarrow  state\\_sum_{t-1} + g^2_t                      \\\\\n        &\\hspace{5mm}\\theta_t \\leftarrow\n            \\theta_{t-1}- \\tilde{\\gamma} \\frac{g_t}{\\sqrt{state\\_sum_t}+\\epsilon}            \\\\\n        &\\rule{110mm}{0.4pt}                                                          \\\\[-1.ex]\n        &\\bf{return} \\:  \\theta_t                                                     \\\\[-1.ex]\n        &\\rule{110mm}{0.4pt}                                                          \\\\[-1.ex]\n   \\end{aligned}\n\nFor further details regarding the algorithm we refer to `Adaptive Subgradient Methods for Online Learning\nand Stochastic Optimization`_.\n\nArgs:\n    params (iterable): iterable of parameters to optimize or dicts defining\n        parameter groups\n    lr (float, optional): learning rate (default: 1e-2)\n    lr_decay (float, optional): learning rate decay (default: 0)\n    weight_decay (float, optional): weight decay (L2 penalty) (default: 0)\n    eps (float, optional): term added to the denominator to improve\n        numerical stability (default: 1e-10)\n\n.. _Adaptive Subgradient Methods for Online Learning and Stochastic\n    Optimization: http://jmlr.org/papers/v12/duchi11a.html"}], "source": {"code": "class Adagrad(Optimizer):\n    r\"\"\"Implements Adagrad algorithm.\n\n    .. math::\n       \\begin{aligned}\n            &\\rule{110mm}{0.4pt}                                                                 \\\\\n            &\\textbf{input}      : \\gamma \\text{ (lr)}, \\: \\theta_0 \\text{ (params)}, \\: f(\\theta)\n                \\text{ (objective)}, \\: \\lambda \\text{ (weight decay)},                          \\\\\n            &\\hspace{12mm}    \\tau \\text{ (initial accumulator value)}, \\: \\eta\\text{ (lr decay)}\\\\\n            &\\textbf{initialize} :  state\\_sum_0 \\leftarrow 0                             \\\\[-1.ex]\n            &\\rule{110mm}{0.4pt}                                                                 \\\\\n            &\\textbf{for} \\: t=1 \\: \\textbf{to} \\: \\ldots \\: \\textbf{do}                         \\\\\n            &\\hspace{5mm}g_t           \\leftarrow   \\nabla_{\\theta} f_t (\\theta_{t-1})           \\\\\n            &\\hspace{5mm} \\tilde{\\gamma}    \\leftarrow \\gamma / (1 +(t-1) \\eta)                  \\\\\n            &\\hspace{5mm} \\textbf{if} \\: \\lambda \\neq 0                                          \\\\\n            &\\hspace{10mm} g_t \\leftarrow g_t + \\lambda \\theta_{t-1}                             \\\\\n            &\\hspace{5mm}state\\_sum_t  \\leftarrow  state\\_sum_{t-1} + g^2_t                      \\\\\n            &\\hspace{5mm}\\theta_t \\leftarrow\n                \\theta_{t-1}- \\tilde{\\gamma} \\frac{g_t}{\\sqrt{state\\_sum_t}+\\epsilon}            \\\\\n            &\\rule{110mm}{0.4pt}                                                          \\\\[-1.ex]\n            &\\bf{return} \\:  \\theta_t                                                     \\\\[-1.ex]\n            &\\rule{110mm}{0.4pt}                                                          \\\\[-1.ex]\n       \\end{aligned}\n\n    For further details regarding the algorithm we refer to `Adaptive Subgradient Methods for Online Learning\n    and Stochastic Optimization`_.\n\n    Args:\n        params (iterable): iterable of parameters to optimize or dicts defining\n            parameter groups\n        lr (float, optional): learning rate (default: 1e-2)\n        lr_decay (float, optional): learning rate decay (default: 0)\n        weight_decay (float, optional): weight decay (L2 penalty) (default: 0)\n        eps (float, optional): term added to the denominator to improve\n            numerical stability (default: 1e-10)\n\n    .. _Adaptive Subgradient Methods for Online Learning and Stochastic\n        Optimization: http://jmlr.org/papers/v12/duchi11a.html\n    \"\"\"\n\n    def __init__(self, params, lr=1e-2, lr_decay=0, weight_decay=0, initial_accumulator_value=0, eps=1e-10):\n        if not 0.0 <= lr:\n            raise ValueError(\"Invalid learning rate: {}\".format(lr))\n        if not 0.0 <= lr_decay:\n            raise ValueError(\"Invalid lr_decay value: {}\".format(lr_decay))\n        if not 0.0 <= weight_decay:\n            raise ValueError(\"Invalid weight_decay value: {}\".format(weight_decay))\n        if not 0.0 <= initial_accumulator_value:\n            raise ValueError(\"Invalid initial_accumulator_value value: {}\".format(initial_accumulator_value))\n        if not 0.0 <= eps:\n            raise ValueError(\"Invalid epsilon value: {}\".format(eps))\n\n        defaults = dict(lr=lr, lr_decay=lr_decay, eps=eps, weight_decay=weight_decay,\n                        initial_accumulator_value=initial_accumulator_value)\n        super(Adagrad, self).__init__(params, defaults)\n\n        for group in self.param_groups:\n            for p in group['params']:\n                state = self.state[p]\n                state['step'] = 0\n                state['sum'] = torch.full_like(p, initial_accumulator_value, memory_format=torch.preserve_format)\n\n    def share_memory(self):\n        for group in self.param_groups:\n            for p in group['params']:\n                state = self.state[p]\n                state['sum'].share_memory_()\n\n    @torch.no_grad()\n    def step(self, closure=None):\n        \"\"\"Performs a single optimization step.\n\n        Args:\n            closure (callable, optional): A closure that reevaluates the model\n                and returns the loss.\n        \"\"\"\n        loss = None\n        if closure is not None:\n            with torch.enable_grad():\n                loss = closure()\n\n        for group in self.param_groups:\n            params_with_grad = []\n            grads = []\n            state_sums = []\n            state_steps = []\n\n            for p in group['params']:\n                if p.grad is not None:\n                    params_with_grad.append(p)\n                    grads.append(p.grad)\n                    state = self.state[p]\n                    state_sums.append(state['sum'])\n                    # update the steps for each param group update\n                    state['step'] += 1\n                    # record the step after step update\n                    state_steps.append(state['step'])\n\n            F.adagrad(params_with_grad,\n                      grads,\n                      state_sums,\n                      state_steps,\n                      lr=group['lr'],\n                      weight_decay=group['weight_decay'],\n                      lr_decay=group['lr_decay'],\n                      eps=group['eps'])\n\n        return loss\n", "line_start": 6}, "children": {"ludwig.modules.optimization_modules.AdagradOptimizerConfig.torch_type.__init__": {"name": "__init__", "path": "ludwig.modules.optimization_modules.AdagradOptimizerConfig.torch_type.__init__", "category": "method", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["special"], "parent_path": "ludwig.modules.optimization_modules.AdagradOptimizerConfig.torch_type", "has_contents": false, "docstring": "", "docstring_sections": [], "source": {"code": "    def __init__(self, params, lr=1e-2, lr_decay=0, weight_decay=0, initial_accumulator_value=0, eps=1e-10):\n        if not 0.0 <= lr:\n            raise ValueError(\"Invalid learning rate: {}\".format(lr))\n        if not 0.0 <= lr_decay:\n            raise ValueError(\"Invalid lr_decay value: {}\".format(lr_decay))\n        if not 0.0 <= weight_decay:\n            raise ValueError(\"Invalid weight_decay value: {}\".format(weight_decay))\n        if not 0.0 <= initial_accumulator_value:\n            raise ValueError(\"Invalid initial_accumulator_value value: {}\".format(initial_accumulator_value))\n        if not 0.0 <= eps:\n            raise ValueError(\"Invalid epsilon value: {}\".format(eps))\n\n        defaults = dict(lr=lr, lr_decay=lr_decay, eps=eps, weight_decay=weight_decay,\n                        initial_accumulator_value=initial_accumulator_value)\n        super(Adagrad, self).__init__(params, defaults)\n\n        for group in self.param_groups:\n            for p in group['params']:\n                state = self.state[p]\n                state['step'] = 0\n                state['sum'] = torch.full_like(p, initial_accumulator_value, memory_format=torch.preserve_format)\n", "line_start": 46}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "signature": {"parameters": [{"kind": "POSITIONAL_OR_KEYWORD", "name": "self"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "params"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "lr", "default": "0.01"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "lr_decay", "default": "0"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "weight_decay", "default": "0"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "initial_accumulator_value", "default": "0"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "eps", "default": "1e-10"}]}}, "ludwig.modules.optimization_modules.AdagradOptimizerConfig.torch_type.share_memory": {"name": "share_memory", "path": "ludwig.modules.optimization_modules.AdagradOptimizerConfig.torch_type.share_memory", "category": "method", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": [], "parent_path": "ludwig.modules.optimization_modules.AdagradOptimizerConfig.torch_type", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {"code": "    def share_memory(self):\n        for group in self.param_groups:\n            for p in group['params']:\n                state = self.state[p]\n                state['sum'].share_memory_()\n", "line_start": 68}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "signature": {"parameters": [{"kind": "POSITIONAL_OR_KEYWORD", "name": "self"}]}}, "ludwig.modules.optimization_modules.AdagradOptimizerConfig.torch_type.step": {"name": "step", "path": "ludwig.modules.optimization_modules.AdagradOptimizerConfig.torch_type.step", "category": "method", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": [], "parent_path": "ludwig.modules.optimization_modules.AdagradOptimizerConfig.torch_type", "has_contents": true, "docstring": "Performs a single optimization step.\n\nArgs:\n    closure (callable, optional): A closure that reevaluates the model\n        and returns the loss.", "docstring_sections": [{"type": "markdown", "value": "Performs a single optimization step.\n\nArgs:\n    closure (callable, optional): A closure that reevaluates the model\n        and returns the loss."}], "source": {"code": "    @torch.no_grad()\n    def step(self, closure=None):\n        \"\"\"Performs a single optimization step.\n\n        Args:\n            closure (callable, optional): A closure that reevaluates the model\n                and returns the loss.\n        \"\"\"\n        loss = None\n        if closure is not None:\n            with torch.enable_grad():\n                loss = closure()\n\n        for group in self.param_groups:\n            params_with_grad = []\n            grads = []\n            state_sums = []\n            state_steps = []\n\n            for p in group['params']:\n                if p.grad is not None:\n                    params_with_grad.append(p)\n                    grads.append(p.grad)\n                    state = self.state[p]\n                    state_sums.append(state['sum'])\n                    # update the steps for each param group update\n                    state['step'] += 1\n                    # record the step after step update\n                    state_steps.append(state['step'])\n\n            F.adagrad(params_with_grad,\n                      grads,\n                      state_sums,\n                      state_steps,\n                      lr=group['lr'],\n                      weight_decay=group['weight_decay'],\n                      lr_decay=group['lr_decay'],\n                      eps=group['eps'])\n\n        return loss\n", "line_start": 74}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "signature": {"parameters": [{"kind": "POSITIONAL_OR_KEYWORD", "name": "self"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "closure", "default": "None"}]}}}, "attributes": [], "methods": ["ludwig.modules.optimization_modules.AdagradOptimizerConfig.torch_type.__init__", "ludwig.modules.optimization_modules.AdagradOptimizerConfig.torch_type.share_memory", "ludwig.modules.optimization_modules.AdagradOptimizerConfig.torch_type.step"], "functions": [], "modules": [], "classes": [], "bases": ["torch.optim.optimizer.Optimizer"]}, "ludwig.modules.optimization_modules.AdagradOptimizerConfig.type": {"name": "type", "path": "ludwig.modules.optimization_modules.AdagradOptimizerConfig.type", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": [], "parent_path": "ludwig.modules.optimization_modules.AdagradOptimizerConfig", "has_contents": true, "docstring": "Must be 'adagrad' - corresponds to name in `ludwig.modules.optimization_modules.optimizer_registry`\n(default: 'adagrad')", "docstring_sections": [{"type": "markdown", "value": "Must be 'adagrad' - corresponds to name in `ludwig.modules.optimization_modules.optimizer_registry`\n(default: 'adagrad')"}], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "str"}, "ludwig.modules.optimization_modules.AdagradOptimizerConfig.weight_decay": {"name": "weight_decay", "path": "ludwig.modules.optimization_modules.AdagradOptimizerConfig.weight_decay", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["dataclass-field"], "parent_path": "ludwig.modules.optimization_modules.AdagradOptimizerConfig", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "float"}}, "attributes": ["ludwig.modules.optimization_modules.AdagradOptimizerConfig.type", "ludwig.modules.optimization_modules.AdagradOptimizerConfig.initial_accumulator_value", "ludwig.modules.optimization_modules.AdagradOptimizerConfig.lr", "ludwig.modules.optimization_modules.AdagradOptimizerConfig.lr_decay", "ludwig.modules.optimization_modules.AdagradOptimizerConfig.weight_decay", "ludwig.modules.optimization_modules.AdagradOptimizerConfig.eps"], "methods": ["ludwig.modules.optimization_modules.AdagradOptimizerConfig.__eq__", "ludwig.modules.optimization_modules.AdagradOptimizerConfig.__init__", "ludwig.modules.optimization_modules.AdagradOptimizerConfig.__repr__"], "functions": [], "modules": [], "classes": ["ludwig.modules.optimization_modules.AdagradOptimizerConfig.Schema", "ludwig.modules.optimization_modules.AdagradOptimizerConfig.torch_type"], "bases": ["ludwig.modules.optimization_modules.BaseOptimizerConfig"]}]}, "FtrlOptimizerConfig": {"loading_errors": [], "parsing_errors": {}, "objects": [{"name": "FtrlOptimizerConfig", "path": "ludwig.modules.optimization_modules.FtrlOptimizerConfig", "category": "class", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["dataclass"], "parent_path": "ludwig.modules.optimization_modules", "has_contents": true, "docstring": "FtrlOptimizerConfig(type: str = 'ftrl', learning_rate_power: float = -0.5, initial_accumulator_value: float = 0.1, l1_regularization_strength: float = 0.0, l2_regularization_strength: float = 0.0)", "docstring_sections": [{"type": "markdown", "value": "FtrlOptimizerConfig(type: str = 'ftrl', learning_rate_power: float = -0.5, initial_accumulator_value: float = 0.1, l1_regularization_strength: float = 0.0, l2_regularization_strength: float = 0.0)"}], "source": {"code": "class FtrlOptimizerConfig(BaseOptimizerConfig):\n    # torch_type: ClassVar[torch.optim.Optimizer] = torch.optim.Ftrl\n    type: str = \"ftrl\"\n    learning_rate_power: float = FloatRange(default=-0.5, max=0.0)\n    initial_accumulator_value: float = NonNegativeFloat(default=0.1)\n    l1_regularization_strength: float = NonNegativeFloat(default=0.0)\n    l2_regularization_strength: float = NonNegativeFloat(default=0.0)\n", "line_start": 201}, "children": {"ludwig.modules.optimization_modules.FtrlOptimizerConfig.Schema": {"name": "Schema", "path": "ludwig.modules.optimization_modules.FtrlOptimizerConfig.Schema", "category": "class", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["marshmallow-model"], "parent_path": "ludwig.modules.optimization_modules.FtrlOptimizerConfig", "has_contents": true, "docstring": "", "docstring_sections": [], "source": {}, "children": {"ludwig.modules.optimization_modules.FtrlOptimizerConfig.Schema.Meta": {"name": "Meta", "path": "ludwig.modules.optimization_modules.FtrlOptimizerConfig.Schema.Meta", "category": "class", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": [], "parent_path": "ludwig.modules.optimization_modules.FtrlOptimizerConfig.Schema", "has_contents": true, "docstring": "Sub-class specifying meta information for Marshmallow.\n\nCurrently only sets `unknown` flag to `EXCLUDE`. This is done to mirror Ludwig behavior: unknown properties are\nexcluded from `load` calls so that the marshmallow_dataclass package can be used but\n`get_custom_schema_from_marshmallow_class` will manually set a marshmallow schema's `additionalProperties` attr.\nto True so that JSON objects with extra properties do not raise errors; as a result properties are picked and\nfilled in as necessary.", "docstring_sections": [{"type": "markdown", "value": "Sub-class specifying meta information for Marshmallow.\n\nCurrently only sets `unknown` flag to `EXCLUDE`. This is done to mirror Ludwig behavior: unknown properties are\nexcluded from `load` calls so that the marshmallow_dataclass package can be used but\n`get_custom_schema_from_marshmallow_class` will manually set a marshmallow schema's `additionalProperties` attr.\nto True so that JSON objects with extra properties do not raise errors; as a result properties are picked and\nfilled in as necessary."}], "source": {"code": "    class Meta:\n        \"\"\"Sub-class specifying meta information for Marshmallow.\n\n        Currently only sets `unknown` flag to `EXCLUDE`. This is done to mirror Ludwig behavior: unknown properties are\n        excluded from `load` calls so that the marshmallow_dataclass package can be used but\n        `get_custom_schema_from_marshmallow_class` will manually set a marshmallow schema's `additionalProperties` attr.\n        to True so that JSON objects with extra properties do not raise errors; as a result properties are picked and\n        filled in as necessary.\n        \"\"\"\n\n        unknown = EXCLUDE\n        \"Flag that sets marshmallow `load` calls to ignore unknown properties passed as a parameter.\"\n", "line_start": 49}, "children": {"ludwig.modules.optimization_modules.FtrlOptimizerConfig.Schema.Meta.unknown": {"name": "unknown", "path": "ludwig.modules.optimization_modules.FtrlOptimizerConfig.Schema.Meta.unknown", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": [], "parent_path": "ludwig.modules.optimization_modules.FtrlOptimizerConfig.Schema.Meta", "has_contents": true, "docstring": "Flag that sets marshmallow `load` calls to ignore unknown properties passed as a parameter.", "docstring_sections": [{"type": "markdown", "value": "Flag that sets marshmallow `load` calls to ignore unknown properties passed as a parameter."}], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": ""}}, "attributes": ["ludwig.modules.optimization_modules.FtrlOptimizerConfig.Schema.Meta.unknown"], "methods": [], "functions": [], "modules": [], "classes": [], "bases": ["object"]}, "ludwig.modules.optimization_modules.FtrlOptimizerConfig.Schema._declared_fields": {"name": "_declared_fields", "path": "ludwig.modules.optimization_modules.FtrlOptimizerConfig.Schema._declared_fields", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["private"], "parent_path": "ludwig.modules.optimization_modules.FtrlOptimizerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": ""}, "ludwig.modules.optimization_modules.FtrlOptimizerConfig.Schema._hooks": {"name": "_hooks", "path": "ludwig.modules.optimization_modules.FtrlOptimizerConfig.Schema._hooks", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["private"], "parent_path": "ludwig.modules.optimization_modules.FtrlOptimizerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": ""}, "ludwig.modules.optimization_modules.FtrlOptimizerConfig.Schema.opts": {"name": "opts", "path": "ludwig.modules.optimization_modules.FtrlOptimizerConfig.Schema.opts", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": [], "parent_path": "ludwig.modules.optimization_modules.FtrlOptimizerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": ""}, "ludwig.modules.optimization_modules.FtrlOptimizerConfig.Schema.validate_type": {"name": "validate_type", "path": "ludwig.modules.optimization_modules.FtrlOptimizerConfig.Schema.validate_type", "category": "method", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": [], "parent_path": "ludwig.modules.optimization_modules.FtrlOptimizerConfig.Schema", "has_contents": true, "docstring": "Workaround to enforce immutable `type` in defined optimizer classes.\n\n:param data: Any-typed object that should be a string correctly identifying the optimizer type.", "docstring_sections": [{"type": "markdown", "value": "Workaround to enforce immutable `type` in defined optimizer classes."}, {"type": "parameters", "value": [{"description": "Any-typed object that should be a string correctly identifying the optimizer type.", "annotation": "", "name": "data", "kind": "POSITIONAL_OR_KEYWORD", "default": "", "is_optional": false, "is_required": true, "is_args": false, "is_kwargs": false}]}], "source": {"code": "    @validates(\"type\")\n    def validate_type(self, data, **kwargs):\n        \"\"\"Workaround to enforce immutable `type` in defined optimizer classes.\n\n        :param data: Any-typed object that should be a string correctly identifying the optimizer type.\n        \"\"\"\n        if not isinstance(data, str):\n            raise ValidationError(\n                f\"{self.__class__.__name__} expects type of field `type` to be `str`, instead received '{data}'\"\n            )\n        default = self.declared_fields[\"type\"].dump_default\n        if default is not missing and data != default:\n            # Handle aliases:\n            if optimizer_registry[default] == optimizer_registry[data]:\n                return\n            raise ValidationError(\n                f\"{self.__class__.__name__} expects value of field `type` to be '{default}', instead received '{data}'\"\n            )\n", "line_start": 62}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "signature": {"parameters": [{"kind": "POSITIONAL_OR_KEYWORD", "name": "self"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "data"}, {"kind": "VAR_KEYWORD", "name": "kwargs"}]}}, "ludwig.modules.optimization_modules.FtrlOptimizerConfig.Schema.type": {"name": "type", "path": "ludwig.modules.optimization_modules.FtrlOptimizerConfig.Schema.type", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.modules.optimization_modules.FtrlOptimizerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "String"}, "ludwig.modules.optimization_modules.FtrlOptimizerConfig.Schema.learning_rate_power": {"name": "learning_rate_power", "path": "ludwig.modules.optimization_modules.FtrlOptimizerConfig.Schema.learning_rate_power", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.modules.optimization_modules.FtrlOptimizerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "Float"}, "ludwig.modules.optimization_modules.FtrlOptimizerConfig.Schema.initial_accumulator_value": {"name": "initial_accumulator_value", "path": "ludwig.modules.optimization_modules.FtrlOptimizerConfig.Schema.initial_accumulator_value", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.modules.optimization_modules.FtrlOptimizerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "Float"}, "ludwig.modules.optimization_modules.FtrlOptimizerConfig.Schema.l1_regularization_strength": {"name": "l1_regularization_strength", "path": "ludwig.modules.optimization_modules.FtrlOptimizerConfig.Schema.l1_regularization_strength", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.modules.optimization_modules.FtrlOptimizerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "Float"}, "ludwig.modules.optimization_modules.FtrlOptimizerConfig.Schema.l2_regularization_strength": {"name": "l2_regularization_strength", "path": "ludwig.modules.optimization_modules.FtrlOptimizerConfig.Schema.l2_regularization_strength", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.modules.optimization_modules.FtrlOptimizerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "Float"}}, "attributes": ["ludwig.modules.optimization_modules.FtrlOptimizerConfig.Schema._declared_fields", "ludwig.modules.optimization_modules.FtrlOptimizerConfig.Schema._hooks", "ludwig.modules.optimization_modules.FtrlOptimizerConfig.Schema.opts", "ludwig.modules.optimization_modules.FtrlOptimizerConfig.Schema.type", "ludwig.modules.optimization_modules.FtrlOptimizerConfig.Schema.learning_rate_power", "ludwig.modules.optimization_modules.FtrlOptimizerConfig.Schema.initial_accumulator_value", "ludwig.modules.optimization_modules.FtrlOptimizerConfig.Schema.l1_regularization_strength", "ludwig.modules.optimization_modules.FtrlOptimizerConfig.Schema.l2_regularization_strength"], "methods": ["ludwig.modules.optimization_modules.FtrlOptimizerConfig.Schema.validate_type"], "functions": [], "modules": [], "classes": ["ludwig.modules.optimization_modules.FtrlOptimizerConfig.Schema.Meta"], "bases": ["marshmallow_dataclass._base_schema.<locals>.BaseSchema"]}, "ludwig.modules.optimization_modules.FtrlOptimizerConfig.__eq__": {"name": "__eq__", "path": "ludwig.modules.optimization_modules.FtrlOptimizerConfig.__eq__", "category": "method", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["special"], "parent_path": "ludwig.modules.optimization_modules.FtrlOptimizerConfig", "has_contents": false, "docstring": "", "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "signature": {"parameters": [{"kind": "POSITIONAL_OR_KEYWORD", "name": "self"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "other"}]}}, "ludwig.modules.optimization_modules.FtrlOptimizerConfig.__init__": {"name": "__init__", "path": "ludwig.modules.optimization_modules.FtrlOptimizerConfig.__init__", "category": "method", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["special"], "parent_path": "ludwig.modules.optimization_modules.FtrlOptimizerConfig", "has_contents": false, "docstring": "", "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "signature": {"parameters": [{"kind": "POSITIONAL_OR_KEYWORD", "name": "self"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "type", "annotation": "str", "default": "'ftrl'"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "learning_rate_power", "annotation": "float", "default": "-0.5"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "initial_accumulator_value", "annotation": "float", "default": "0.1"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "l1_regularization_strength", "annotation": "float", "default": "0.0"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "l2_regularization_strength", "annotation": "float", "default": "0.0"}], "return_annotation": "None"}}, "ludwig.modules.optimization_modules.FtrlOptimizerConfig.__repr__": {"name": "__repr__", "path": "ludwig.modules.optimization_modules.FtrlOptimizerConfig.__repr__", "category": "method", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["special"], "parent_path": "ludwig.modules.optimization_modules.FtrlOptimizerConfig", "has_contents": false, "docstring": "", "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "signature": {"parameters": [{"kind": "POSITIONAL_OR_KEYWORD", "name": "self"}]}}, "ludwig.modules.optimization_modules.FtrlOptimizerConfig.initial_accumulator_value": {"name": "initial_accumulator_value", "path": "ludwig.modules.optimization_modules.FtrlOptimizerConfig.initial_accumulator_value", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["dataclass-field"], "parent_path": "ludwig.modules.optimization_modules.FtrlOptimizerConfig", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "float"}, "ludwig.modules.optimization_modules.FtrlOptimizerConfig.l1_regularization_strength": {"name": "l1_regularization_strength", "path": "ludwig.modules.optimization_modules.FtrlOptimizerConfig.l1_regularization_strength", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["dataclass-field"], "parent_path": "ludwig.modules.optimization_modules.FtrlOptimizerConfig", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "float"}, "ludwig.modules.optimization_modules.FtrlOptimizerConfig.l2_regularization_strength": {"name": "l2_regularization_strength", "path": "ludwig.modules.optimization_modules.FtrlOptimizerConfig.l2_regularization_strength", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["dataclass-field"], "parent_path": "ludwig.modules.optimization_modules.FtrlOptimizerConfig", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "float"}, "ludwig.modules.optimization_modules.FtrlOptimizerConfig.learning_rate_power": {"name": "learning_rate_power", "path": "ludwig.modules.optimization_modules.FtrlOptimizerConfig.learning_rate_power", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["dataclass-field"], "parent_path": "ludwig.modules.optimization_modules.FtrlOptimizerConfig", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "float"}, "ludwig.modules.optimization_modules.FtrlOptimizerConfig.type": {"name": "type", "path": "ludwig.modules.optimization_modules.FtrlOptimizerConfig.type", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": [], "parent_path": "ludwig.modules.optimization_modules.FtrlOptimizerConfig", "has_contents": true, "docstring": "Name corresponding to an optimizer `ludwig.modules.optimization_modules.optimizer_registry`.\nTechnically mutable, but attempting to load a derived optimizer with `type` set to a mismatched value will\nresult in a `ValidationError`.", "docstring_sections": [{"type": "markdown", "value": "Name corresponding to an optimizer `ludwig.modules.optimization_modules.optimizer_registry`.\nTechnically mutable, but attempting to load a derived optimizer with `type` set to a mismatched value will\nresult in a `ValidationError`."}], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "str"}}, "attributes": ["ludwig.modules.optimization_modules.FtrlOptimizerConfig.type", "ludwig.modules.optimization_modules.FtrlOptimizerConfig.learning_rate_power", "ludwig.modules.optimization_modules.FtrlOptimizerConfig.initial_accumulator_value", "ludwig.modules.optimization_modules.FtrlOptimizerConfig.l1_regularization_strength", "ludwig.modules.optimization_modules.FtrlOptimizerConfig.l2_regularization_strength"], "methods": ["ludwig.modules.optimization_modules.FtrlOptimizerConfig.__eq__", "ludwig.modules.optimization_modules.FtrlOptimizerConfig.__init__", "ludwig.modules.optimization_modules.FtrlOptimizerConfig.__repr__"], "functions": [], "modules": [], "classes": ["ludwig.modules.optimization_modules.FtrlOptimizerConfig.Schema"], "bases": ["ludwig.modules.optimization_modules.BaseOptimizerConfig"]}]}}
