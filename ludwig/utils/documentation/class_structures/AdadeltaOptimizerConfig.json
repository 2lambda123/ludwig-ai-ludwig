{"loading_errors": [], "parsing_errors": {}, "objects": [{"name": "AdadeltaOptimizerConfig", "path": "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig", "category": "class", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["dataclass"], "parent_path": "ludwig.modules.optimization_modules", "has_contents": true, "docstring": "Parameters for adadelta optimization.", "docstring_sections": [{"type": "markdown", "value": "Parameters for adadelta optimization."}], "source": {"code": "class AdadeltaOptimizerConfig(BaseOptimizerConfig):\n    \"\"\"Parameters for adadelta optimization.\"\"\"\n\n    torch_type: ClassVar[torch.optim.Optimizer] = torch.optim.Adadelta\n    \"Points to `torch.optim.Adadelta`.\"\n\n    type: str = \"adadelta\"\n    \"\"\"Must be 'adadelta' - corresponds to name in `ludwig.modules.optimization_modules.optimizer_registry`\n       (default: 'adadelta')\"\"\"\n\n    rho: float = FloatRange(default=0.95, min=0.0, max=1.0)\n    \"(default: 0.95)\"\n\n    eps: float = NonNegativeFloat(default=1e-08)\n    \"(default: 1e-08)\"\n\n    # Defaults taken from https://pytorch.org/docs/stable/generated/torch.optim.Adadelta.html#torch.optim.Adadelta :\n    lr: float = FloatRange(default=1.0, min=0.0, max=1.0)\n    weight_decay: float = NonNegativeFloat(default=0.0)\n", "line_start": 135}, "children": {"ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.Schema": {"name": "Schema", "path": "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.Schema", "category": "class", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["marshmallow-model"], "parent_path": "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig", "has_contents": true, "docstring": "", "docstring_sections": [], "source": {}, "children": {"ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.Schema.Meta": {"name": "Meta", "path": "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.Schema.Meta", "category": "class", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": [], "parent_path": "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.Schema", "has_contents": true, "docstring": "Sub-class specifying meta information for Marshmallow.\n\nCurrently only sets `unknown` flag to `EXCLUDE`. This is done to mirror Ludwig behavior: unknown properties are\nexcluded from `load` calls so that the marshmallow_dataclass package can be used but\n`get_custom_schema_from_marshmallow_class` will manually set a marshmallow schema's `additionalProperties` attr.\nto True so that JSON objects with extra properties do not raise errors; as a result properties are picked and\nfilled in as necessary.", "docstring_sections": [{"type": "markdown", "value": "Sub-class specifying meta information for Marshmallow.\n\nCurrently only sets `unknown` flag to `EXCLUDE`. This is done to mirror Ludwig behavior: unknown properties are\nexcluded from `load` calls so that the marshmallow_dataclass package can be used but\n`get_custom_schema_from_marshmallow_class` will manually set a marshmallow schema's `additionalProperties` attr.\nto True so that JSON objects with extra properties do not raise errors; as a result properties are picked and\nfilled in as necessary."}], "source": {"code": "    class Meta:\n        \"\"\"Sub-class specifying meta information for Marshmallow.\n\n        Currently only sets `unknown` flag to `EXCLUDE`. This is done to mirror Ludwig behavior: unknown properties are\n        excluded from `load` calls so that the marshmallow_dataclass package can be used but\n        `get_custom_schema_from_marshmallow_class` will manually set a marshmallow schema's `additionalProperties` attr.\n        to True so that JSON objects with extra properties do not raise errors; as a result properties are picked and\n        filled in as necessary.\n        \"\"\"\n\n        unknown = EXCLUDE\n        \"Flag that sets marshmallow `load` calls to ignore unknown properties passed as a parameter.\"\n", "line_start": 49}, "children": {"ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.Schema.Meta.unknown": {"name": "unknown", "path": "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.Schema.Meta.unknown", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": [], "parent_path": "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.Schema.Meta", "has_contents": true, "docstring": "Flag that sets marshmallow `load` calls to ignore unknown properties passed as a parameter.", "docstring_sections": [{"type": "markdown", "value": "Flag that sets marshmallow `load` calls to ignore unknown properties passed as a parameter."}], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": ""}}, "attributes": ["ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.Schema.Meta.unknown"], "methods": [], "functions": [], "modules": [], "classes": [], "bases": ["object"]}, "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.Schema._declared_fields": {"name": "_declared_fields", "path": "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.Schema._declared_fields", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["private"], "parent_path": "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": ""}, "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.Schema._hooks": {"name": "_hooks", "path": "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.Schema._hooks", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["private"], "parent_path": "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": ""}, "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.Schema.opts": {"name": "opts", "path": "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.Schema.opts", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": [], "parent_path": "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": ""}, "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.Schema.validate_type": {"name": "validate_type", "path": "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.Schema.validate_type", "category": "method", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": [], "parent_path": "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.Schema", "has_contents": true, "docstring": "Workaround to enforce immutable `type` in defined optimizer classes.\n\n:param data: Any-typed object that should be a string correctly identifying the optimizer type.", "docstring_sections": [{"type": "markdown", "value": "Workaround to enforce immutable `type` in defined optimizer classes."}, {"type": "parameters", "value": [{"description": "Any-typed object that should be a string correctly identifying the optimizer type.", "annotation": "", "name": "data", "kind": "POSITIONAL_OR_KEYWORD", "default": "", "is_optional": false, "is_required": true, "is_args": false, "is_kwargs": false}]}], "source": {"code": "    @validates(\"type\")\n    def validate_type(self, data, **kwargs):\n        \"\"\"Workaround to enforce immutable `type` in defined optimizer classes.\n\n        :param data: Any-typed object that should be a string correctly identifying the optimizer type.\n        \"\"\"\n        if not isinstance(data, str):\n            raise ValidationError(\n                f\"{self.__class__.__name__} expects type of field `type` to be `str`, instead received '{data}'\"\n            )\n        default = self.declared_fields[\"type\"].dump_default\n        if default is not missing and data != default:\n            # Handle aliases:\n            if optimizer_registry[default] == optimizer_registry[data]:\n                return\n            raise ValidationError(\n                f\"{self.__class__.__name__} expects value of field `type` to be '{default}', instead received '{data}'\"\n            )\n", "line_start": 62}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "signature": {"parameters": [{"kind": "POSITIONAL_OR_KEYWORD", "name": "self"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "data"}, {"kind": "VAR_KEYWORD", "name": "kwargs"}]}}, "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.Schema.type": {"name": "type", "path": "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.Schema.type", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "String"}, "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.Schema.rho": {"name": "rho", "path": "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.Schema.rho", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "Float"}, "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.Schema.eps": {"name": "eps", "path": "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.Schema.eps", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "Float"}, "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.Schema.lr": {"name": "lr", "path": "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.Schema.lr", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "Float"}, "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.Schema.weight_decay": {"name": "weight_decay", "path": "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.Schema.weight_decay", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "Float"}}, "attributes": ["ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.Schema._declared_fields", "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.Schema._hooks", "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.Schema.opts", "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.Schema.type", "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.Schema.rho", "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.Schema.eps", "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.Schema.lr", "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.Schema.weight_decay"], "methods": ["ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.Schema.validate_type"], "functions": [], "modules": [], "classes": ["ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.Schema.Meta"], "bases": ["marshmallow_dataclass._base_schema.<locals>.BaseSchema"]}, "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.__eq__": {"name": "__eq__", "path": "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.__eq__", "category": "method", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["special"], "parent_path": "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig", "has_contents": false, "docstring": "", "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "signature": {"parameters": [{"kind": "POSITIONAL_OR_KEYWORD", "name": "self"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "other"}]}}, "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.__init__": {"name": "__init__", "path": "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.__init__", "category": "method", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["special"], "parent_path": "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig", "has_contents": false, "docstring": "", "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "signature": {"parameters": [{"kind": "POSITIONAL_OR_KEYWORD", "name": "self"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "type", "annotation": "str", "default": "'adadelta'"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "rho", "annotation": "float", "default": "0.95"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "eps", "annotation": "float", "default": "1e-08"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "lr", "annotation": "float", "default": "1.0"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "weight_decay", "annotation": "float", "default": "0.0"}], "return_annotation": "None"}}, "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.__repr__": {"name": "__repr__", "path": "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.__repr__", "category": "method", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["special"], "parent_path": "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig", "has_contents": false, "docstring": "", "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "signature": {"parameters": [{"kind": "POSITIONAL_OR_KEYWORD", "name": "self"}]}}, "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.eps": {"name": "eps", "path": "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.eps", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["dataclass-field"], "parent_path": "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig", "has_contents": true, "docstring": "(default: 1e-08)", "docstring_sections": [{"type": "markdown", "value": "(default: 1e-08)"}], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "float"}, "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.lr": {"name": "lr", "path": "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.lr", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["dataclass-field"], "parent_path": "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "float"}, "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.rho": {"name": "rho", "path": "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.rho", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["dataclass-field"], "parent_path": "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig", "has_contents": true, "docstring": "(default: 0.95)", "docstring_sections": [{"type": "markdown", "value": "(default: 0.95)"}], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "float"}, "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.torch_type": {"name": "torch_type", "path": "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.torch_type", "category": "class", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": [], "parent_path": "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig", "has_contents": true, "docstring": "Implements Adadelta algorithm.\n\n.. math::\n   \\begin{aligned}\n        &\\rule{110mm}{0.4pt}                                                                 \\\\\n        &\\textbf{input}      : \\gamma \\text{ (lr)}, \\: \\theta_0 \\text{ (params)},\n            \\: f(\\theta) \\text{ (objective)}, \\: \\rho \\text{ (decay)},\n            \\: \\lambda \\text{ (weight decay)}                                                \\\\\n        &\\textbf{initialize} :  v_0  \\leftarrow 0 \\: \\text{ (square avg)},\n            \\: u_0 \\leftarrow 0 \\: \\text{ (accumulate variables)}                     \\\\[-1.ex]\n        &\\rule{110mm}{0.4pt}                                                                 \\\\\n        &\\textbf{for} \\: t=1 \\: \\textbf{to} \\: \\ldots \\: \\textbf{do}                         \\\\\n        &\\hspace{5mm}g_t           \\leftarrow   \\nabla_{\\theta} f_t (\\theta_{t-1})           \\\\\n        &\\hspace{5mm}if \\: \\lambda \\neq 0                                                    \\\\\n        &\\hspace{10mm} g_t \\leftarrow g_t + \\lambda  \\theta_{t-1}                            \\\\\n        &\\hspace{5mm} v_t      \\leftarrow v_{t-1} \\rho + g^2_t (1 - \\rho)                    \\\\\n        &\\hspace{5mm}\\Delta x_t    \\leftarrow   \\frac{\\sqrt{u_{t-1} +\n            \\epsilon }}{ \\sqrt{v_t + \\epsilon}  }g_t \\hspace{21mm}                           \\\\\n        &\\hspace{5mm} u_t  \\leftarrow   u_{t-1}  \\rho +\n             \\Delta x^2_t  (1 - \\rho)                                                        \\\\\n        &\\hspace{5mm}\\theta_t      \\leftarrow   \\theta_{t-1} - \\gamma  \\Delta x_t            \\\\\n        &\\rule{110mm}{0.4pt}                                                          \\\\[-1.ex]\n        &\\bf{return} \\:  \\theta_t                                                     \\\\[-1.ex]\n        &\\rule{110mm}{0.4pt}                                                          \\\\[-1.ex]\n   \\end{aligned}\n\nFor further details regarding the algorithm we refer to `ADADELTA: An Adaptive Learning Rate Method`_.\n\nArgs:\n    params (iterable): iterable of parameters to optimize or dicts defining\n        parameter groups\n    rho (float, optional): coefficient used for computing a running average\n        of squared gradients (default: 0.9)\n    eps (float, optional): term added to the denominator to improve\n        numerical stability (default: 1e-6)\n    lr (float, optional): coefficient that scale delta before it is applied\n        to the parameters (default: 1.0)\n    weight_decay (float, optional): weight decay (L2 penalty) (default: 0)\n\n.. _ADADELTA\\: An Adaptive Learning Rate Method:\n    https://arxiv.org/abs/1212.5701", "docstring_sections": [{"type": "markdown", "value": "Implements Adadelta algorithm.\n\n.. math::\n   \\begin{aligned}\n        &\\rule{110mm}{0.4pt}                                                                 \\\\\n        &\\textbf{input}      : \\gamma \\text{ (lr)}, \\: \\theta_0 \\text{ (params)},\n            \\: f(\\theta) \\text{ (objective)}, \\: \\rho \\text{ (decay)},\n            \\: \\lambda \\text{ (weight decay)}                                                \\\\\n        &\\textbf{initialize} :  v_0  \\leftarrow 0 \\: \\text{ (square avg)},\n            \\: u_0 \\leftarrow 0 \\: \\text{ (accumulate variables)}                     \\\\[-1.ex]\n        &\\rule{110mm}{0.4pt}                                                                 \\\\\n        &\\textbf{for} \\: t=1 \\: \\textbf{to} \\: \\ldots \\: \\textbf{do}                         \\\\\n        &\\hspace{5mm}g_t           \\leftarrow   \\nabla_{\\theta} f_t (\\theta_{t-1})           \\\\\n        &\\hspace{5mm}if \\: \\lambda \\neq 0                                                    \\\\\n        &\\hspace{10mm} g_t \\leftarrow g_t + \\lambda  \\theta_{t-1}                            \\\\\n        &\\hspace{5mm} v_t      \\leftarrow v_{t-1} \\rho + g^2_t (1 - \\rho)                    \\\\\n        &\\hspace{5mm}\\Delta x_t    \\leftarrow   \\frac{\\sqrt{u_{t-1} +\n            \\epsilon }}{ \\sqrt{v_t + \\epsilon}  }g_t \\hspace{21mm}                           \\\\\n        &\\hspace{5mm} u_t  \\leftarrow   u_{t-1}  \\rho +\n             \\Delta x^2_t  (1 - \\rho)                                                        \\\\\n        &\\hspace{5mm}\\theta_t      \\leftarrow   \\theta_{t-1} - \\gamma  \\Delta x_t            \\\\\n        &\\rule{110mm}{0.4pt}                                                          \\\\[-1.ex]\n        &\\bf{return} \\:  \\theta_t                                                     \\\\[-1.ex]\n        &\\rule{110mm}{0.4pt}                                                          \\\\[-1.ex]\n   \\end{aligned}\n\nFor further details regarding the algorithm we refer to `ADADELTA: An Adaptive Learning Rate Method`_.\n\nArgs:\n    params (iterable): iterable of parameters to optimize or dicts defining\n        parameter groups\n    rho (float, optional): coefficient used for computing a running average\n        of squared gradients (default: 0.9)\n    eps (float, optional): term added to the denominator to improve\n        numerical stability (default: 1e-6)\n    lr (float, optional): coefficient that scale delta before it is applied\n        to the parameters (default: 1.0)\n    weight_decay (float, optional): weight decay (L2 penalty) (default: 0)\n\n.. _ADADELTA\\: An Adaptive Learning Rate Method:\n    https://arxiv.org/abs/1212.5701"}], "source": {"code": "class Adadelta(Optimizer):\n    r\"\"\"Implements Adadelta algorithm.\n\n    .. math::\n       \\begin{aligned}\n            &\\rule{110mm}{0.4pt}                                                                 \\\\\n            &\\textbf{input}      : \\gamma \\text{ (lr)}, \\: \\theta_0 \\text{ (params)},\n                \\: f(\\theta) \\text{ (objective)}, \\: \\rho \\text{ (decay)},\n                \\: \\lambda \\text{ (weight decay)}                                                \\\\\n            &\\textbf{initialize} :  v_0  \\leftarrow 0 \\: \\text{ (square avg)},\n                \\: u_0 \\leftarrow 0 \\: \\text{ (accumulate variables)}                     \\\\[-1.ex]\n            &\\rule{110mm}{0.4pt}                                                                 \\\\\n            &\\textbf{for} \\: t=1 \\: \\textbf{to} \\: \\ldots \\: \\textbf{do}                         \\\\\n            &\\hspace{5mm}g_t           \\leftarrow   \\nabla_{\\theta} f_t (\\theta_{t-1})           \\\\\n            &\\hspace{5mm}if \\: \\lambda \\neq 0                                                    \\\\\n            &\\hspace{10mm} g_t \\leftarrow g_t + \\lambda  \\theta_{t-1}                            \\\\\n            &\\hspace{5mm} v_t      \\leftarrow v_{t-1} \\rho + g^2_t (1 - \\rho)                    \\\\\n            &\\hspace{5mm}\\Delta x_t    \\leftarrow   \\frac{\\sqrt{u_{t-1} +\n                \\epsilon }}{ \\sqrt{v_t + \\epsilon}  }g_t \\hspace{21mm}                           \\\\\n            &\\hspace{5mm} u_t  \\leftarrow   u_{t-1}  \\rho +\n                 \\Delta x^2_t  (1 - \\rho)                                                        \\\\\n            &\\hspace{5mm}\\theta_t      \\leftarrow   \\theta_{t-1} - \\gamma  \\Delta x_t            \\\\\n            &\\rule{110mm}{0.4pt}                                                          \\\\[-1.ex]\n            &\\bf{return} \\:  \\theta_t                                                     \\\\[-1.ex]\n            &\\rule{110mm}{0.4pt}                                                          \\\\[-1.ex]\n       \\end{aligned}\n\n    For further details regarding the algorithm we refer to `ADADELTA: An Adaptive Learning Rate Method`_.\n\n    Args:\n        params (iterable): iterable of parameters to optimize or dicts defining\n            parameter groups\n        rho (float, optional): coefficient used for computing a running average\n            of squared gradients (default: 0.9)\n        eps (float, optional): term added to the denominator to improve\n            numerical stability (default: 1e-6)\n        lr (float, optional): coefficient that scale delta before it is applied\n            to the parameters (default: 1.0)\n        weight_decay (float, optional): weight decay (L2 penalty) (default: 0)\n\n    .. _ADADELTA\\: An Adaptive Learning Rate Method:\n        https://arxiv.org/abs/1212.5701\n    \"\"\"\n\n    def __init__(self, params, lr=1.0, rho=0.9, eps=1e-6, weight_decay=0):\n        if not 0.0 <= lr:\n            raise ValueError(\"Invalid learning rate: {}\".format(lr))\n        if not 0.0 <= rho <= 1.0:\n            raise ValueError(\"Invalid rho value: {}\".format(rho))\n        if not 0.0 <= eps:\n            raise ValueError(\"Invalid epsilon value: {}\".format(eps))\n        if not 0.0 <= weight_decay:\n            raise ValueError(\"Invalid weight_decay value: {}\".format(weight_decay))\n\n        defaults = dict(lr=lr, rho=rho, eps=eps, weight_decay=weight_decay)\n        super(Adadelta, self).__init__(params, defaults)\n\n    @torch.no_grad()\n    def step(self, closure=None):\n        \"\"\"Performs a single optimization step.\n\n        Args:\n            closure (callable, optional): A closure that reevaluates the model\n                and returns the loss.\n        \"\"\"\n        loss = None\n        if closure is not None:\n            with torch.enable_grad():\n                loss = closure()\n\n        for group in self.param_groups:\n            params_with_grad = []\n            grads = []\n            square_avgs = []\n            acc_deltas = []\n            lr, rho, eps, weight_decay = group['lr'], group['rho'], group['eps'], group['weight_decay']\n\n            for p in group['params']:\n                if p.grad is None:\n                    continue\n                params_with_grad.append(p)\n                if p.grad.is_sparse:\n                    raise RuntimeError('Adadelta does not support sparse gradients')\n                grads.append(p.grad)\n\n                state = self.state[p]\n\n                # Lazy state initialization\n                if len(state) == 0:\n                    state['step'] = 0\n                    state['square_avg'] = torch.zeros_like(p, memory_format=torch.preserve_format)\n                    state['acc_delta'] = torch.zeros_like(p, memory_format=torch.preserve_format)\n\n                square_avgs.append(state['square_avg'])\n                acc_deltas.append(state['acc_delta'])\n\n                state['step'] += 1\n\n            F.adadelta(params_with_grad,\n                       grads,\n                       square_avgs,\n                       acc_deltas,\n                       lr=lr,\n                       rho=rho,\n                       eps=eps,\n                       weight_decay=weight_decay)\n\n        return loss\n", "line_start": 7}, "children": {"ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.torch_type.__init__": {"name": "__init__", "path": "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.torch_type.__init__", "category": "method", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["special"], "parent_path": "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.torch_type", "has_contents": false, "docstring": "", "docstring_sections": [], "source": {"code": "    def __init__(self, params, lr=1.0, rho=0.9, eps=1e-6, weight_decay=0):\n        if not 0.0 <= lr:\n            raise ValueError(\"Invalid learning rate: {}\".format(lr))\n        if not 0.0 <= rho <= 1.0:\n            raise ValueError(\"Invalid rho value: {}\".format(rho))\n        if not 0.0 <= eps:\n            raise ValueError(\"Invalid epsilon value: {}\".format(eps))\n        if not 0.0 <= weight_decay:\n            raise ValueError(\"Invalid weight_decay value: {}\".format(weight_decay))\n\n        defaults = dict(lr=lr, rho=rho, eps=eps, weight_decay=weight_decay)\n        super(Adadelta, self).__init__(params, defaults)\n", "line_start": 51}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "signature": {"parameters": [{"kind": "POSITIONAL_OR_KEYWORD", "name": "self"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "params"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "lr", "default": "1.0"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "rho", "default": "0.9"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "eps", "default": "1e-06"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "weight_decay", "default": "0"}]}}, "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.torch_type.step": {"name": "step", "path": "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.torch_type.step", "category": "method", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": [], "parent_path": "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.torch_type", "has_contents": true, "docstring": "Performs a single optimization step.\n\nArgs:\n    closure (callable, optional): A closure that reevaluates the model\n        and returns the loss.", "docstring_sections": [{"type": "markdown", "value": "Performs a single optimization step.\n\nArgs:\n    closure (callable, optional): A closure that reevaluates the model\n        and returns the loss."}], "source": {"code": "    @torch.no_grad()\n    def step(self, closure=None):\n        \"\"\"Performs a single optimization step.\n\n        Args:\n            closure (callable, optional): A closure that reevaluates the model\n                and returns the loss.\n        \"\"\"\n        loss = None\n        if closure is not None:\n            with torch.enable_grad():\n                loss = closure()\n\n        for group in self.param_groups:\n            params_with_grad = []\n            grads = []\n            square_avgs = []\n            acc_deltas = []\n            lr, rho, eps, weight_decay = group['lr'], group['rho'], group['eps'], group['weight_decay']\n\n            for p in group['params']:\n                if p.grad is None:\n                    continue\n                params_with_grad.append(p)\n                if p.grad.is_sparse:\n                    raise RuntimeError('Adadelta does not support sparse gradients')\n                grads.append(p.grad)\n\n                state = self.state[p]\n\n                # Lazy state initialization\n                if len(state) == 0:\n                    state['step'] = 0\n                    state['square_avg'] = torch.zeros_like(p, memory_format=torch.preserve_format)\n                    state['acc_delta'] = torch.zeros_like(p, memory_format=torch.preserve_format)\n\n                square_avgs.append(state['square_avg'])\n                acc_deltas.append(state['acc_delta'])\n\n                state['step'] += 1\n\n            F.adadelta(params_with_grad,\n                       grads,\n                       square_avgs,\n                       acc_deltas,\n                       lr=lr,\n                       rho=rho,\n                       eps=eps,\n                       weight_decay=weight_decay)\n\n        return loss\n", "line_start": 64}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "signature": {"parameters": [{"kind": "POSITIONAL_OR_KEYWORD", "name": "self"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "closure", "default": "None"}]}}}, "attributes": [], "methods": ["ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.torch_type.__init__", "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.torch_type.step"], "functions": [], "modules": [], "classes": [], "bases": ["torch.optim.optimizer.Optimizer"]}, "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.type": {"name": "type", "path": "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.type", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": [], "parent_path": "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig", "has_contents": true, "docstring": "Must be 'adadelta' - corresponds to name in `ludwig.modules.optimization_modules.optimizer_registry`\n(default: 'adadelta')", "docstring_sections": [{"type": "markdown", "value": "Must be 'adadelta' - corresponds to name in `ludwig.modules.optimization_modules.optimizer_registry`\n(default: 'adadelta')"}], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "str"}, "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.weight_decay": {"name": "weight_decay", "path": "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.weight_decay", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["dataclass-field"], "parent_path": "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "float"}}, "attributes": ["ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.type", "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.rho", "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.eps", "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.lr", "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.weight_decay"], "methods": ["ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.__eq__", "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.__init__", "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.__repr__"], "functions": [], "modules": [], "classes": ["ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.Schema", "ludwig.modules.optimization_modules.AdadeltaOptimizerConfig.torch_type"], "bases": ["ludwig.modules.optimization_modules.BaseOptimizerConfig"]}]}
