{"loading_errors": [], "parsing_errors": {}, "objects": [{"name": "RMSPropOptimizerConfig", "path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig", "category": "class", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["dataclass"], "parent_path": "ludwig.modules.optimization_modules", "has_contents": true, "docstring": "Parameters for rmsprop optimization.", "docstring_sections": [{"type": "markdown", "value": "Parameters for rmsprop optimization."}], "source": {"code": "class RMSPropOptimizerConfig(BaseOptimizerConfig):\n    \"\"\"Parameters for rmsprop optimization.\"\"\"\n\n    torch_type: ClassVar[torch.optim.Optimizer] = torch.optim.RMSprop\n    \"Points to `torch.optim.RMSprop`.\"\n\n    type: str = \"rmsprop\"\n    \"\"\"Must be 'rmsprop' - corresponds to name in `ludwig.modules.optimization_modules.optimizer_registry`\n       (default: 'rmsprop')\"\"\"\n\n    weight_decay: float = NonNegativeFloat(default=0.9)\n    \"(default: 0.9)\"\n\n    momentum: float = NonNegativeFloat(default=0.0)\n    \"(default: 0.0)\"\n\n    eps: float = NonNegativeFloat(default=1e-10)\n    \"(default: 1e-10)\"\n\n    centered: bool = False\n    \"(default: False)\"\n\n    # Defaults taken from https://pytorch.org/docs/stable/generated/torch.optim.RMSprop.html#torch.optim.RMSprop:\n    lr: float = FloatRange(default=1e-2, min=0.0, max=1.0)\n    alpha: float = NonNegativeFloat(default=0.99)\n", "line_start": 225}, "children": {"ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema": {"name": "Schema", "path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema", "category": "class", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["marshmallow-model"], "parent_path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig", "has_contents": true, "docstring": "", "docstring_sections": [], "source": {}, "children": {"ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema.Meta": {"name": "Meta", "path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema.Meta", "category": "class", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": [], "parent_path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema", "has_contents": true, "docstring": "Sub-class specifying meta information for Marshmallow.\n\nCurrently only sets `unknown` flag to `EXCLUDE`. This is done to mirror Ludwig behavior: unknown properties are\nexcluded from `load` calls so that the marshmallow_dataclass package can be used but\n`get_custom_schema_from_marshmallow_class` will manually set a marshmallow schema's `additionalProperties` attr.\nto True so that JSON objects with extra properties do not raise errors; as a result properties are picked and\nfilled in as necessary.", "docstring_sections": [{"type": "markdown", "value": "Sub-class specifying meta information for Marshmallow.\n\nCurrently only sets `unknown` flag to `EXCLUDE`. This is done to mirror Ludwig behavior: unknown properties are\nexcluded from `load` calls so that the marshmallow_dataclass package can be used but\n`get_custom_schema_from_marshmallow_class` will manually set a marshmallow schema's `additionalProperties` attr.\nto True so that JSON objects with extra properties do not raise errors; as a result properties are picked and\nfilled in as necessary."}], "source": {"code": "    class Meta:\n        \"\"\"Sub-class specifying meta information for Marshmallow.\n\n        Currently only sets `unknown` flag to `EXCLUDE`. This is done to mirror Ludwig behavior: unknown properties are\n        excluded from `load` calls so that the marshmallow_dataclass package can be used but\n        `get_custom_schema_from_marshmallow_class` will manually set a marshmallow schema's `additionalProperties` attr.\n        to True so that JSON objects with extra properties do not raise errors; as a result properties are picked and\n        filled in as necessary.\n        \"\"\"\n\n        unknown = EXCLUDE\n        \"Flag that sets marshmallow `load` calls to ignore unknown properties passed as a parameter.\"\n", "line_start": 49}, "children": {"ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema.Meta.unknown": {"name": "unknown", "path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema.Meta.unknown", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": [], "parent_path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema.Meta", "has_contents": true, "docstring": "Flag that sets marshmallow `load` calls to ignore unknown properties passed as a parameter.", "docstring_sections": [{"type": "markdown", "value": "Flag that sets marshmallow `load` calls to ignore unknown properties passed as a parameter."}], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": ""}}, "attributes": ["ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema.Meta.unknown"], "methods": [], "functions": [], "modules": [], "classes": [], "bases": ["object"]}, "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema._declared_fields": {"name": "_declared_fields", "path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema._declared_fields", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["private"], "parent_path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": ""}, "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema._hooks": {"name": "_hooks", "path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema._hooks", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["private"], "parent_path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": ""}, "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema.opts": {"name": "opts", "path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema.opts", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": [], "parent_path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": ""}, "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema.validate_type": {"name": "validate_type", "path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema.validate_type", "category": "method", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": [], "parent_path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema", "has_contents": true, "docstring": "Workaround to enforce immutable `type` in defined optimizer classes.\n\n:param data: Any-typed object that should be a string correctly identifying the optimizer type.", "docstring_sections": [{"type": "markdown", "value": "Workaround to enforce immutable `type` in defined optimizer classes."}, {"type": "parameters", "value": [{"description": "Any-typed object that should be a string correctly identifying the optimizer type.", "annotation": "", "name": "data", "kind": "POSITIONAL_OR_KEYWORD", "default": "", "is_optional": false, "is_required": true, "is_args": false, "is_kwargs": false}]}], "source": {"code": "    @validates(\"type\")\n    def validate_type(self, data, **kwargs):\n        \"\"\"Workaround to enforce immutable `type` in defined optimizer classes.\n\n        :param data: Any-typed object that should be a string correctly identifying the optimizer type.\n        \"\"\"\n        if not isinstance(data, str):\n            raise ValidationError(\n                f\"{self.__class__.__name__} expects type of field `type` to be `str`, instead received '{data}'\"\n            )\n        default = self.declared_fields[\"type\"].dump_default\n        if default is not missing and data != default:\n            # Handle aliases:\n            if optimizer_registry[default] == optimizer_registry[data]:\n                return\n            raise ValidationError(\n                f\"{self.__class__.__name__} expects value of field `type` to be '{default}', instead received '{data}'\"\n            )\n", "line_start": 62}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "signature": {"parameters": [{"kind": "POSITIONAL_OR_KEYWORD", "name": "self"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "data"}, {"kind": "VAR_KEYWORD", "name": "kwargs"}]}}, "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema.type": {"name": "type", "path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema.type", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "String"}, "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema.weight_decay": {"name": "weight_decay", "path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema.weight_decay", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "Float"}, "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema.momentum": {"name": "momentum", "path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema.momentum", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "Float"}, "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema.eps": {"name": "eps", "path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema.eps", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "Float"}, "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema.centered": {"name": "centered", "path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema.centered", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "Boolean"}, "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema.lr": {"name": "lr", "path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema.lr", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "Float"}, "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema.alpha": {"name": "alpha", "path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema.alpha", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["marshmallow-field"], "parent_path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "Float"}}, "attributes": ["ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema._declared_fields", "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema._hooks", "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema.opts", "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema.type", "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema.weight_decay", "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema.momentum", "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema.eps", "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema.centered", "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema.lr", "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema.alpha"], "methods": ["ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema.validate_type"], "functions": [], "modules": [], "classes": ["ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema.Meta"], "bases": ["marshmallow_dataclass._base_schema.<locals>.BaseSchema"]}, "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.__eq__": {"name": "__eq__", "path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.__eq__", "category": "method", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["special"], "parent_path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig", "has_contents": false, "docstring": "", "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "signature": {"parameters": [{"kind": "POSITIONAL_OR_KEYWORD", "name": "self"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "other"}]}}, "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.__init__": {"name": "__init__", "path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.__init__", "category": "method", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["special"], "parent_path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig", "has_contents": false, "docstring": "", "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "signature": {"parameters": [{"kind": "POSITIONAL_OR_KEYWORD", "name": "self"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "type", "annotation": "str", "default": "'rmsprop'"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "weight_decay", "annotation": "float", "default": "0.9"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "momentum", "annotation": "float", "default": "0.0"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "eps", "annotation": "float", "default": "1e-10"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "centered", "annotation": "bool", "default": "False"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "lr", "annotation": "float", "default": "0.01"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "alpha", "annotation": "float", "default": "0.99"}], "return_annotation": "None"}}, "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.__repr__": {"name": "__repr__", "path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.__repr__", "category": "method", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["special"], "parent_path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig", "has_contents": false, "docstring": "", "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "signature": {"parameters": [{"kind": "POSITIONAL_OR_KEYWORD", "name": "self"}]}}, "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.alpha": {"name": "alpha", "path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.alpha", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["dataclass-field"], "parent_path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "float"}, "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.centered": {"name": "centered", "path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.centered", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["dataclass-field"], "parent_path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig", "has_contents": true, "docstring": "(default: False)", "docstring_sections": [{"type": "markdown", "value": "(default: False)"}], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "bool"}, "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.eps": {"name": "eps", "path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.eps", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["dataclass-field"], "parent_path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig", "has_contents": true, "docstring": "(default: 1e-10)", "docstring_sections": [{"type": "markdown", "value": "(default: 1e-10)"}], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "float"}, "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.lr": {"name": "lr", "path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.lr", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["dataclass-field"], "parent_path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig", "has_contents": false, "docstring": null, "docstring_sections": [], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "float"}, "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.momentum": {"name": "momentum", "path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.momentum", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["dataclass-field"], "parent_path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig", "has_contents": true, "docstring": "(default: 0.0)", "docstring_sections": [{"type": "markdown", "value": "(default: 0.0)"}], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "float"}, "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.torch_type": {"name": "torch_type", "path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.torch_type", "category": "class", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": [], "parent_path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig", "has_contents": true, "docstring": "Implements RMSprop algorithm.\n\n.. math::\n   \\begin{aligned}\n        &\\rule{110mm}{0.4pt}                                                                 \\\\\n        &\\textbf{input}      : \\alpha \\text{ (alpha)},\\: \\gamma \\text{ (lr)},\n            \\: \\theta_0 \\text{ (params)}, \\: f(\\theta) \\text{ (objective)}                   \\\\\n        &\\hspace{13mm}   \\lambda \\text{ (weight decay)},\\: \\mu \\text{ (momentum)},\\: centered\\\\\n        &\\textbf{initialize} : v_0 \\leftarrow 0 \\text{ (square average)}, \\:\n            \\textbf{b}_0 \\leftarrow 0 \\text{ (buffer)}, \\: g^{ave}_0 \\leftarrow 0     \\\\[-1.ex]\n        &\\rule{110mm}{0.4pt}                                                                 \\\\\n        &\\textbf{for} \\: t=1 \\: \\textbf{to} \\: \\ldots \\: \\textbf{do}                         \\\\\n        &\\hspace{5mm}g_t           \\leftarrow   \\nabla_{\\theta} f_t (\\theta_{t-1})           \\\\\n        &\\hspace{5mm}if \\: \\lambda \\neq 0                                                    \\\\\n        &\\hspace{10mm} g_t \\leftarrow g_t + \\lambda  \\theta_{t-1}                            \\\\\n        &\\hspace{5mm}v_t           \\leftarrow   \\alpha v_{t-1} + (1 - \\alpha) g^2_t\n            \\hspace{8mm}                                                                     \\\\\n        &\\hspace{5mm} \\tilde{v_t} \\leftarrow v_t                                             \\\\\n        &\\hspace{5mm}if \\: centered                                                          \\\\\n        &\\hspace{10mm} g^{ave}_t \\leftarrow g^{ave}_{t-1} \\alpha + (1-\\alpha) g_t            \\\\\n        &\\hspace{10mm} \\tilde{v_t} \\leftarrow \\tilde{v_t} -  \\big(g^{ave}_{t} \\big)^2        \\\\\n        &\\hspace{5mm}if \\: \\mu > 0                                                           \\\\\n        &\\hspace{10mm} \\textbf{b}_t\\leftarrow \\mu \\textbf{b}_{t-1} +\n            g_t/ \\big(\\sqrt{\\tilde{v_t}} +  \\epsilon \\big)                                   \\\\\n        &\\hspace{10mm} \\theta_t \\leftarrow \\theta_{t-1} - \\gamma \\textbf{b}_t                \\\\\n        &\\hspace{5mm} else                                                                   \\\\\n        &\\hspace{10mm}\\theta_t      \\leftarrow   \\theta_{t-1} -\n            \\gamma  g_t/ \\big(\\sqrt{\\tilde{v_t}} + \\epsilon \\big)  \\hspace{3mm}              \\\\\n        &\\rule{110mm}{0.4pt}                                                          \\\\[-1.ex]\n        &\\bf{return} \\:  \\theta_t                                                     \\\\[-1.ex]\n        &\\rule{110mm}{0.4pt}                                                          \\\\[-1.ex]\n   \\end{aligned}\n\nFor further details regarding the algorithm we refer to\n`lecture notes <https://www.cs.toronto.edu/~tijmen/csc321/slides/lecture_slides_lec6.pdf>`_ by G. Hinton.\nand centered version `Generating Sequences\nWith Recurrent Neural Networks <https://arxiv.org/pdf/1308.0850v5.pdf>`_.\nThe implementation here takes the square root of the gradient average before\nadding epsilon (note that TensorFlow interchanges these two operations). The effective\nlearning rate is thus :math:`\\gamma/(\\sqrt{v} + \\epsilon)` where :math:`\\gamma`\nis the scheduled learning rate and :math:`v` is the weighted moving average\nof the squared gradient.\n\nArgs:\n    params (iterable): iterable of parameters to optimize or dicts defining\n        parameter groups\n    lr (float, optional): learning rate (default: 1e-2)\n    momentum (float, optional): momentum factor (default: 0)\n    alpha (float, optional): smoothing constant (default: 0.99)\n    eps (float, optional): term added to the denominator to improve\n        numerical stability (default: 1e-8)\n    centered (bool, optional) : if ``True``, compute the centered RMSProp,\n        the gradient is normalized by an estimation of its variance\n    weight_decay (float, optional): weight decay (L2 penalty) (default: 0)", "docstring_sections": [{"type": "markdown", "value": "Implements RMSprop algorithm.\n\n.. math::\n   \\begin{aligned}\n        &\\rule{110mm}{0.4pt}                                                                 \\\\\n        &\\textbf{input}      : \\alpha \\text{ (alpha)},\\: \\gamma \\text{ (lr)},\n            \\: \\theta_0 \\text{ (params)}, \\: f(\\theta) \\text{ (objective)}                   \\\\\n        &\\hspace{13mm}   \\lambda \\text{ (weight decay)},\\: \\mu \\text{ (momentum)},\\: centered\\\\\n        &\\textbf{initialize} : v_0 \\leftarrow 0 \\text{ (square average)}, \\:\n            \\textbf{b}_0 \\leftarrow 0 \\text{ (buffer)}, \\: g^{ave}_0 \\leftarrow 0     \\\\[-1.ex]\n        &\\rule{110mm}{0.4pt}                                                                 \\\\\n        &\\textbf{for} \\: t=1 \\: \\textbf{to} \\: \\ldots \\: \\textbf{do}                         \\\\\n        &\\hspace{5mm}g_t           \\leftarrow   \\nabla_{\\theta} f_t (\\theta_{t-1})           \\\\\n        &\\hspace{5mm}if \\: \\lambda \\neq 0                                                    \\\\\n        &\\hspace{10mm} g_t \\leftarrow g_t + \\lambda  \\theta_{t-1}                            \\\\\n        &\\hspace{5mm}v_t           \\leftarrow   \\alpha v_{t-1} + (1 - \\alpha) g^2_t\n            \\hspace{8mm}                                                                     \\\\\n        &\\hspace{5mm} \\tilde{v_t} \\leftarrow v_t                                             \\\\\n        &\\hspace{5mm}if \\: centered                                                          \\\\\n        &\\hspace{10mm} g^{ave}_t \\leftarrow g^{ave}_{t-1} \\alpha + (1-\\alpha) g_t            \\\\\n        &\\hspace{10mm} \\tilde{v_t} \\leftarrow \\tilde{v_t} -  \\big(g^{ave}_{t} \\big)^2        \\\\\n        &\\hspace{5mm}if \\: \\mu > 0                                                           \\\\\n        &\\hspace{10mm} \\textbf{b}_t\\leftarrow \\mu \\textbf{b}_{t-1} +\n            g_t/ \\big(\\sqrt{\\tilde{v_t}} +  \\epsilon \\big)                                   \\\\\n        &\\hspace{10mm} \\theta_t \\leftarrow \\theta_{t-1} - \\gamma \\textbf{b}_t                \\\\\n        &\\hspace{5mm} else                                                                   \\\\\n        &\\hspace{10mm}\\theta_t      \\leftarrow   \\theta_{t-1} -\n            \\gamma  g_t/ \\big(\\sqrt{\\tilde{v_t}} + \\epsilon \\big)  \\hspace{3mm}              \\\\\n        &\\rule{110mm}{0.4pt}                                                          \\\\[-1.ex]\n        &\\bf{return} \\:  \\theta_t                                                     \\\\[-1.ex]\n        &\\rule{110mm}{0.4pt}                                                          \\\\[-1.ex]\n   \\end{aligned}\n\nFor further details regarding the algorithm we refer to\n`lecture notes <https://www.cs.toronto.edu/~tijmen/csc321/slides/lecture_slides_lec6.pdf>`_ by G. Hinton.\nand centered version `Generating Sequences\nWith Recurrent Neural Networks <https://arxiv.org/pdf/1308.0850v5.pdf>`_.\nThe implementation here takes the square root of the gradient average before\nadding epsilon (note that TensorFlow interchanges these two operations). The effective\nlearning rate is thus :math:`\\gamma/(\\sqrt{v} + \\epsilon)` where :math:`\\gamma`\nis the scheduled learning rate and :math:`v` is the weighted moving average\nof the squared gradient.\n\nArgs:\n    params (iterable): iterable of parameters to optimize or dicts defining\n        parameter groups\n    lr (float, optional): learning rate (default: 1e-2)\n    momentum (float, optional): momentum factor (default: 0)\n    alpha (float, optional): smoothing constant (default: 0.99)\n    eps (float, optional): term added to the denominator to improve\n        numerical stability (default: 1e-8)\n    centered (bool, optional) : if ``True``, compute the centered RMSProp,\n        the gradient is normalized by an estimation of its variance\n    weight_decay (float, optional): weight decay (L2 penalty) (default: 0)"}], "source": {"code": "class RMSprop(Optimizer):\n    r\"\"\"Implements RMSprop algorithm.\n\n    .. math::\n       \\begin{aligned}\n            &\\rule{110mm}{0.4pt}                                                                 \\\\\n            &\\textbf{input}      : \\alpha \\text{ (alpha)},\\: \\gamma \\text{ (lr)},\n                \\: \\theta_0 \\text{ (params)}, \\: f(\\theta) \\text{ (objective)}                   \\\\\n            &\\hspace{13mm}   \\lambda \\text{ (weight decay)},\\: \\mu \\text{ (momentum)},\\: centered\\\\\n            &\\textbf{initialize} : v_0 \\leftarrow 0 \\text{ (square average)}, \\:\n                \\textbf{b}_0 \\leftarrow 0 \\text{ (buffer)}, \\: g^{ave}_0 \\leftarrow 0     \\\\[-1.ex]\n            &\\rule{110mm}{0.4pt}                                                                 \\\\\n            &\\textbf{for} \\: t=1 \\: \\textbf{to} \\: \\ldots \\: \\textbf{do}                         \\\\\n            &\\hspace{5mm}g_t           \\leftarrow   \\nabla_{\\theta} f_t (\\theta_{t-1})           \\\\\n            &\\hspace{5mm}if \\: \\lambda \\neq 0                                                    \\\\\n            &\\hspace{10mm} g_t \\leftarrow g_t + \\lambda  \\theta_{t-1}                            \\\\\n            &\\hspace{5mm}v_t           \\leftarrow   \\alpha v_{t-1} + (1 - \\alpha) g^2_t\n                \\hspace{8mm}                                                                     \\\\\n            &\\hspace{5mm} \\tilde{v_t} \\leftarrow v_t                                             \\\\\n            &\\hspace{5mm}if \\: centered                                                          \\\\\n            &\\hspace{10mm} g^{ave}_t \\leftarrow g^{ave}_{t-1} \\alpha + (1-\\alpha) g_t            \\\\\n            &\\hspace{10mm} \\tilde{v_t} \\leftarrow \\tilde{v_t} -  \\big(g^{ave}_{t} \\big)^2        \\\\\n            &\\hspace{5mm}if \\: \\mu > 0                                                           \\\\\n            &\\hspace{10mm} \\textbf{b}_t\\leftarrow \\mu \\textbf{b}_{t-1} +\n                g_t/ \\big(\\sqrt{\\tilde{v_t}} +  \\epsilon \\big)                                   \\\\\n            &\\hspace{10mm} \\theta_t \\leftarrow \\theta_{t-1} - \\gamma \\textbf{b}_t                \\\\\n            &\\hspace{5mm} else                                                                   \\\\\n            &\\hspace{10mm}\\theta_t      \\leftarrow   \\theta_{t-1} -\n                \\gamma  g_t/ \\big(\\sqrt{\\tilde{v_t}} + \\epsilon \\big)  \\hspace{3mm}              \\\\\n            &\\rule{110mm}{0.4pt}                                                          \\\\[-1.ex]\n            &\\bf{return} \\:  \\theta_t                                                     \\\\[-1.ex]\n            &\\rule{110mm}{0.4pt}                                                          \\\\[-1.ex]\n       \\end{aligned}\n\n    For further details regarding the algorithm we refer to\n    `lecture notes <https://www.cs.toronto.edu/~tijmen/csc321/slides/lecture_slides_lec6.pdf>`_ by G. Hinton.\n    and centered version `Generating Sequences\n    With Recurrent Neural Networks <https://arxiv.org/pdf/1308.0850v5.pdf>`_.\n    The implementation here takes the square root of the gradient average before\n    adding epsilon (note that TensorFlow interchanges these two operations). The effective\n    learning rate is thus :math:`\\gamma/(\\sqrt{v} + \\epsilon)` where :math:`\\gamma`\n    is the scheduled learning rate and :math:`v` is the weighted moving average\n    of the squared gradient.\n\n    Args:\n        params (iterable): iterable of parameters to optimize or dicts defining\n            parameter groups\n        lr (float, optional): learning rate (default: 1e-2)\n        momentum (float, optional): momentum factor (default: 0)\n        alpha (float, optional): smoothing constant (default: 0.99)\n        eps (float, optional): term added to the denominator to improve\n            numerical stability (default: 1e-8)\n        centered (bool, optional) : if ``True``, compute the centered RMSProp,\n            the gradient is normalized by an estimation of its variance\n        weight_decay (float, optional): weight decay (L2 penalty) (default: 0)\n\n    \"\"\"\n\n    def __init__(self, params, lr=1e-2, alpha=0.99, eps=1e-8, weight_decay=0, momentum=0, centered=False):\n        if not 0.0 <= lr:\n            raise ValueError(\"Invalid learning rate: {}\".format(lr))\n        if not 0.0 <= eps:\n            raise ValueError(\"Invalid epsilon value: {}\".format(eps))\n        if not 0.0 <= momentum:\n            raise ValueError(\"Invalid momentum value: {}\".format(momentum))\n        if not 0.0 <= weight_decay:\n            raise ValueError(\"Invalid weight_decay value: {}\".format(weight_decay))\n        if not 0.0 <= alpha:\n            raise ValueError(\"Invalid alpha value: {}\".format(alpha))\n\n        defaults = dict(lr=lr, momentum=momentum, alpha=alpha, eps=eps, centered=centered, weight_decay=weight_decay)\n        super(RMSprop, self).__init__(params, defaults)\n\n    def __setstate__(self, state):\n        super(RMSprop, self).__setstate__(state)\n        for group in self.param_groups:\n            group.setdefault('momentum', 0)\n            group.setdefault('centered', False)\n\n    @torch.no_grad()\n    def step(self, closure=None):\n        \"\"\"Performs a single optimization step.\n\n        Args:\n            closure (callable, optional): A closure that reevaluates the model\n                and returns the loss.\n        \"\"\"\n        loss = None\n        if closure is not None:\n            with torch.enable_grad():\n                loss = closure()\n\n        for group in self.param_groups:\n            params_with_grad = []\n            grads = []\n            square_avgs = []\n            grad_avgs = []\n            momentum_buffer_list = []\n\n            for p in group['params']:\n                if p.grad is None:\n                    continue\n                params_with_grad.append(p)\n\n                if p.grad.is_sparse:\n                    raise RuntimeError('RMSprop does not support sparse gradients')\n                grads.append(p.grad)\n\n                state = self.state[p]\n\n                # State initialization\n                if len(state) == 0:\n                    state['step'] = 0\n                    state['square_avg'] = torch.zeros_like(p, memory_format=torch.preserve_format)\n                    if group['momentum'] > 0:\n                        state['momentum_buffer'] = torch.zeros_like(p, memory_format=torch.preserve_format)\n                    if group['centered']:\n                        state['grad_avg'] = torch.zeros_like(p, memory_format=torch.preserve_format)\n\n                square_avgs.append(state['square_avg'])\n\n                if group['momentum'] > 0:\n                    momentum_buffer_list.append(state['momentum_buffer'])\n                if group['centered']:\n                    grad_avgs.append(state['grad_avg'])\n\n                state['step'] += 1\n\n\n            F.rmsprop(params_with_grad,\n                      grads,\n                      square_avgs,\n                      grad_avgs,\n                      momentum_buffer_list,\n                      lr=group['lr'],\n                      alpha=group['alpha'],\n                      eps=group['eps'],\n                      weight_decay=group['weight_decay'],\n                      momentum=group['momentum'],\n                      centered=group['centered'])\n\n        return loss\n", "line_start": 6}, "children": {"ludwig.modules.optimization_modules.RMSPropOptimizerConfig.torch_type.__init__": {"name": "__init__", "path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.torch_type.__init__", "category": "method", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["special"], "parent_path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.torch_type", "has_contents": false, "docstring": "", "docstring_sections": [], "source": {"code": "    def __init__(self, params, lr=1e-2, alpha=0.99, eps=1e-8, weight_decay=0, momentum=0, centered=False):\n        if not 0.0 <= lr:\n            raise ValueError(\"Invalid learning rate: {}\".format(lr))\n        if not 0.0 <= eps:\n            raise ValueError(\"Invalid epsilon value: {}\".format(eps))\n        if not 0.0 <= momentum:\n            raise ValueError(\"Invalid momentum value: {}\".format(momentum))\n        if not 0.0 <= weight_decay:\n            raise ValueError(\"Invalid weight_decay value: {}\".format(weight_decay))\n        if not 0.0 <= alpha:\n            raise ValueError(\"Invalid alpha value: {}\".format(alpha))\n\n        defaults = dict(lr=lr, momentum=momentum, alpha=alpha, eps=eps, centered=centered, weight_decay=weight_decay)\n        super(RMSprop, self).__init__(params, defaults)\n", "line_start": 64}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "signature": {"parameters": [{"kind": "POSITIONAL_OR_KEYWORD", "name": "self"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "params"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "lr", "default": "0.01"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "alpha", "default": "0.99"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "eps", "default": "1e-08"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "weight_decay", "default": "0"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "momentum", "default": "0"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "centered", "default": "False"}]}}, "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.torch_type.__setstate__": {"name": "__setstate__", "path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.torch_type.__setstate__", "category": "method", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["special"], "parent_path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.torch_type", "has_contents": false, "docstring": "", "docstring_sections": [], "source": {"code": "    def __setstate__(self, state):\n        super(RMSprop, self).__setstate__(state)\n        for group in self.param_groups:\n            group.setdefault('momentum', 0)\n            group.setdefault('centered', False)\n", "line_start": 79}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "signature": {"parameters": [{"kind": "POSITIONAL_OR_KEYWORD", "name": "self"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "state"}]}}, "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.torch_type.step": {"name": "step", "path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.torch_type.step", "category": "method", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": [], "parent_path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.torch_type", "has_contents": true, "docstring": "Performs a single optimization step.\n\nArgs:\n    closure (callable, optional): A closure that reevaluates the model\n        and returns the loss.", "docstring_sections": [{"type": "markdown", "value": "Performs a single optimization step.\n\nArgs:\n    closure (callable, optional): A closure that reevaluates the model\n        and returns the loss."}], "source": {"code": "    @torch.no_grad()\n    def step(self, closure=None):\n        \"\"\"Performs a single optimization step.\n\n        Args:\n            closure (callable, optional): A closure that reevaluates the model\n                and returns the loss.\n        \"\"\"\n        loss = None\n        if closure is not None:\n            with torch.enable_grad():\n                loss = closure()\n\n        for group in self.param_groups:\n            params_with_grad = []\n            grads = []\n            square_avgs = []\n            grad_avgs = []\n            momentum_buffer_list = []\n\n            for p in group['params']:\n                if p.grad is None:\n                    continue\n                params_with_grad.append(p)\n\n                if p.grad.is_sparse:\n                    raise RuntimeError('RMSprop does not support sparse gradients')\n                grads.append(p.grad)\n\n                state = self.state[p]\n\n                # State initialization\n                if len(state) == 0:\n                    state['step'] = 0\n                    state['square_avg'] = torch.zeros_like(p, memory_format=torch.preserve_format)\n                    if group['momentum'] > 0:\n                        state['momentum_buffer'] = torch.zeros_like(p, memory_format=torch.preserve_format)\n                    if group['centered']:\n                        state['grad_avg'] = torch.zeros_like(p, memory_format=torch.preserve_format)\n\n                square_avgs.append(state['square_avg'])\n\n                if group['momentum'] > 0:\n                    momentum_buffer_list.append(state['momentum_buffer'])\n                if group['centered']:\n                    grad_avgs.append(state['grad_avg'])\n\n                state['step'] += 1\n\n\n            F.rmsprop(params_with_grad,\n                      grads,\n                      square_avgs,\n                      grad_avgs,\n                      momentum_buffer_list,\n                      lr=group['lr'],\n                      alpha=group['alpha'],\n                      eps=group['eps'],\n                      weight_decay=group['weight_decay'],\n                      momentum=group['momentum'],\n                      centered=group['centered'])\n\n        return loss\n", "line_start": 85}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "signature": {"parameters": [{"kind": "POSITIONAL_OR_KEYWORD", "name": "self"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "closure", "default": "None"}]}}}, "attributes": [], "methods": ["ludwig.modules.optimization_modules.RMSPropOptimizerConfig.torch_type.__init__", "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.torch_type.__setstate__", "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.torch_type.step"], "functions": [], "modules": [], "classes": [], "bases": ["torch.optim.optimizer.Optimizer"]}, "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.type": {"name": "type", "path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.type", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": [], "parent_path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig", "has_contents": true, "docstring": "Must be 'rmsprop' - corresponds to name in `ludwig.modules.optimization_modules.optimizer_registry`\n(default: 'rmsprop')", "docstring_sections": [{"type": "markdown", "value": "Must be 'rmsprop' - corresponds to name in `ludwig.modules.optimization_modules.optimizer_registry`\n(default: 'rmsprop')"}], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "str"}, "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.weight_decay": {"name": "weight_decay", "path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.weight_decay", "category": "attribute", "file_path": "/home/ksbrar/work/ludwig/ludwig/modules/optimization_modules.py", "relative_file_path": "ludwig/modules/optimization_modules.py", "properties": ["dataclass-field"], "parent_path": "ludwig.modules.optimization_modules.RMSPropOptimizerConfig", "has_contents": true, "docstring": "(default: 0.9)", "docstring_sections": [{"type": "markdown", "value": "(default: 0.9)"}], "source": {}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "type": "float"}}, "attributes": ["ludwig.modules.optimization_modules.RMSPropOptimizerConfig.type", "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.weight_decay", "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.momentum", "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.eps", "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.centered", "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.lr", "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.alpha"], "methods": ["ludwig.modules.optimization_modules.RMSPropOptimizerConfig.__eq__", "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.__init__", "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.__repr__"], "functions": [], "modules": [], "classes": ["ludwig.modules.optimization_modules.RMSPropOptimizerConfig.Schema", "ludwig.modules.optimization_modules.RMSPropOptimizerConfig.torch_type"], "bases": ["ludwig.modules.optimization_modules.BaseOptimizerConfig"]}]}
