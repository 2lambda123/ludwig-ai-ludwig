{"loading_errors": [], "parsing_errors": {}, "objects": [{"name": "RMSprop", "path": "torch.optim.rmsprop.RMSprop", "category": "class", "file_path": "/home/ksbrar/.venvwrapper_virtualenvs/ludwig_install-editable-deps-test_training-schema-torch/lib/python3.8/site-packages/torch/optim/rmsprop.py", "relative_file_path": "torch/optim/rmsprop.py", "properties": [], "parent_path": "torch.optim.rmsprop", "has_contents": true, "docstring": "Implements RMSprop algorithm.\n\n.. math::\n   \\begin{aligned}\n        &\\rule{110mm}{0.4pt}                                                                 \\\\\n        &\\textbf{input}      : \\alpha \\text{ (alpha)},\\: \\gamma \\text{ (lr)},\n            \\: \\theta_0 \\text{ (params)}, \\: f(\\theta) \\text{ (objective)}                   \\\\\n        &\\hspace{13mm}   \\lambda \\text{ (weight decay)},\\: \\mu \\text{ (momentum)},\\: centered\\\\\n        &\\textbf{initialize} : v_0 \\leftarrow 0 \\text{ (square average)}, \\:\n            \\textbf{b}_0 \\leftarrow 0 \\text{ (buffer)}, \\: g^{ave}_0 \\leftarrow 0     \\\\[-1.ex]\n        &\\rule{110mm}{0.4pt}                                                                 \\\\\n        &\\textbf{for} \\: t=1 \\: \\textbf{to} \\: \\ldots \\: \\textbf{do}                         \\\\\n        &\\hspace{5mm}g_t           \\leftarrow   \\nabla_{\\theta} f_t (\\theta_{t-1})           \\\\\n        &\\hspace{5mm}if \\: \\lambda \\neq 0                                                    \\\\\n        &\\hspace{10mm} g_t \\leftarrow g_t + \\lambda  \\theta_{t-1}                            \\\\\n        &\\hspace{5mm}v_t           \\leftarrow   \\alpha v_{t-1} + (1 - \\alpha) g^2_t\n            \\hspace{8mm}                                                                     \\\\\n        &\\hspace{5mm} \\tilde{v_t} \\leftarrow v_t                                             \\\\\n        &\\hspace{5mm}if \\: centered                                                          \\\\\n        &\\hspace{10mm} g^{ave}_t \\leftarrow g^{ave}_{t-1} \\alpha + (1-\\alpha) g_t            \\\\\n        &\\hspace{10mm} \\tilde{v_t} \\leftarrow \\tilde{v_t} -  \\big(g^{ave}_{t} \\big)^2        \\\\\n        &\\hspace{5mm}if \\: \\mu > 0                                                           \\\\\n        &\\hspace{10mm} \\textbf{b}_t\\leftarrow \\mu \\textbf{b}_{t-1} +\n            g_t/ \\big(\\sqrt{\\tilde{v_t}} +  \\epsilon \\big)                                   \\\\\n        &\\hspace{10mm} \\theta_t \\leftarrow \\theta_{t-1} - \\gamma \\textbf{b}_t                \\\\\n        &\\hspace{5mm} else                                                                   \\\\\n        &\\hspace{10mm}\\theta_t      \\leftarrow   \\theta_{t-1} -\n            \\gamma  g_t/ \\big(\\sqrt{\\tilde{v_t}} + \\epsilon \\big)  \\hspace{3mm}              \\\\\n        &\\rule{110mm}{0.4pt}                                                          \\\\[-1.ex]\n        &\\bf{return} \\:  \\theta_t                                                     \\\\[-1.ex]\n        &\\rule{110mm}{0.4pt}                                                          \\\\[-1.ex]\n   \\end{aligned}\n\nFor further details regarding the algorithm we refer to\n`lecture notes <https://www.cs.toronto.edu/~tijmen/csc321/slides/lecture_slides_lec6.pdf>`_ by G. Hinton.\nand centered version `Generating Sequences\nWith Recurrent Neural Networks <https://arxiv.org/pdf/1308.0850v5.pdf>`_.\nThe implementation here takes the square root of the gradient average before\nadding epsilon (note that TensorFlow interchanges these two operations). The effective\nlearning rate is thus :math:`\\gamma/(\\sqrt{v} + \\epsilon)` where :math:`\\gamma`\nis the scheduled learning rate and :math:`v` is the weighted moving average\nof the squared gradient.\n\nArgs:\n    params (iterable): iterable of parameters to optimize or dicts defining\n        parameter groups\n    lr (float, optional): learning rate (default: 1e-2)\n    momentum (float, optional): momentum factor (default: 0)\n    alpha (float, optional): smoothing constant (default: 0.99)\n    eps (float, optional): term added to the denominator to improve\n        numerical stability (default: 1e-8)\n    centered (bool, optional) : if ``True``, compute the centered RMSProp,\n        the gradient is normalized by an estimation of its variance\n    weight_decay (float, optional): weight decay (L2 penalty) (default: 0)", "docstring_sections": [{"type": "markdown", "value": "Implements RMSprop algorithm.\n\n.. math::\n   \\begin{aligned}\n        &\\rule{110mm}{0.4pt}                                                                 \\\\\n        &\\textbf{input}      : \\alpha \\text{ (alpha)},\\: \\gamma \\text{ (lr)},\n            \\: \\theta_0 \\text{ (params)}, \\: f(\\theta) \\text{ (objective)}                   \\\\\n        &\\hspace{13mm}   \\lambda \\text{ (weight decay)},\\: \\mu \\text{ (momentum)},\\: centered\\\\\n        &\\textbf{initialize} : v_0 \\leftarrow 0 \\text{ (square average)}, \\:\n            \\textbf{b}_0 \\leftarrow 0 \\text{ (buffer)}, \\: g^{ave}_0 \\leftarrow 0     \\\\[-1.ex]\n        &\\rule{110mm}{0.4pt}                                                                 \\\\\n        &\\textbf{for} \\: t=1 \\: \\textbf{to} \\: \\ldots \\: \\textbf{do}                         \\\\\n        &\\hspace{5mm}g_t           \\leftarrow   \\nabla_{\\theta} f_t (\\theta_{t-1})           \\\\\n        &\\hspace{5mm}if \\: \\lambda \\neq 0                                                    \\\\\n        &\\hspace{10mm} g_t \\leftarrow g_t + \\lambda  \\theta_{t-1}                            \\\\\n        &\\hspace{5mm}v_t           \\leftarrow   \\alpha v_{t-1} + (1 - \\alpha) g^2_t\n            \\hspace{8mm}                                                                     \\\\\n        &\\hspace{5mm} \\tilde{v_t} \\leftarrow v_t                                             \\\\\n        &\\hspace{5mm}if \\: centered                                                          \\\\\n        &\\hspace{10mm} g^{ave}_t \\leftarrow g^{ave}_{t-1} \\alpha + (1-\\alpha) g_t            \\\\\n        &\\hspace{10mm} \\tilde{v_t} \\leftarrow \\tilde{v_t} -  \\big(g^{ave}_{t} \\big)^2        \\\\\n        &\\hspace{5mm}if \\: \\mu > 0                                                           \\\\\n        &\\hspace{10mm} \\textbf{b}_t\\leftarrow \\mu \\textbf{b}_{t-1} +\n            g_t/ \\big(\\sqrt{\\tilde{v_t}} +  \\epsilon \\big)                                   \\\\\n        &\\hspace{10mm} \\theta_t \\leftarrow \\theta_{t-1} - \\gamma \\textbf{b}_t                \\\\\n        &\\hspace{5mm} else                                                                   \\\\\n        &\\hspace{10mm}\\theta_t      \\leftarrow   \\theta_{t-1} -\n            \\gamma  g_t/ \\big(\\sqrt{\\tilde{v_t}} + \\epsilon \\big)  \\hspace{3mm}              \\\\\n        &\\rule{110mm}{0.4pt}                                                          \\\\[-1.ex]\n        &\\bf{return} \\:  \\theta_t                                                     \\\\[-1.ex]\n        &\\rule{110mm}{0.4pt}                                                          \\\\[-1.ex]\n   \\end{aligned}\n\nFor further details regarding the algorithm we refer to\n`lecture notes <https://www.cs.toronto.edu/~tijmen/csc321/slides/lecture_slides_lec6.pdf>`_ by G. Hinton.\nand centered version `Generating Sequences\nWith Recurrent Neural Networks <https://arxiv.org/pdf/1308.0850v5.pdf>`_.\nThe implementation here takes the square root of the gradient average before\nadding epsilon (note that TensorFlow interchanges these two operations). The effective\nlearning rate is thus :math:`\\gamma/(\\sqrt{v} + \\epsilon)` where :math:`\\gamma`\nis the scheduled learning rate and :math:`v` is the weighted moving average\nof the squared gradient.\n"}, {"type": "parameters", "value": [{"description": "iterable of parameters to optimize or dicts defining\nparameter groups", "annotation": "iterable", "name": "params", "kind": "POSITIONAL_OR_KEYWORD", "default": "", "is_optional": false, "is_required": true, "is_args": false, "is_kwargs": false}, {"description": "learning rate (default: 1e-2)", "annotation": "float", "name": "lr", "kind": "POSITIONAL_OR_KEYWORD", "default": "0.01", "is_optional": true, "is_required": false, "is_args": false, "is_kwargs": false}, {"description": "momentum factor (default: 0)", "annotation": "float", "name": "momentum", "kind": "POSITIONAL_OR_KEYWORD", "default": "0", "is_optional": true, "is_required": false, "is_args": false, "is_kwargs": false}, {"description": "smoothing constant (default: 0.99)", "annotation": "float", "name": "alpha", "kind": "POSITIONAL_OR_KEYWORD", "default": "0.99", "is_optional": true, "is_required": false, "is_args": false, "is_kwargs": false}, {"description": "term added to the denominator to improve\nnumerical stability (default: 1e-8)", "annotation": "float", "name": "eps", "kind": "POSITIONAL_OR_KEYWORD", "default": "1e-08", "is_optional": true, "is_required": false, "is_args": false, "is_kwargs": false}, {"description": "if ``True``, compute the centered RMSProp,\nthe gradient is normalized by an estimation of its variance", "annotation": "bool, optional) ", "name": "centered", "kind": "POSITIONAL_OR_KEYWORD", "default": "False", "is_optional": true, "is_required": false, "is_args": false, "is_kwargs": false}, {"description": "weight decay (L2 penalty) (default: 0)", "annotation": "float", "name": "weight_decay", "kind": "POSITIONAL_OR_KEYWORD", "default": "0", "is_optional": true, "is_required": false, "is_args": false, "is_kwargs": false}]}], "source": {"code": "class RMSprop(Optimizer):\n    r\"\"\"Implements RMSprop algorithm.\n\n    .. math::\n       \\begin{aligned}\n            &\\rule{110mm}{0.4pt}                                                                 \\\\\n            &\\textbf{input}      : \\alpha \\text{ (alpha)},\\: \\gamma \\text{ (lr)},\n                \\: \\theta_0 \\text{ (params)}, \\: f(\\theta) \\text{ (objective)}                   \\\\\n            &\\hspace{13mm}   \\lambda \\text{ (weight decay)},\\: \\mu \\text{ (momentum)},\\: centered\\\\\n            &\\textbf{initialize} : v_0 \\leftarrow 0 \\text{ (square average)}, \\:\n                \\textbf{b}_0 \\leftarrow 0 \\text{ (buffer)}, \\: g^{ave}_0 \\leftarrow 0     \\\\[-1.ex]\n            &\\rule{110mm}{0.4pt}                                                                 \\\\\n            &\\textbf{for} \\: t=1 \\: \\textbf{to} \\: \\ldots \\: \\textbf{do}                         \\\\\n            &\\hspace{5mm}g_t           \\leftarrow   \\nabla_{\\theta} f_t (\\theta_{t-1})           \\\\\n            &\\hspace{5mm}if \\: \\lambda \\neq 0                                                    \\\\\n            &\\hspace{10mm} g_t \\leftarrow g_t + \\lambda  \\theta_{t-1}                            \\\\\n            &\\hspace{5mm}v_t           \\leftarrow   \\alpha v_{t-1} + (1 - \\alpha) g^2_t\n                \\hspace{8mm}                                                                     \\\\\n            &\\hspace{5mm} \\tilde{v_t} \\leftarrow v_t                                             \\\\\n            &\\hspace{5mm}if \\: centered                                                          \\\\\n            &\\hspace{10mm} g^{ave}_t \\leftarrow g^{ave}_{t-1} \\alpha + (1-\\alpha) g_t            \\\\\n            &\\hspace{10mm} \\tilde{v_t} \\leftarrow \\tilde{v_t} -  \\big(g^{ave}_{t} \\big)^2        \\\\\n            &\\hspace{5mm}if \\: \\mu > 0                                                           \\\\\n            &\\hspace{10mm} \\textbf{b}_t\\leftarrow \\mu \\textbf{b}_{t-1} +\n                g_t/ \\big(\\sqrt{\\tilde{v_t}} +  \\epsilon \\big)                                   \\\\\n            &\\hspace{10mm} \\theta_t \\leftarrow \\theta_{t-1} - \\gamma \\textbf{b}_t                \\\\\n            &\\hspace{5mm} else                                                                   \\\\\n            &\\hspace{10mm}\\theta_t      \\leftarrow   \\theta_{t-1} -\n                \\gamma  g_t/ \\big(\\sqrt{\\tilde{v_t}} + \\epsilon \\big)  \\hspace{3mm}              \\\\\n            &\\rule{110mm}{0.4pt}                                                          \\\\[-1.ex]\n            &\\bf{return} \\:  \\theta_t                                                     \\\\[-1.ex]\n            &\\rule{110mm}{0.4pt}                                                          \\\\[-1.ex]\n       \\end{aligned}\n\n    For further details regarding the algorithm we refer to\n    `lecture notes <https://www.cs.toronto.edu/~tijmen/csc321/slides/lecture_slides_lec6.pdf>`_ by G. Hinton.\n    and centered version `Generating Sequences\n    With Recurrent Neural Networks <https://arxiv.org/pdf/1308.0850v5.pdf>`_.\n    The implementation here takes the square root of the gradient average before\n    adding epsilon (note that TensorFlow interchanges these two operations). The effective\n    learning rate is thus :math:`\\gamma/(\\sqrt{v} + \\epsilon)` where :math:`\\gamma`\n    is the scheduled learning rate and :math:`v` is the weighted moving average\n    of the squared gradient.\n\n    Args:\n        params (iterable): iterable of parameters to optimize or dicts defining\n            parameter groups\n        lr (float, optional): learning rate (default: 1e-2)\n        momentum (float, optional): momentum factor (default: 0)\n        alpha (float, optional): smoothing constant (default: 0.99)\n        eps (float, optional): term added to the denominator to improve\n            numerical stability (default: 1e-8)\n        centered (bool, optional) : if ``True``, compute the centered RMSProp,\n            the gradient is normalized by an estimation of its variance\n        weight_decay (float, optional): weight decay (L2 penalty) (default: 0)\n\n    \"\"\"\n\n    def __init__(self, params, lr=1e-2, alpha=0.99, eps=1e-8, weight_decay=0, momentum=0, centered=False):\n        if not 0.0 <= lr:\n            raise ValueError(\"Invalid learning rate: {}\".format(lr))\n        if not 0.0 <= eps:\n            raise ValueError(\"Invalid epsilon value: {}\".format(eps))\n        if not 0.0 <= momentum:\n            raise ValueError(\"Invalid momentum value: {}\".format(momentum))\n        if not 0.0 <= weight_decay:\n            raise ValueError(\"Invalid weight_decay value: {}\".format(weight_decay))\n        if not 0.0 <= alpha:\n            raise ValueError(\"Invalid alpha value: {}\".format(alpha))\n\n        defaults = dict(lr=lr, momentum=momentum, alpha=alpha, eps=eps, centered=centered, weight_decay=weight_decay)\n        super(RMSprop, self).__init__(params, defaults)\n\n    def __setstate__(self, state):\n        super(RMSprop, self).__setstate__(state)\n        for group in self.param_groups:\n            group.setdefault('momentum', 0)\n            group.setdefault('centered', False)\n\n    @torch.no_grad()\n    def step(self, closure=None):\n        \"\"\"Performs a single optimization step.\n\n        Args:\n            closure (callable, optional): A closure that reevaluates the model\n                and returns the loss.\n        \"\"\"\n        loss = None\n        if closure is not None:\n            with torch.enable_grad():\n                loss = closure()\n\n        for group in self.param_groups:\n            params_with_grad = []\n            grads = []\n            square_avgs = []\n            grad_avgs = []\n            momentum_buffer_list = []\n\n            for p in group['params']:\n                if p.grad is None:\n                    continue\n                params_with_grad.append(p)\n\n                if p.grad.is_sparse:\n                    raise RuntimeError('RMSprop does not support sparse gradients')\n                grads.append(p.grad)\n\n                state = self.state[p]\n\n                # State initialization\n                if len(state) == 0:\n                    state['step'] = 0\n                    state['square_avg'] = torch.zeros_like(p, memory_format=torch.preserve_format)\n                    if group['momentum'] > 0:\n                        state['momentum_buffer'] = torch.zeros_like(p, memory_format=torch.preserve_format)\n                    if group['centered']:\n                        state['grad_avg'] = torch.zeros_like(p, memory_format=torch.preserve_format)\n\n                square_avgs.append(state['square_avg'])\n\n                if group['momentum'] > 0:\n                    momentum_buffer_list.append(state['momentum_buffer'])\n                if group['centered']:\n                    grad_avgs.append(state['grad_avg'])\n\n                state['step'] += 1\n\n\n            F.rmsprop(params_with_grad,\n                      grads,\n                      square_avgs,\n                      grad_avgs,\n                      momentum_buffer_list,\n                      lr=group['lr'],\n                      alpha=group['alpha'],\n                      eps=group['eps'],\n                      weight_decay=group['weight_decay'],\n                      momentum=group['momentum'],\n                      centered=group['centered'])\n\n        return loss\n", "line_start": 6}, "children": {"torch.optim.rmsprop.RMSprop.__init__": {"name": "__init__", "path": "torch.optim.rmsprop.RMSprop.__init__", "category": "method", "file_path": "/home/ksbrar/.venvwrapper_virtualenvs/ludwig_install-editable-deps-test_training-schema-torch/lib/python3.8/site-packages/torch/optim/rmsprop.py", "relative_file_path": "torch/optim/rmsprop.py", "properties": ["special"], "parent_path": "torch.optim.rmsprop.RMSprop", "has_contents": false, "docstring": "", "docstring_sections": [], "source": {"code": "    def __init__(self, params, lr=1e-2, alpha=0.99, eps=1e-8, weight_decay=0, momentum=0, centered=False):\n        if not 0.0 <= lr:\n            raise ValueError(\"Invalid learning rate: {}\".format(lr))\n        if not 0.0 <= eps:\n            raise ValueError(\"Invalid epsilon value: {}\".format(eps))\n        if not 0.0 <= momentum:\n            raise ValueError(\"Invalid momentum value: {}\".format(momentum))\n        if not 0.0 <= weight_decay:\n            raise ValueError(\"Invalid weight_decay value: {}\".format(weight_decay))\n        if not 0.0 <= alpha:\n            raise ValueError(\"Invalid alpha value: {}\".format(alpha))\n\n        defaults = dict(lr=lr, momentum=momentum, alpha=alpha, eps=eps, centered=centered, weight_decay=weight_decay)\n        super(RMSprop, self).__init__(params, defaults)\n", "line_start": 64}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "signature": {"parameters": [{"kind": "POSITIONAL_OR_KEYWORD", "name": "self"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "params"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "lr", "default": "0.01"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "alpha", "default": "0.99"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "eps", "default": "1e-08"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "weight_decay", "default": "0"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "momentum", "default": "0"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "centered", "default": "False"}]}}, "torch.optim.rmsprop.RMSprop.__setstate__": {"name": "__setstate__", "path": "torch.optim.rmsprop.RMSprop.__setstate__", "category": "method", "file_path": "/home/ksbrar/.venvwrapper_virtualenvs/ludwig_install-editable-deps-test_training-schema-torch/lib/python3.8/site-packages/torch/optim/rmsprop.py", "relative_file_path": "torch/optim/rmsprop.py", "properties": ["special"], "parent_path": "torch.optim.rmsprop.RMSprop", "has_contents": false, "docstring": "", "docstring_sections": [], "source": {"code": "    def __setstate__(self, state):\n        super(RMSprop, self).__setstate__(state)\n        for group in self.param_groups:\n            group.setdefault('momentum', 0)\n            group.setdefault('centered', False)\n", "line_start": 79}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "signature": {"parameters": [{"kind": "POSITIONAL_OR_KEYWORD", "name": "self"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "state"}]}}, "torch.optim.rmsprop.RMSprop.step": {"name": "step", "path": "torch.optim.rmsprop.RMSprop.step", "category": "method", "file_path": "/home/ksbrar/.venvwrapper_virtualenvs/ludwig_install-editable-deps-test_training-schema-torch/lib/python3.8/site-packages/torch/optim/rmsprop.py", "relative_file_path": "torch/optim/rmsprop.py", "properties": [], "parent_path": "torch.optim.rmsprop.RMSprop", "has_contents": true, "docstring": "Performs a single optimization step.\n\nArgs:\n    closure (callable, optional): A closure that reevaluates the model\n        and returns the loss.", "docstring_sections": [{"type": "markdown", "value": "Performs a single optimization step.\n"}, {"type": "parameters", "value": [{"description": "A closure that reevaluates the model\nand returns the loss.", "annotation": "callable", "name": "closure", "kind": "POSITIONAL_OR_KEYWORD", "default": "None", "is_optional": true, "is_required": false, "is_args": false, "is_kwargs": false}]}], "source": {"code": "    @torch.no_grad()\n    def step(self, closure=None):\n        \"\"\"Performs a single optimization step.\n\n        Args:\n            closure (callable, optional): A closure that reevaluates the model\n                and returns the loss.\n        \"\"\"\n        loss = None\n        if closure is not None:\n            with torch.enable_grad():\n                loss = closure()\n\n        for group in self.param_groups:\n            params_with_grad = []\n            grads = []\n            square_avgs = []\n            grad_avgs = []\n            momentum_buffer_list = []\n\n            for p in group['params']:\n                if p.grad is None:\n                    continue\n                params_with_grad.append(p)\n\n                if p.grad.is_sparse:\n                    raise RuntimeError('RMSprop does not support sparse gradients')\n                grads.append(p.grad)\n\n                state = self.state[p]\n\n                # State initialization\n                if len(state) == 0:\n                    state['step'] = 0\n                    state['square_avg'] = torch.zeros_like(p, memory_format=torch.preserve_format)\n                    if group['momentum'] > 0:\n                        state['momentum_buffer'] = torch.zeros_like(p, memory_format=torch.preserve_format)\n                    if group['centered']:\n                        state['grad_avg'] = torch.zeros_like(p, memory_format=torch.preserve_format)\n\n                square_avgs.append(state['square_avg'])\n\n                if group['momentum'] > 0:\n                    momentum_buffer_list.append(state['momentum_buffer'])\n                if group['centered']:\n                    grad_avgs.append(state['grad_avg'])\n\n                state['step'] += 1\n\n\n            F.rmsprop(params_with_grad,\n                      grads,\n                      square_avgs,\n                      grad_avgs,\n                      momentum_buffer_list,\n                      lr=group['lr'],\n                      alpha=group['alpha'],\n                      eps=group['eps'],\n                      weight_decay=group['weight_decay'],\n                      momentum=group['momentum'],\n                      centered=group['centered'])\n\n        return loss\n", "line_start": 85}, "children": {}, "attributes": [], "methods": [], "functions": [], "modules": [], "classes": [], "signature": {"parameters": [{"kind": "POSITIONAL_OR_KEYWORD", "name": "self"}, {"kind": "POSITIONAL_OR_KEYWORD", "name": "closure", "default": "None"}]}}}, "attributes": [], "methods": ["torch.optim.rmsprop.RMSprop.__init__", "torch.optim.rmsprop.RMSprop.__setstate__", "torch.optim.rmsprop.RMSprop.step"], "functions": [], "modules": [], "classes": [], "bases": ["torch.optim.optimizer.Optimizer"]}]}
